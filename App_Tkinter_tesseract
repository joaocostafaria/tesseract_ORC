import cv2 as cv
from PIL import Image
import PIL.Image
from pathlib import Path
import pytesseract
from pdf2image import convert_from_path
# Desenvolver aplicação
import tkinter as tk
from tkinter import ttk
import sys
# Bibliotecas para arrastar e largar documentos
if sys.version_info[0] == 2:
    from tkinter import *
else:
    from tkinter import *
from tkinterdnd2 import *
# trabalhar os caminhos
import os
# escrever no Exel
import xlsxwriter
# Extrair nome de utilizador
import getpass as gt


def drop(event):
    entry_sv.set(event.data)
# Comand do botão "imprimir dados" Tkinter


def imprimir_medidas():
    ctess = str(Path('C:', '/', 'Users'))
    usertess = str(Path(gt.getuser(), '/', gt.getuser()))
    apptess = "\AppData\Local\Programs\Tesseract-OCR/tesseract.exe"
    global j
    j = ctess + usertess + apptess
    global img1
    img1 = cv.imread('imagemfinal.jpg')
    if cb_tipos_artigo.get() == '42':
        # Recortar 1º Quadro da imagem
        novo_y_1 = int(num_novos_y)
        crop_image_1 = img1[0:novo_y_1]
        q = 590
        a = (q + 220)
        z = (q - 590)
        p = (q + 250)
        # Recortar localização das Dimensoes do quadro 1
        crop_image_1_dimensoes = crop_image_1[q + 60:a - 20, z:p]
        crop_image_1_dimensoes = cv.cvtColor(crop_image_1_dimensoes, cv.COLOR_BGR2GRAY)
        # Reconhecimento do texto da imagem recortada
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_dimensoes = pytesseract.image_to_string(crop_image_1_dimensoes, config='--psm 6 digits')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_dimensoes)
            # Escrever na tela do Tkinter os caracteres extraidos
            texto_imprimir_dimensoes['text'] = result_1_dimensoes
        # Unidades_1
        crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
        crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
        crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
        crop_image_1_unidades = cv.threshold(crop_image_1_unidades, 220, 255, cv.THRESH_BINARY)[1]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_unidades = pytesseract.image_to_string(
            crop_image_1_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
        if result_1_unidades == "" or result_1_unidades[0] == str(4) \
                or result_1_unidades[0:2] == str(28) or result_1_unidades[0:2] == str(29) or result_1_unidades[0:1] == str(0):
            crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
            crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_unidades = pytesseract.image_to_string(
                crop_image_1_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_1_unidades[0:1] == str(0):
                crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340),
                                        (z + 850):(p + 402)]
                crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
                kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
                crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_1_unidades = pytesseract.image_to_string(
                    crop_image_1_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
        else:
            pass
        with open('abc.txt', mode='w') as file:
            file.write(result_1_unidades)
            texto_imprimir_unidades['text'] = result_1_unidades
        # Cliche_1
        crop_image_1_cliche = crop_image_1[(q + 660):(a + 1100), z:(p - 240)]
        crop_image_1_cliche = cv.cvtColor(crop_image_1_cliche, cv.COLOR_BGR2GRAY)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_cliche = pytesseract.image_to_string(
            crop_image_1_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_cliche)
            texto_imprimir_cliche['text'] = result_1_cliche
        # Tinta_1
        crop_image_1_tinta = crop_image_1[(q - 200):(a + 400), (z + 3530):(p + 3030)]
        crop_image_1_tinta = cv.fastNlMeansDenoisingColored(crop_image_1_tinta, None, 10, 10, 7, 21)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_tinta = cv.morphologyEx(crop_image_1_tinta, cv.MORPH_CLOSE, kernel_1)
        crop_image_1_tinta = cv.cvtColor(crop_image_1_tinta, cv.COLOR_BGR2GRAY)
        crop_image_1_tinta = cv.threshold(crop_image_1_tinta, 220, 255, cv.THRESH_BINARY)[1]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_tinta = pytesseract.image_to_string(
            crop_image_1_tinta,
            config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_tinta)
            texto_imprimir_tinta['text'] = result_1_tinta
        # n_cores_1
        crop_image_1_n_cores = crop_image_1[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
        crop_image_1_n_cores = cv.fastNlMeansDenoisingColored(crop_image_1_n_cores, None, 10, 10, 7, 21)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_n_cores = cv.morphologyEx(crop_image_1_n_cores, cv.MORPH_CLOSE, kernel_1)
        crop_image_1_n_cores = cv.cvtColor(crop_image_1_n_cores, cv.COLOR_BGR2GRAY)
        crop_image_1_n_cores = cv.threshold(crop_image_1_n_cores, 220, 255, cv.THRESH_BINARY)[1]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_n_cores = pytesseract.image_to_string(
            crop_image_1_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_n_cores)
            texto_imprimir_n_cores['text'] = result_1_n_cores
        # n_caixas_1
        crop_image_1_n_caixas = crop_image_1[(q + 270):(a + 200), (z + 80):(p - 570)]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_n_caixas = pytesseract.image_to_string(crop_image_1_n_caixas, config='--psm 6')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_n_caixas)
            texto_imprimir_n_caixas['text'] = result_1_n_caixas
        # tipo_clientes_1
        crop_image_1_tipo_clientes = crop_image_1[(q - 190):(a - 250), (z + 5980):(p + 5730)]
        crop_image_1_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_1_tipo_clientes, None, 10, 10, 7, 21)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_tipo_clientes = cv.morphologyEx(crop_image_1_tipo_clientes, cv.MORPH_CLOSE, kernel_1)
        crop_image_1_tipo_clientes = cv.cvtColor(crop_image_1_tipo_clientes, cv.COLOR_BGR2GRAY)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_tipo_clientes = pytesseract.image_to_string(
            crop_image_1_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_tipo_clientes)
            texto_imprimir_clientes['text'] = result_1_tipo_clientes
        # Servicos_1_1
        crop_image_1_servicos_1 = crop_image_1[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_servicos_1 = pytesseract.image_to_string(crop_image_1_servicos_1, config='--psm 6')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_servicos_1)
            texto_imprimir_servicos_1['text'] = result_1_servicos_1
        # Servicos_2_1
        crop_image_1_servicos_2 = crop_image_1[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_servicos_2 = pytesseract.image_to_string(crop_image_1_servicos_2, config='--psm 6')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_servicos_2)
            texto_imprimir_servicos_2['text'] = result_1_servicos_2
        # Caixas_1_1
        crop_image_1_caixas = crop_image_1[(q - 965):(a + 3000), (z + 550):(p - 20)]
        crop_image_1_caixas = cv.cvtColor(crop_image_1_caixas, cv.COLOR_BGR2GRAY)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_caixas = cv.morphologyEx(crop_image_1_caixas, cv.MORPH_CLOSE, kernel_1)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_caixas = pytesseract.image_to_string(crop_image_1_caixas,
                                                      config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_caixas)
            texto_imprimir_1_caixas['text'] = result_1_caixas
        # Cor_1_1
        crop_image_1_1_cor = crop_image_1[(q - 230):(a - 260), (z + 6575):(p + 6225)]
        crop_image_1_1_cor = cv.fastNlMeansDenoisingColored(crop_image_1_1_cor, None, 10, 10, 7, 21)
        crop_image_1_1_cor = cv.cvtColor(crop_image_1_1_cor, cv.COLOR_BGR2GRAY)
        kernel_1_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_1_cor = cv.morphologyEx(crop_image_1_1_cor, cv.MORPH_CLOSE, kernel_1_1)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_1_cor = pytesseract.image_to_string(
            crop_image_1_1_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_1_cor)
            texto_imprimir_cor['text'] = result_1_1_cor
        # Cor_2_1
        crop_image_1_2_cor = crop_image_1[(q + 90):(a + 60), (z + 6575):(p + 6225)]
        crop_image_1_2_cor = cv.fastNlMeansDenoisingColored(crop_image_1_2_cor, None, 10, 10, 7, 21)
        crop_image_1_2_cor = cv.cvtColor(crop_image_1_2_cor, cv.COLOR_BGR2GRAY)
        kernel_1_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_2_cor = cv.morphologyEx(crop_image_1_2_cor, cv.MORPH_CLOSE, kernel_1_2)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_2_cor = pytesseract.image_to_string(
            crop_image_1_2_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_2_cor)
            texto_imprimir_cor['text'] = result_1_2_cor
        # Cor_3_1
        crop_image_1_3_cor = crop_image_1[(q + 400):(a + 380), (z + 6575):(p + 6225)]
        crop_image_1_3_cor = cv.fastNlMeansDenoisingColored(crop_image_1_3_cor, None, 10, 10, 7, 21)
        crop_image_1_3_cor = cv.cvtColor(crop_image_1_3_cor, cv.COLOR_BGR2GRAY)
        kernel_1_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_3_cor = cv.morphologyEx(crop_image_1_3_cor, cv.MORPH_CLOSE, kernel_1_3)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_3_cor = pytesseract.image_to_string(
            crop_image_1_3_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_3_cor)
            texto_imprimir_cor['text'] = result_1_3_cor
        # Cor_4_1
        crop_image_1_4_cor = crop_image_1[(q + 740):(a + 690), (z + 6585):(p + 6215)]
        crop_image_1_4_cor = cv.fastNlMeansDenoisingColored(crop_image_1_4_cor, None, 10, 10, 7, 21)
        crop_image_1_4_cor = cv.cvtColor(crop_image_1_4_cor, cv.COLOR_BGR2GRAY)
        kernel_1_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_4_cor = cv.morphologyEx(crop_image_1_4_cor, cv.MORPH_CLOSE, kernel_1_4)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_4_cor = pytesseract.image_to_string(
            crop_image_1_4_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_4_cor)
            texto_imprimir_cor['text'] = result_1_4_cor
        # Cor_5_1
        crop_image_1_5_cor = crop_image_1[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
        crop_image_1_5_cor = cv.fastNlMeansDenoisingColored(crop_image_1_5_cor, None, 10, 10, 7, 21)
        crop_image_1_5_cor = cv.cvtColor(crop_image_1_5_cor, cv.COLOR_BGR2GRAY)
        kernel_1_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_5_cor = cv.morphologyEx(crop_image_1_5_cor, cv.MORPH_CLOSE, kernel_1_5)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_5_cor = pytesseract.image_to_string(
            crop_image_1_5_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_5_cor)
            texto_imprimir_cor['text'] = result_1_5_cor
        # Cor_6_1
        crop_image_1_6_cor = crop_image_1[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
        crop_image_1_6_cor = cv.fastNlMeansDenoisingColored(crop_image_1_6_cor, None, 10, 10, 7, 21)
        crop_image_1_6_cor = cv.cvtColor(crop_image_1_6_cor, cv.COLOR_BGR2GRAY)
        kernel_1_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_6_cor = cv.morphologyEx(crop_image_1_6_cor, cv.MORPH_CLOSE, kernel_1_6)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_6_cor = pytesseract.image_to_string(
            crop_image_1_6_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_6_cor)
            texto_imprimir_cor['text'] = result_1_6_cor
        # Cor_fabricada_1
        crop_image_1_fabricada_cor = crop_image_1[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
        crop_image_1_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_1_fabricada_cor, None, 10, 10, 7, 21)
        crop_image_1_fabricada_cor = cv.cvtColor(crop_image_1_fabricada_cor, cv.COLOR_BGR2GRAY)
        kernel_1_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_fabricada_cor = cv.morphologyEx(crop_image_1_fabricada_cor, cv.MORPH_CLOSE, kernel_1_7)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_fabricada_cor = pytesseract.image_to_string(
            crop_image_1_fabricada_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_fabricada_cor)
            texto_imprimir_cor['text'] = result_fabricada_cor

        # Total_1
        crop_image_1_total = crop_image_1[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
        crop_image_1_total = cv.cvtColor(crop_image_1_total, cv.COLOR_BGR2GRAY)
        crop_image_1_total = cv.threshold(crop_image_1_total, 220, 255, cv.THRESH_BINARY)[1]
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_total = cv.morphologyEx(crop_image_1_total, cv.MORPH_CLOSE, kernel_1)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_total = pytesseract.image_to_string(crop_image_1_total, config='--psm 6')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_total)
            texto_imprimir_total['text'] = result_1_total
            if result_1_total[0:1] == str(9):
                crop_image_1_total = crop_image_1[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                crop_image_1_total = cv.cvtColor(crop_image_1_total, cv.COLOR_BGR2GRAY)
                kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_1_total = cv.morphologyEx(crop_image_1_total, cv.MORPH_CLOSE, kernel_1)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_1_total = pytesseract.image_to_string(crop_image_1_total, config='--psm 6')
                with open('abc.txt', mode='w') as file:
                    file.write(result_1_total)
                    texto_imprimir_total['text'] = result_1_total
        pass
    if cb_tipos_artigo.get() == '90':
        # Recortar 1º Quadro da imagem
        novo_y_1 = int(num_novos_y)
        crop_image_1 = img1[0:novo_y_1]
        q = 590
        a = (q + 220)
        z = (q - 590)
        p = (q + 250)
        # Recortar localização das Dimensoes do quadro 1
        crop_image_1_dimensoes = crop_image_1[q + 60:a - 20, z:p]
        crop_image_1_dimensoes = cv.cvtColor(crop_image_1_dimensoes, cv.COLOR_BGR2GRAY)
        # Reconhecimento do texto da imagem recortada
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_dimensoes = pytesseract.image_to_string(crop_image_1_dimensoes, config='--psm 6 digits')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_dimensoes)
            # Escrever na tela do Tkinter os caracteres extraidos
            texto_imprimir_dimensoes['text'] = result_1_dimensoes
        # Unidades_1
        crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
        crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
        crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
        crop_image_1_unidades = cv.threshold(crop_image_1_unidades, 220, 255, cv.THRESH_BINARY)[1]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_unidades = pytesseract.image_to_string(
            crop_image_1_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
        if result_1_unidades == "" or result_1_unidades[0] == str(4) \
                or result_1_unidades[0:2] == str(28) or result_1_unidades[0:2] == str(29) or result_1_unidades[0:1] == str(0):
            crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
            crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_unidades = pytesseract.image_to_string(
                crop_image_1_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_1_unidades[0:1] == str(0):
                crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340),
                                        (z + 850):(p + 402)]
                crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
                kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
                crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_1_unidades = pytesseract.image_to_string(
                    crop_image_1_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
        else:
            pass
        with open('abc.txt', mode='w') as file:
            file.write(result_1_unidades)
            texto_imprimir_unidades['text'] = result_1_unidades
        # Cliche_1
        crop_image_1_cliche = crop_image_1[(q + 660):(a + 1100), z:(p - 260)]
        crop_image_1_cliche = cv.cvtColor(crop_image_1_cliche, cv.COLOR_BGR2GRAY)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_cliche = pytesseract.image_to_string(
            crop_image_1_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_cliche)
            texto_imprimir_cliche['text'] = result_1_cliche
        # Tinta_1
        crop_image_1_tinta = crop_image_1[(q - 200):(a + 400), (z + 3530):(p + 3030)]
        crop_image_1_tinta = cv.fastNlMeansDenoisingColored(crop_image_1_tinta, None, 10, 10, 7, 21)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_tinta = cv.morphologyEx(crop_image_1_tinta, cv.MORPH_CLOSE, kernel_1)
        crop_image_1_tinta = cv.cvtColor(crop_image_1_tinta, cv.COLOR_BGR2GRAY)
        crop_image_1_tinta = cv.threshold(crop_image_1_tinta, 220, 255, cv.THRESH_BINARY)[1]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_tinta = pytesseract.image_to_string(
            crop_image_1_tinta,
            config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_tinta)
            texto_imprimir_tinta['text'] = result_1_tinta
        # n_cores_1
        crop_image_1_n_cores = crop_image_1[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
        crop_image_1_n_cores = cv.fastNlMeansDenoisingColored(crop_image_1_n_cores, None, 10, 10, 7, 21)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_n_cores = cv.morphologyEx(crop_image_1_n_cores, cv.MORPH_CLOSE, kernel_1)
        crop_image_1_n_cores = cv.cvtColor(crop_image_1_n_cores, cv.COLOR_BGR2GRAY)
        crop_image_1_n_cores = cv.threshold(crop_image_1_n_cores, 220, 255, cv.THRESH_BINARY)[1]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_n_cores = pytesseract.image_to_string(
            crop_image_1_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_n_cores)
            texto_imprimir_n_cores['text'] = result_1_n_cores
        # n_caixas_1
        crop_image_1_n_caixas = crop_image_1[(q + 270):(a + 200), (z + 80):(p - 570)]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_n_caixas = pytesseract.image_to_string(crop_image_1_n_caixas, config='--psm 6')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_n_caixas)
            texto_imprimir_n_caixas['text'] = result_1_n_caixas
        # tipo_clientes_1
        crop_image_1_tipo_clientes = crop_image_1[(q - 190):(a - 250), (z + 5980):(p + 5730)]
        crop_image_1_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_1_tipo_clientes, None, 10, 10, 7, 21)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_tipo_clientes = cv.morphologyEx(crop_image_1_tipo_clientes, cv.MORPH_CLOSE, kernel_1)
        crop_image_1_tipo_clientes = cv.cvtColor(crop_image_1_tipo_clientes, cv.COLOR_BGR2GRAY)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_tipo_clientes = pytesseract.image_to_string(
            crop_image_1_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_tipo_clientes)
            texto_imprimir_clientes['text'] = result_1_tipo_clientes
        # Servicos_1_1
        crop_image_1_servicos_1 = crop_image_1[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_servicos_1 = pytesseract.image_to_string(crop_image_1_servicos_1, config='--psm 6')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_servicos_1)
            texto_imprimir_servicos_1['text'] = result_1_servicos_1
        # Servicos_2_1
        crop_image_1_servicos_2 = crop_image_1[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_servicos_2 = pytesseract.image_to_string(crop_image_1_servicos_2, config='--oem 3')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_servicos_2)
            texto_imprimir_servicos_2['text'] = result_1_servicos_2
        # Caixas_1_1
        crop_image_1_caixas = crop_image_1[(q - 965):(a + 3000), (z + 550):(p - 20)]
        crop_image_1_caixas = cv.cvtColor(crop_image_1_caixas, cv.COLOR_BGR2GRAY)
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_caixas = cv.morphologyEx(crop_image_1_caixas, cv.MORPH_CLOSE, kernel_1)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_caixas = pytesseract.image_to_string(crop_image_1_caixas,
                                                      config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_caixas)
            texto_imprimir_1_caixas['text'] = result_1_caixas

        # Cor_1_1
        crop_image_1_1_cor = crop_image_1[(q - 230):(a - 260), (z + 6575):(p + 6225)]
        crop_image_1_1_cor = cv.fastNlMeansDenoisingColored(crop_image_1_1_cor, None, 10, 10, 7, 21)
        crop_image_1_1_cor = cv.cvtColor(crop_image_1_1_cor, cv.COLOR_BGR2GRAY)
        kernel_1_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_1_cor = cv.morphologyEx(crop_image_1_1_cor, cv.MORPH_CLOSE, kernel_1_1)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_1_cor = pytesseract.image_to_string(
            crop_image_1_1_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_1_cor)
            sheet.write('B13', result_1_1_cor)
        # Cor_2_1
        crop_image_1_2_cor = crop_image_1[(q + 90):(a + 60), (z + 6575):(p + 6225)]
        crop_image_1_2_cor = cv.fastNlMeansDenoisingColored(crop_image_1_2_cor, None, 10, 10, 7, 21)
        crop_image_1_2_cor = cv.cvtColor(crop_image_1_2_cor, cv.COLOR_BGR2GRAY)
        kernel_1_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_2_cor = cv.morphologyEx(crop_image_1_2_cor, cv.MORPH_CLOSE, kernel_1_2)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_2_cor = pytesseract.image_to_string(
            crop_image_1_2_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_2_cor)
            sheet.write('C13', result_1_2_cor)
        # Cor_3_1
        crop_image_1_3_cor = crop_image_1[(q + 400):(a + 380), (z + 6575):(p + 6225)]
        crop_image_1_3_cor = cv.fastNlMeansDenoisingColored(crop_image_1_3_cor, None, 10, 10, 7, 21)
        crop_image_1_3_cor = cv.cvtColor(crop_image_1_3_cor, cv.COLOR_BGR2GRAY)
        kernel_1_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_3_cor = cv.morphologyEx(crop_image_1_3_cor, cv.MORPH_CLOSE, kernel_1_3)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_3_cor = pytesseract.image_to_string(
            crop_image_1_3_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_3_cor)
            sheet.write('D13', result_1_3_cor)
        # Cor_4_1
        crop_image_1_4_cor = crop_image_1[(q + 740):(a + 690), (z + 6585):(p + 6215)]
        crop_image_1_4_cor = cv.fastNlMeansDenoisingColored(crop_image_1_4_cor, None, 10, 10, 7, 21)
        crop_image_1_4_cor = cv.cvtColor(crop_image_1_4_cor, cv.COLOR_BGR2GRAY)
        kernel_1_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_4_cor = cv.morphologyEx(crop_image_1_4_cor, cv.MORPH_CLOSE, kernel_1_4)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_4_cor = pytesseract.image_to_string(
            crop_image_1_4_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_4_cor)
            sheet.write('E13', result_1_4_cor)
        # Cor_5_1
        crop_image_1_5_cor = crop_image_1[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
        crop_image_1_5_cor = cv.fastNlMeansDenoisingColored(crop_image_1_5_cor, None, 10, 10, 7, 21)
        crop_image_1_5_cor = cv.cvtColor(crop_image_1_5_cor, cv.COLOR_BGR2GRAY)
        kernel_1_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_5_cor = cv.morphologyEx(crop_image_1_5_cor, cv.MORPH_CLOSE, kernel_1_5)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_5_cor = pytesseract.image_to_string(
            crop_image_1_5_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_5_cor)
            sheet.write('F13', result_1_5_cor)
        # Cor_6_1
        crop_image_1_6_cor = crop_image_1[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
        crop_image_1_6_cor = cv.fastNlMeansDenoisingColored(crop_image_1_6_cor, None, 10, 10, 7, 21)
        crop_image_1_6_cor = cv.cvtColor(crop_image_1_6_cor, cv.COLOR_BGR2GRAY)
        kernel_1_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_6_cor = cv.morphologyEx(crop_image_1_6_cor, cv.MORPH_CLOSE, kernel_1_6)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_6_cor = pytesseract.image_to_string(
            crop_image_1_6_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_6_cor)
            sheet.write('G13', result_1_6_cor)
        # Cor_fabricada_1
        crop_image_1_fabricada_cor = crop_image_1[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
        crop_image_1_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_1_fabricada_cor, None, 10, 10, 7, 21)
        crop_image_1_fabricada_cor = cv.cvtColor(crop_image_1_fabricada_cor, cv.COLOR_BGR2GRAY)
        kernel_1_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_fabricada_cor = cv.morphologyEx(crop_image_1_fabricada_cor, cv.MORPH_CLOSE, kernel_1_7)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_fabricada_cor = pytesseract.image_to_string(
            crop_image_1_fabricada_cor, config='custom_config --psm 8')
        with open('abc.txt', mode='w') as file:
            file.write(result_fabricada_cor)
            sheet.write('H13', result_fabricada_cor)
        # Total_1
        crop_image_1_total = crop_image_1[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
        crop_image_1_total = cv.cvtColor(crop_image_1_total, cv.COLOR_BGR2GRAY)
        crop_image_1_total = cv.threshold(crop_image_1_total, 220, 255, cv.THRESH_BINARY)[1]
        kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
        crop_image_1_total = cv.morphologyEx(crop_image_1_total, cv.MORPH_CLOSE, kernel_1)
        pytesseract.pytesseract.tesseract_cmd = Path(j)
        result_1_total = pytesseract.image_to_string(crop_image_1_total, config='--psm 6')
        with open('abc.txt', mode='w') as file:
            file.write(result_1_total)
            texto_imprimir_total['text'] = result_1_total
            if result_1_total[0:1] == str(9):
                crop_image_1_total = crop_image_1[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                crop_image_1_total = cv.cvtColor(crop_image_1_total, cv.COLOR_BGR2GRAY)
                kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_1_total = cv.morphologyEx(crop_image_1_total, cv.MORPH_CLOSE, kernel_1)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_1_total = pytesseract.image_to_string(crop_image_1_total, config='--psm 6')
                with open('abc.txt', mode='w') as file:
                    file.write(result_1_total)
                    texto_imprimir_total['text'] = result_1_total
        pass
# Comand do botão "ABRIR EXCEL" Tkinter


def botao_executar():
    if cb_tipos_artigo.get() == '42':
        # Preço de compra para o Excel
        # Alterar todos
        # caixas_qtd
        texto_preco_caixas_qtd = preco_caixas_qtd.get()
        sheet.write('A55', texto_preco_caixas_qtd)
        # folhas_qtd
        texto_preco_folhas_qtd = preco_folhas_qtd.get()
        sheet.write('A56', texto_preco_folhas_qtd)
        # paletes_qtd
        texto_preco_paletes_qtd = preco_paletes_qtd.get()
        sheet.write('A57', texto_preco_paletes_qtd)
        # portes_qtd
        texto_preco_portes_qtd = preco_portes_qtd.get()
        sheet.write('A58', texto_preco_portes_qtd)
        # caixas_p1
        texto_preco_caixas_p1 = preco_caixas_p1.get()
        sheet.write('A59', texto_preco_caixas_p1)
        # folhas_qtd
        texto_preco_folhas_p1 = preco_folhas_p1.get()
        sheet.write('A60', texto_preco_folhas_p1)
        # paletes_qtd
        texto_preco_paletes_p1 = preco_paletes_p1.get()
        sheet.write('A61', texto_preco_paletes_p1)
        # portes_qtd
        texto_preco_portes_p1 = preco_portes_p1.get()
        sheet.write('A62', texto_preco_portes_p1)
        # Preços de Compra:
        texto_precocompra = preco_compra.get()
        sheet.write('A36', texto_precocompra)
        # Espessuras
        texto_espessura = espessura.get()
        sheet.write('A37', texto_espessura)
        # Cor 1
        texto_cores_impressao_1 = cb_cores_impressao_1.get()
        sheet.write('A15', texto_cores_impressao_1)
        # Cor 2
        texto_cores_impressao_2 = cb_cores_impressao_2.get()
        sheet.write('A16', texto_cores_impressao_2)
        # Cor 3
        texto_cores_impressao_3 = cb_cores_impressao_3.get()
        sheet.write('A17', texto_cores_impressao_3)
        # Cor 4
        texto_cores_impressao_4 = cb_cores_impressao_4.get()
        sheet.write('A18', texto_cores_impressao_4)
        # Cor 5
        texto_cores_impressao_5 = cb_cores_impressao_5.get()
        sheet.write('A19', texto_cores_impressao_5)
        # Cor 6
        texto_cores_impressao_6 = cb_cores_impressao_6.get()
        sheet.write('A20', texto_cores_impressao_6)
        # Cor 7
        texto_cores_impressao_7 = cb_cores_impressao_7.get()
        sheet.write('A21', texto_cores_impressao_7)
        novo_y_1 = int(num_novos_y)
        if 1 <= numero_quadros:
            crop_image_1 = img1[0:novo_y_1]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_1
            crop_image_1_dimensoes = crop_image_1[q + 60:a - 20, z:p]
            crop_image_1_dimensoes = cv.cvtColor(crop_image_1_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_dimensoes = pytesseract.image_to_string(crop_image_1_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A1', result_1_dimensoes)
            # Unidades_1
            crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
            crop_image_1_unidades = cv.threshold(crop_image_1_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_unidades = pytesseract.image_to_string(
                crop_image_1_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_1_unidades == "" or result_1_unidades[0] == str(4) \
                    or result_1_unidades[0:2] == str(28) or result_1_unidades[0:2] == str(29) or result_1_unidades[0:1] == str(0):
                crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
                kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
                crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_1_unidades = pytesseract.image_to_string(
                    crop_image_1_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_1_unidades[0:1] == str(0):
                    crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
                    kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
                    crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_1_unidades = pytesseract.image_to_string(
                        crop_image_1_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_1_unidades)
                sheet.write('A2', result_1_unidades)
            # cliche_1
            crop_image_1_cliche = crop_image_1[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_1_cliche = cv.cvtColor(crop_image_1_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_cliche = pytesseract.image_to_string(
                crop_image_1_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_cliche)
                sheet.write('A3', result_1_cliche)
            # Tinta_1
            crop_image_1_tinta = crop_image_1[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_1_tinta = cv.fastNlMeansDenoisingColored(crop_image_1_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_tinta = cv.morphologyEx(crop_image_1_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_tinta = cv.cvtColor(crop_image_1_tinta, cv.COLOR_BGR2GRAY)
            crop_image_1_tinta = cv.threshold(crop_image_1_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_tinta = pytesseract.image_to_string(
                crop_image_1_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_tinta)
                sheet.write('A4', result_1_tinta)
            # n_cores_1
            crop_image_1_n_cores = crop_image_1[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_1_n_cores = cv.fastNlMeansDenoisingColored(crop_image_1_n_cores, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_n_cores = cv.morphologyEx(crop_image_1_n_cores, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_n_cores = cv.cvtColor(crop_image_1_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_1_n_cores = cv.threshold(crop_image_1_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_n_cores = pytesseract.image_to_string(
                crop_image_1_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_n_cores)
                sheet.write('A5', result_1_n_cores)
            # n_caixas_1
            crop_image_1_n_caixas = crop_image_1[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_n_caixas = pytesseract.image_to_string(crop_image_1_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_n_caixas)
                sheet.write('A6', result_1_n_caixas)
            # tipo_clientes_1
            crop_image_1_tipo_clientes = crop_image_1[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_1_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_1_tipo_clientes, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_tipo_clientes = cv.morphologyEx(crop_image_1_tipo_clientes, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_tipo_clientes = cv.cvtColor(crop_image_1_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_tipo_clientes = pytesseract.image_to_string(
                crop_image_1_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_tipo_clientes)
                sheet.write('A7', result_1_tipo_clientes)
            # Servicos_1
            crop_image_1_servicos_1 = crop_image_1[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_servicos_1 = pytesseract.image_to_string(crop_image_1_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_servicos_1)
                sheet.write('A8', result_1_servicos_1)
            # Servicos_2_1
            crop_image_1_servicos_2 = crop_image_1[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_servicos_2 = pytesseract.image_to_string(crop_image_1_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_servicos_2)
                sheet.write('A9', result_1_servicos_2)
            # Caixas_1_1
            crop_image_1_caixas = crop_image_1[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_1_caixas = cv.cvtColor(crop_image_1_caixas, cv.COLOR_BGR2GRAY)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_caixas = cv.morphologyEx(crop_image_1_caixas, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_caixas = pytesseract.image_to_string(crop_image_1_caixas,
                                                          config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_caixas)
                sheet.write('A10', result_1_caixas)
            # Total_1
            crop_image_1_total = crop_image_1[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_1_total = cv.cvtColor(crop_image_1_total, cv.COLOR_BGR2GRAY)
            crop_image_1_total = cv.threshold(crop_image_1_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_total = cv.morphologyEx(crop_image_1_total, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_total = pytesseract.image_to_string(crop_image_1_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_total)
                sheet.write('A11', result_1_total)
                if result_1_total[0:1] == str(9):
                    crop_image_1_total = crop_image_1[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_1_total = cv.cvtColor(crop_image_1_total, cv.COLOR_BGR2GRAY)
                    kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_1_total = cv.morphologyEx(crop_image_1_total, cv.MORPH_CLOSE, kernel_1)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_1_total = pytesseract.image_to_string(crop_image_1_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_1_total)
                        sheet.write('A11', result_1_total)
            # Espessura_1
            crop_image_1_espessura = crop_image_1[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_espessura = pytesseract.image_to_string(crop_image_1_espessura, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_espessura)
                sheet.write('A12', result_1_espessura)
            # Cor_1_1
            crop_image_1_1_cor = crop_image_1[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_1_1_cor = cv.fastNlMeansDenoisingColored(crop_image_1_1_cor, None, 10, 10, 7, 21)
            crop_image_1_1_cor = cv.cvtColor(crop_image_1_1_cor, cv.COLOR_BGR2GRAY)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_1_cor = cv.morphologyEx(crop_image_1_1_cor, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_1_cor = pytesseract.image_to_string(
                crop_image_1_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_1_cor)
                sheet.write('B13', result_1_1_cor)
            # Cor_2_1
            crop_image_1_2_cor = crop_image_1[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_1_2_cor = cv.fastNlMeansDenoisingColored(crop_image_1_2_cor, None, 10, 10, 7, 21)
            crop_image_1_2_cor = cv.cvtColor(crop_image_1_2_cor, cv.COLOR_BGR2GRAY)
            kernel_1_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_2_cor = cv.morphologyEx(crop_image_1_2_cor, cv.MORPH_CLOSE, kernel_1_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_2_cor = pytesseract.image_to_string(
                crop_image_1_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_2_cor)
                sheet.write('C13', result_1_2_cor)
            # Cor_3_1
            crop_image_1_3_cor = crop_image_1[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_1_3_cor = cv.fastNlMeansDenoisingColored(crop_image_1_3_cor, None, 10, 10, 7, 21)
            crop_image_1_3_cor = cv.cvtColor(crop_image_1_3_cor, cv.COLOR_BGR2GRAY)
            kernel_1_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_3_cor = cv.morphologyEx(crop_image_1_3_cor, cv.MORPH_CLOSE, kernel_1_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_3_cor = pytesseract.image_to_string(
                crop_image_1_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_3_cor)
                sheet.write('D13', result_1_3_cor)
            # Cor_4_1
            crop_image_1_4_cor = crop_image_1[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_1_4_cor = cv.fastNlMeansDenoisingColored(crop_image_1_4_cor, None, 10, 10, 7, 21)
            crop_image_1_4_cor = cv.cvtColor(crop_image_1_4_cor, cv.COLOR_BGR2GRAY)
            kernel_1_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_4_cor = cv.morphologyEx(crop_image_1_4_cor, cv.MORPH_CLOSE, kernel_1_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_4_cor = pytesseract.image_to_string(
                crop_image_1_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_4_cor)
                sheet.write('E13', result_1_4_cor)
            # Cor_5_1
            crop_image_1_5_cor = crop_image_1[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_1_5_cor = cv.fastNlMeansDenoisingColored(crop_image_1_5_cor, None, 10, 10, 7, 21)
            crop_image_1_5_cor = cv.cvtColor(crop_image_1_5_cor, cv.COLOR_BGR2GRAY)
            kernel_1_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_5_cor = cv.morphologyEx(crop_image_1_5_cor, cv.MORPH_CLOSE, kernel_1_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_5_cor = pytesseract.image_to_string(
                crop_image_1_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_5_cor)
                sheet.write('F13', result_1_5_cor)
            # Cor_6_1
            crop_image_1_6_cor = crop_image_1[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_1_6_cor = cv.fastNlMeansDenoisingColored(crop_image_1_6_cor, None, 10, 10, 7, 21)
            crop_image_1_6_cor = cv.cvtColor(crop_image_1_6_cor, cv.COLOR_BGR2GRAY)
            kernel_1_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_6_cor = cv.morphologyEx(crop_image_1_6_cor, cv.MORPH_CLOSE, kernel_1_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_6_cor = pytesseract.image_to_string(
                crop_image_1_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_6_cor)
                sheet.write('G13', result_1_6_cor)
            # Cor_fabricada_1
            crop_image_fabricada_cor = crop_image_1[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_fabricada_cor = cv.cvtColor(crop_image_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_1_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_fabricada_cor = cv.morphologyEx(crop_image_fabricada_cor, cv.MORPH_CLOSE, kernel_1_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H13', result_fabricada_cor)

        if 2 <= numero_quadros:
            crop_image_2 = img1[novo_y_1:novo_y_1*2]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_2
            crop_image_2_dimensoes = crop_image_2[q + 60:a - 20, z:p]
            crop_image_2_dimensoes = cv.cvtColor(crop_image_2_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_dimensoes = pytesseract.image_to_string(crop_image_2_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_dimensoes)
                sheet.write('A22', result_2_dimensoes)
            # Unidades_2
            crop_image_2_unidades = crop_image_2[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_2_unidades = cv.fastNlMeansDenoisingColored(crop_image_2_unidades, None, 10, 10, 7, 21)
            kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_unidades = cv.morphologyEx(crop_image_2_unidades, cv.MORPH_CLOSE, kernel_2)
            crop_image_2_unidades = cv.cvtColor(crop_image_2_unidades, cv.COLOR_BGR2GRAY)
            crop_image_2_unidades = cv.threshold(crop_image_2_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_unidades = pytesseract.image_to_string(
                crop_image_2_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_2_unidades == "" or result_2_unidades[0] == str(4) \
                    or result_2_unidades[0:2] == str(28) or result_2_unidades[0:2] == str(29) or result_2_unidades[0:1] == str(0):
                crop_image_2_unidades = crop_image_2[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_2_unidades = cv.fastNlMeansDenoisingColored(crop_image_2_unidades, None, 10, 10, 7, 21)
                kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_2_unidades = cv.morphologyEx(crop_image_2_unidades, cv.MORPH_CLOSE, kernel_2)
                crop_image_2_unidades = cv.cvtColor(crop_image_2_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_2_unidades = pytesseract.image_to_string(
                    crop_image_2_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_2_unidades[0:1] == str(0):
                    crop_image_2_unidades = crop_image_2[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_2_unidades = cv.fastNlMeansDenoisingColored(crop_image_2_unidades, None, 10, 10, 7, 21)
                    kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_2_unidades = cv.morphologyEx(crop_image_2_unidades, cv.MORPH_CLOSE, kernel_2)
                    crop_image_2_unidades = cv.cvtColor(crop_image_2_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_2_unidades = pytesseract.image_to_string(
                        crop_image_2_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_2_unidades)
                sheet.write('A23', result_2_unidades)
            # cliche_2
            crop_image_2_cliche = crop_image_2[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_2_cliche = cv.cvtColor(crop_image_2_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_cliche = pytesseract.image_to_string(
                crop_image_2_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_cliche)
                sheet.write('A24', result_2_cliche)
            # Tinta_2
            crop_image_2_tinta = crop_image_2[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_2_tinta = cv.fastNlMeansDenoisingColored(crop_image_2_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_tinta = cv.morphologyEx(crop_image_2_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_2_tinta = cv.cvtColor(crop_image_2_tinta, cv.COLOR_BGR2GRAY)
            crop_image_2_tinta = cv.threshold(crop_image_2_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_tinta = pytesseract.image_to_string(
                crop_image_2_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_tinta)
                sheet.write('A25', result_2_tinta)
            # n_cores_2
            crop_image_2_n_cores = crop_image_2[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_2_n_cores = cv.fastNlMeansDenoisingColored(crop_image_2_n_cores, None, 10, 10, 7, 21)
            kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_n_cores = cv.morphologyEx(crop_image_2_n_cores, cv.MORPH_CLOSE, kernel_2)
            crop_image_2_n_cores = cv.cvtColor(crop_image_2_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_2_n_cores = cv.threshold(crop_image_2_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_n_cores = pytesseract.image_to_string(
                crop_image_2_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_n_cores)
                sheet.write('A26', result_2_n_cores)
            # n_caixas_2
            crop_image_2_n_caixas = crop_image_2[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_n_caixas = pytesseract.image_to_string(crop_image_2_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_n_caixas)
                sheet.write('A27', result_2_n_caixas)
            # tipo_clientes_2
            crop_image_2_tipo_clientes = crop_image_2[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_2_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_2_tipo_clientes, None, 10, 10, 7, 21)
            kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_tipo_clientes = cv.morphologyEx(crop_image_2_tipo_clientes, cv.MORPH_CLOSE, kernel_2)
            crop_image_2_tipo_clientes = cv.cvtColor(crop_image_2_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_tipo_clientes = pytesseract.image_to_string(
                crop_image_2_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_tipo_clientes)
                sheet.write('A28', result_2_tipo_clientes)
            # Servicos_1_2
            crop_image_2_servicos_1 = crop_image_2[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_servicos_1 = pytesseract.image_to_string(crop_image_2_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_servicos_1)
                sheet.write('A29', result_2_servicos_1)
            # Servicos_2
            crop_image_2_servicos_1 = crop_image_2[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_servicos_1 = pytesseract.image_to_string(crop_image_2_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_servicos_1)
                sheet.write('A30', result_2_servicos_1)
            # Caixas_1_2
            crop_image_2_caixas = crop_image_2[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_2_caixas = cv.cvtColor(crop_image_2_caixas, cv.COLOR_BGR2GRAY)
            kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_caixas = cv.morphologyEx(crop_image_2_caixas, cv.MORPH_CLOSE, kernel_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_caixas = pytesseract.image_to_string(crop_image_2_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_caixas)
                sheet.write('A31', result_2_caixas)
            # Total_2
            crop_image_2_total = crop_image_2[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_2_total = cv.cvtColor(crop_image_2_total, cv.COLOR_BGR2GRAY)
            crop_image_2_total = cv.threshold(crop_image_2_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_total = cv.morphologyEx(crop_image_2_total, cv.MORPH_CLOSE, kernel_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_total = pytesseract.image_to_string(crop_image_2_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_total)
                sheet.write('A32', result_2_total)
                if result_2_total[0:1] == str(9):
                    crop_image_2_total = crop_image_2[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_2_total = cv.cvtColor(crop_image_2_total, cv.COLOR_BGR2GRAY)
                    kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_2_total = cv.morphologyEx(crop_image_2_total, cv.MORPH_CLOSE, kernel_2)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_2_total = pytesseract.image_to_string(crop_image_2_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_2_total)
                        sheet.write('A32', result_2_total)
            # Espessura_2
            crop_image_2_espessura = crop_image_2[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_espessura = pytesseract.image_to_string(crop_image_2_espessura, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_espessura)
                sheet.write('A33', result_2_espessura)
            # Cor_1_2
            crop_image_2_1_cor = crop_image_2[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_2_1_cor = cv.fastNlMeansDenoisingColored(crop_image_2_1_cor, None, 10, 10, 7, 21)
            crop_image_2_1_cor = cv.cvtColor(crop_image_2_1_cor, cv.COLOR_BGR2GRAY)
            kernel_2_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_1_cor = cv.morphologyEx(crop_image_2_1_cor, cv.MORPH_CLOSE, kernel_2_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_1_cor = pytesseract.image_to_string(
                crop_image_2_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_1_cor)
                sheet.write('B34', result_2_1_cor)
            # Cor_2_2
            crop_image_2_2_cor = crop_image_2[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_2_2_cor = cv.fastNlMeansDenoisingColored(crop_image_2_2_cor, None, 10, 10, 7, 21)
            crop_image_2_2_cor = cv.cvtColor(crop_image_2_2_cor, cv.COLOR_BGR2GRAY)
            kernel_2_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_2_cor = cv.morphologyEx(crop_image_2_2_cor, cv.MORPH_CLOSE, kernel_2_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_2_cor = pytesseract.image_to_string(
                crop_image_2_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_2_cor)
                sheet.write('C34', result_2_2_cor)
            # Cor_3_2
            crop_image_2_3_cor = crop_image_2[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_2_3_cor = cv.fastNlMeansDenoisingColored(crop_image_2_3_cor, None, 10, 10, 7, 21)
            crop_image_2_3_cor = cv.cvtColor(crop_image_2_3_cor, cv.COLOR_BGR2GRAY)
            kernel_2_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_3_cor = cv.morphologyEx(crop_image_2_3_cor, cv.MORPH_CLOSE, kernel_2_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_3_cor = pytesseract.image_to_string(
                crop_image_2_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_3_cor)
                sheet.write('D34', result_2_3_cor)
            # Cor_4_2
            crop_image_2_4_cor = crop_image_2[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_2_4_cor = cv.fastNlMeansDenoisingColored(crop_image_2_4_cor, None, 10, 10, 7, 21)
            crop_image_2_4_cor = cv.cvtColor(crop_image_2_4_cor, cv.COLOR_BGR2GRAY)
            kernel_2_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_4_cor = cv.morphologyEx(crop_image_2_4_cor, cv.MORPH_CLOSE, kernel_2_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_4_cor = pytesseract.image_to_string(
                crop_image_2_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_4_cor)
                sheet.write('E34', result_2_4_cor)
            # Cor_5_2
            crop_image_2_5_cor = crop_image_2[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_2_5_cor = cv.fastNlMeansDenoisingColored(crop_image_2_5_cor, None, 10, 10, 7, 21)
            crop_image_2_5_cor = cv.cvtColor(crop_image_2_5_cor, cv.COLOR_BGR2GRAY)
            kernel_2_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_5_cor = cv.morphologyEx(crop_image_2_5_cor, cv.MORPH_CLOSE, kernel_2_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_5_cor = pytesseract.image_to_string(
                crop_image_2_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_5_cor)
                sheet.write('F34', result_2_5_cor)
            # Cor_6_2
            crop_image_2_6_cor = crop_image_2[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_2_6_cor = cv.fastNlMeansDenoisingColored(crop_image_2_6_cor, None, 10, 10, 7, 21)
            crop_image_2_6_cor = cv.cvtColor(crop_image_2_6_cor, cv.COLOR_BGR2GRAY)
            kernel_2_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_6_cor = cv.morphologyEx(crop_image_2_6_cor, cv.MORPH_CLOSE, kernel_2_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_6_cor = pytesseract.image_to_string(
                crop_image_2_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_6_cor)
                sheet.write('G34', result_2_6_cor)
            # Cor_fabricada_2
            crop_image_2_fabricada_cor = crop_image_2[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_2_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_2_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_2_fabricada_cor = cv.cvtColor(crop_image_2_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_2_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_fabricada_cor = cv.morphologyEx(crop_image_2_fabricada_cor, cv.MORPH_CLOSE, kernel_2_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_2_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H34', result_fabricada_cor)
        if 3 <= numero_quadros:
            crop_image_3 = img1[novo_y_1 * 2:novo_y_1 * 3]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_3
            crop_image_3_dimensoes = crop_image_3[q + 60:a - 20, z:p]
            crop_image_3_dimensoes = cv.cvtColor(crop_image_3_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_dimensoes = pytesseract.image_to_string(crop_image_3_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_dimensoes)
                sheet.write('A43', result_3_dimensoes)
            # Unidades_3
            crop_image_3_unidades = crop_image_3[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_3_unidades = cv.fastNlMeansDenoisingColored(crop_image_3_unidades, None, 10, 10, 7, 21)
            kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_unidades = cv.morphologyEx(crop_image_3_unidades, cv.MORPH_CLOSE, kernel_3)
            crop_image_3_unidades = cv.cvtColor(crop_image_3_unidades, cv.COLOR_BGR2GRAY)
            crop_image_3_unidades = cv.threshold(crop_image_3_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_unidades = pytesseract.image_to_string(
                crop_image_3_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_3_unidades == "" or result_3_unidades[0] == str(4) \
                    or result_3_unidades[0:2] == str(28) or result_3_unidades[0:2] == str(29) or result_3_unidades[0:1] == str(0):
                crop_image_3_unidades = crop_image_3[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_3_unidades = cv.fastNlMeansDenoisingColored(crop_image_3_unidades, None, 10, 10, 7, 21)
                kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_3_unidades = cv.morphologyEx(crop_image_3_unidades, cv.MORPH_CLOSE, kernel_3)
                crop_image_3_unidades = cv.cvtColor(crop_image_3_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_3_unidades = pytesseract.image_to_string(
                    crop_image_3_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_3_unidades[0:1] == str(0):
                    crop_image_3_unidades = crop_image_3[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_3_unidades = cv.fastNlMeansDenoisingColored(crop_image_3_unidades, None, 10, 10, 7, 21)
                    kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_3_unidades = cv.morphologyEx(crop_image_3_unidades, cv.MORPH_CLOSE, kernel_3)
                    crop_image_3_unidades = cv.cvtColor(crop_image_3_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_3_unidades = pytesseract.image_to_string(
                        crop_image_3_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_3_unidades)
                sheet.write('A44', result_3_unidades)
            # cliche_3
            crop_image_3_cliche = crop_image_3[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_3_cliche = cv.cvtColor(crop_image_3_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_cliche = pytesseract.image_to_string(
                crop_image_3_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_cliche)
                sheet.write('A45', result_3_cliche)
            # Tinta_3
            crop_image_3_tinta = crop_image_3[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_3_tinta = cv.fastNlMeansDenoisingColored(crop_image_3_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_tinta = cv.morphologyEx(crop_image_3_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_3_tinta = cv.cvtColor(crop_image_3_tinta, cv.COLOR_BGR2GRAY)
            crop_image_3_tinta = cv.threshold(crop_image_3_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_tinta = pytesseract.image_to_string(
                crop_image_3_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_tinta)
                sheet.write('A46', result_3_tinta)
            # n_cores_3
            crop_image_3_n_cores = crop_image_3[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_3_n_cores = cv.fastNlMeansDenoisingColored(crop_image_3_n_cores, None, 10, 10, 7, 21)
            kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_n_cores = cv.morphologyEx(crop_image_3_n_cores, cv.MORPH_CLOSE, kernel_3)
            crop_image_3_n_cores = cv.cvtColor(crop_image_3_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_3_n_cores = cv.threshold(crop_image_3_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_n_cores = pytesseract.image_to_string(
                crop_image_3_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_n_cores)
                sheet.write('A47', result_3_n_cores)
            # n_caixas_3
            crop_image_3_n_caixas = crop_image_3[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_n_caixas = pytesseract.image_to_string(crop_image_3_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_n_caixas)
                sheet.write('A48', result_3_n_caixas)
            # tipo_clientes_3
            crop_image_3_tipo_clientes = crop_image_3[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_3_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_3_tipo_clientes, None, 10, 10, 7, 21)
            kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_tipo_clientes = cv.morphologyEx(crop_image_3_tipo_clientes, cv.MORPH_CLOSE, kernel_3)
            crop_image_3_tipo_clientes = cv.cvtColor(crop_image_3_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_tipo_clientes = pytesseract.image_to_string(
                crop_image_3_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_tipo_clientes)
                sheet.write('A49', result_3_tipo_clientes)
            # Servicos_3
            crop_image_3_servicos_1 = crop_image_3[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_servicos_1 = pytesseract.image_to_string(crop_image_3_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_servicos_1)
                sheet.write('A50', result_3_servicos_1)
            # Servicos_2_3
            crop_image_3_servicos_2 = crop_image_3[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_servicos_2 = pytesseract.image_to_string(crop_image_3_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_servicos_2)
                sheet.write('A51', result_3_servicos_2)
            # Caixas_1_3
            crop_image_3_caixas = crop_image_3[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_3_caixas = cv.cvtColor(crop_image_3_caixas, cv.COLOR_BGR2GRAY)
            kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_caixas = cv.morphologyEx(crop_image_3_caixas, cv.MORPH_CLOSE, kernel_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_caixas = pytesseract.image_to_string(crop_image_3_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_caixas)
                sheet.write('A52', result_3_caixas)
            # Total_3
            crop_image_3_total = crop_image_3[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_3_total = cv.cvtColor(crop_image_3_total, cv.COLOR_BGR2GRAY)
            crop_image_3_total = cv.threshold(crop_image_3_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_total = cv.morphologyEx(crop_image_3_total, cv.MORPH_CLOSE, kernel_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_total = pytesseract.image_to_string(crop_image_3_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_total)
                sheet.write('A53', result_3_total)
                if result_3_total[0:1] == str(9):
                    crop_image_3_total = crop_image_3[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_3_total = cv.cvtColor(crop_image_3_total, cv.COLOR_BGR2GRAY)
                    kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_3_total = cv.morphologyEx(crop_image_3_total, cv.MORPH_CLOSE, kernel_3)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_3_total = pytesseract.image_to_string(crop_image_3_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_3_total)
                        sheet.write('A53', result_3_total)
            # Espessura_3
            crop_image_3_espessura = crop_image_3[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_espessura = pytesseract.image_to_string(crop_image_3_espessura,
                                                             config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_espessura)
                sheet.write('A54', result_3_espessura)
            # Cor_1_3
            crop_image_3_1_cor = crop_image_3[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_3_1_cor = cv.fastNlMeansDenoisingColored(crop_image_3_1_cor, None, 10, 10, 7, 21)
            crop_image_3_1_cor = cv.cvtColor(crop_image_3_1_cor, cv.COLOR_BGR2GRAY)
            kernel_3_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_1_cor = cv.morphologyEx(crop_image_3_1_cor, cv.MORPH_CLOSE, kernel_3_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_1_cor = pytesseract.image_to_string(
                crop_image_3_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_1_cor)
                sheet.write('B55', result_3_1_cor)
            # Cor_2_3
            crop_image_3_2_cor = crop_image_3[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_3_2_cor = cv.fastNlMeansDenoisingColored(crop_image_3_2_cor, None, 10, 10, 7, 21)
            crop_image_3_2_cor = cv.cvtColor(crop_image_3_2_cor, cv.COLOR_BGR2GRAY)
            kernel_3_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_2_cor = cv.morphologyEx(crop_image_3_2_cor, cv.MORPH_CLOSE, kernel_3_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_2_cor = pytesseract.image_to_string(
                crop_image_3_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_2_cor)
                sheet.write('C55', result_3_2_cor)
            # Cor_3_3
            crop_image_3_3_cor = crop_image_3[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_3_3_cor = cv.fastNlMeansDenoisingColored(crop_image_3_3_cor, None, 10, 10, 7, 21)
            crop_image_3_3_cor = cv.cvtColor(crop_image_3_3_cor, cv.COLOR_BGR2GRAY)
            kernel_3_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_3_cor = cv.morphologyEx(crop_image_3_3_cor, cv.MORPH_CLOSE, kernel_3_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_3_cor = pytesseract.image_to_string(
                crop_image_3_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_3_cor)
                sheet.write('D55', result_3_3_cor)
            # Cor_4_3
            crop_image_3_4_cor = crop_image_3[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_3_4_cor = cv.fastNlMeansDenoisingColored(crop_image_3_4_cor, None, 10, 10, 7, 21)
            crop_image_3_4_cor = cv.cvtColor(crop_image_3_4_cor, cv.COLOR_BGR2GRAY)
            kernel_3_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_4_cor = cv.morphologyEx(crop_image_3_4_cor, cv.MORPH_CLOSE, kernel_3_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_4_cor = pytesseract.image_to_string(
                crop_image_3_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_4_cor)
                sheet.write('E55', result_3_4_cor)
            # Cor_5_3
            crop_image_3_5_cor = crop_image_3[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_3_5_cor = cv.fastNlMeansDenoisingColored(crop_image_3_5_cor, None, 10, 10, 7, 21)
            crop_image_3_5_cor = cv.cvtColor(crop_image_3_5_cor, cv.COLOR_BGR2GRAY)
            kernel_3_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_5_cor = cv.morphologyEx(crop_image_3_5_cor, cv.MORPH_CLOSE, kernel_3_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_5_cor = pytesseract.image_to_string(
                crop_image_3_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_5_cor)
                sheet.write('F55', result_3_5_cor)
            # Cor_6_3
            crop_image_3_6_cor = crop_image_3[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_3_6_cor = cv.fastNlMeansDenoisingColored(crop_image_3_6_cor, None, 10, 10, 7, 21)
            crop_image_3_6_cor = cv.cvtColor(crop_image_3_6_cor, cv.COLOR_BGR2GRAY)
            kernel_3_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_6_cor = cv.morphologyEx(crop_image_3_6_cor, cv.MORPH_CLOSE, kernel_3_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_6_cor = pytesseract.image_to_string(
                crop_image_3_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_6_cor)
                sheet.write('G55', result_3_6_cor)
            # Cor_fabricada_3
            crop_image_3_fabricada_cor = crop_image_3[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_3_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_3_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_3_fabricada_cor = cv.cvtColor(crop_image_3_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_3_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_fabricada_cor = cv.morphologyEx(crop_image_3_fabricada_cor, cv.MORPH_CLOSE, kernel_3_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_3_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H55', result_fabricada_cor)
        if 4 <= numero_quadros:
            crop_image_4 = img1[novo_y_1 * 3:novo_y_1 * 4]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_4
            crop_image_4_dimensoes = crop_image_4[q + 60:a - 20, z:p]
            crop_image_4_dimensoes = cv.cvtColor(crop_image_4_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_dimensoes = pytesseract.image_to_string(crop_image_4_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_dimensoes)
                sheet.write('A64', result_4_dimensoes)
            # Unidades_4
            crop_image_4_unidades = crop_image_4[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_4_unidades = cv.fastNlMeansDenoisingColored(crop_image_4_unidades, None, 10, 10, 7, 21)
            kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_unidades = cv.morphologyEx(crop_image_4_unidades, cv.MORPH_CLOSE, kernel_4)
            crop_image_4_unidades = cv.cvtColor(crop_image_4_unidades, cv.COLOR_BGR2GRAY)
            crop_image_4_unidades = cv.threshold(crop_image_4_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_unidades = pytesseract.image_to_string(
                crop_image_4_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_4_unidades == "" or result_4_unidades[0] == str(4) \
                    or result_4_unidades[0:2] == str(28) or result_4_unidades[0:2] == str(29) or result_4_unidades[0:1] == str(0):
                crop_image_4_unidades = crop_image_4[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_4_unidades = cv.fastNlMeansDenoisingColored(crop_image_4_unidades, None, 10, 10, 7, 21)
                kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_4_unidades = cv.morphologyEx(crop_image_4_unidades, cv.MORPH_CLOSE, kernel_4)
                crop_image_4_unidades = cv.cvtColor(crop_image_4_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_4_unidades = pytesseract.image_to_string(
                    crop_image_4_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_4_unidades[0:1] == str(0):
                    crop_image_4_unidades = crop_image_4[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_4_unidades = cv.fastNlMeansDenoisingColored(crop_image_4_unidades, None, 10, 10, 7, 21)
                    kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_4_unidades = cv.morphologyEx(crop_image_4_unidades, cv.MORPH_CLOSE, kernel_4)
                    crop_image_4_unidades = cv.cvtColor(crop_image_4_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_4_unidades = pytesseract.image_to_string(
                        crop_image_4_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_4_unidades)
                sheet.write('A65', result_4_unidades)
            # cliche_4
            crop_image_4_cliche = crop_image_4[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_4_cliche = cv.cvtColor(crop_image_4_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_cliche = pytesseract.image_to_string(
                crop_image_4_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_cliche)
                sheet.write('A66', result_4_cliche)
            # Tinta_4
            crop_image_4_tinta = crop_image_4[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_4_tinta = cv.fastNlMeansDenoisingColored(crop_image_4_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_tinta = cv.morphologyEx(crop_image_4_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_4_tinta = cv.cvtColor(crop_image_4_tinta, cv.COLOR_BGR2GRAY)
            crop_image_4_tinta = cv.threshold(crop_image_4_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_tinta = pytesseract.image_to_string(
                crop_image_4_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_tinta)
                sheet.write('A67', result_4_tinta)
            # n_cores_4
            crop_image_4_n_cores = crop_image_4[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_4_n_cores = cv.fastNlMeansDenoisingColored(crop_image_4_n_cores, None, 10, 10, 7, 21)
            kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_n_cores = cv.morphologyEx(crop_image_4_n_cores, cv.MORPH_CLOSE, kernel_4)
            crop_image_4_n_cores = cv.cvtColor(crop_image_4_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_4_n_cores = cv.threshold(crop_image_4_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_n_cores = pytesseract.image_to_string(
                crop_image_4_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_n_cores)
                sheet.write('A68', result_4_n_cores)
            # n_caixas_4
            crop_image_4_n_caixas = crop_image_4[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_n_caixas = pytesseract.image_to_string(crop_image_4_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_n_caixas)
                sheet.write('A69', result_4_n_caixas)
            # tipo_clientes_4
            crop_image_4_tipo_clientes = crop_image_4[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_4_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_4_tipo_clientes, None, 10, 10, 7, 21)
            kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_tipo_clientes = cv.morphologyEx(crop_image_4_tipo_clientes, cv.MORPH_CLOSE, kernel_4)
            crop_image_4_tipo_clientes = cv.cvtColor(crop_image_4_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_tipo_clientes = pytesseract.image_to_string(
                crop_image_4_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_tipo_clientes)
                sheet.write('A70', result_4_tipo_clientes)
            # Servicos_4
            crop_image_4_servicos_1 = crop_image_4[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_servicos_1 = pytesseract.image_to_string(crop_image_4_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_servicos_1)
                sheet.write('A71', result_4_servicos_1)
            # Servicos_2_4
            crop_image_4_servicos_2 = crop_image_4[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_servicos_2 = pytesseract.image_to_string(crop_image_4_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_servicos_2)
                sheet.write('A72', result_4_servicos_2)
            # Caixas_1_4
            crop_image_4_caixas = crop_image_4[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_4_caixas = cv.cvtColor(crop_image_4_caixas, cv.COLOR_BGR2GRAY)
            kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_caixas = cv.morphologyEx(crop_image_4_caixas, cv.MORPH_CLOSE, kernel_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_caixas = pytesseract.image_to_string(crop_image_4_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_caixas)
                sheet.write('A73', result_4_caixas)
            # Total_4
            crop_image_4_total = crop_image_4[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_4_total = cv.cvtColor(crop_image_4_total, cv.COLOR_BGR2GRAY)
            crop_image_4_total = cv.threshold(crop_image_4_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_total = cv.morphologyEx(crop_image_4_total, cv.MORPH_CLOSE, kernel_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_total = pytesseract.image_to_string(crop_image_4_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_total)
                sheet.write('A74', result_4_total)
                if result_4_total[0:1] == str(9):
                    crop_image_4_total = crop_image_4[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_4_total = cv.cvtColor(crop_image_4_total, cv.COLOR_BGR2GRAY)
                    kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_4_total = cv.morphologyEx(crop_image_4_total, cv.MORPH_CLOSE, kernel_4)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_4_total = pytesseract.image_to_string(crop_image_4_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_4_total)
                        sheet.write('A74', result_4_total)
            # Espessura_4
            crop_image_4_espessura = crop_image_4[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_espessura = pytesseract.image_to_string(crop_image_4_espessura,
                                                             config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_espessura)
                sheet.write('A75', result_4_espessura)
            # Cor_1_4
            crop_image_4_1_cor = crop_image_4[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_4_1_cor = cv.fastNlMeansDenoisingColored(crop_image_4_1_cor, None, 10, 10, 7, 21)
            crop_image_4_1_cor = cv.cvtColor(crop_image_4_1_cor, cv.COLOR_BGR2GRAY)
            kernel_4_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_1_cor = cv.morphologyEx(crop_image_4_1_cor, cv.MORPH_CLOSE, kernel_4_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_1_cor = pytesseract.image_to_string(
                crop_image_4_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_1_cor)
                sheet.write('B76', result_4_1_cor)
            # Cor_2_4
            crop_image_4_2_cor = crop_image_4[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_4_2_cor = cv.fastNlMeansDenoisingColored(crop_image_4_2_cor, None, 10, 10, 7, 21)
            crop_image_4_2_cor = cv.cvtColor(crop_image_4_2_cor, cv.COLOR_BGR2GRAY)
            kernel_4_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_2_cor = cv.morphologyEx(crop_image_4_2_cor, cv.MORPH_CLOSE, kernel_4_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_2_cor = pytesseract.image_to_string(
                crop_image_4_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_2_cor)
                sheet.write('C76', result_4_2_cor)
            # Cor_3_4
            crop_image_4_3_cor = crop_image_4[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_4_3_cor = cv.fastNlMeansDenoisingColored(crop_image_4_3_cor, None, 10, 10, 7, 21)
            crop_image_4_3_cor = cv.cvtColor(crop_image_4_3_cor, cv.COLOR_BGR2GRAY)
            kernel_4_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_3_cor = cv.morphologyEx(crop_image_4_3_cor, cv.MORPH_CLOSE, kernel_4_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_3_cor = pytesseract.image_to_string(
                crop_image_4_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_3_cor)
                sheet.write('D76', result_4_3_cor)
            # Cor_4_4
            crop_image_4_4_cor = crop_image_4[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_4_4_cor = cv.fastNlMeansDenoisingColored(crop_image_4_4_cor, None, 10, 10, 7, 21)
            crop_image_4_4_cor = cv.cvtColor(crop_image_4_4_cor, cv.COLOR_BGR2GRAY)
            kernel_4_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_4_cor = cv.morphologyEx(crop_image_4_4_cor, cv.MORPH_CLOSE, kernel_4_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_4_cor = pytesseract.image_to_string(
                crop_image_4_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_4_cor)
                sheet.write('E76', result_4_4_cor)
            # Cor_5_4
            crop_image_4_5_cor = crop_image_4[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_4_5_cor = cv.fastNlMeansDenoisingColored(crop_image_4_5_cor, None, 10, 10, 7, 21)
            crop_image_4_5_cor = cv.cvtColor(crop_image_4_5_cor, cv.COLOR_BGR2GRAY)
            kernel_4_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_5_cor = cv.morphologyEx(crop_image_4_5_cor, cv.MORPH_CLOSE, kernel_4_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_5_cor = pytesseract.image_to_string(
                crop_image_4_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_5_cor)
                sheet.write('F76', result_4_5_cor)
            # Cor_6_4
            crop_image_4_6_cor = crop_image_4[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_4_6_cor = cv.fastNlMeansDenoisingColored(crop_image_4_6_cor, None, 10, 10, 7, 21)
            crop_image_4_6_cor = cv.cvtColor(crop_image_4_6_cor, cv.COLOR_BGR2GRAY)
            kernel_4_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_6_cor = cv.morphologyEx(crop_image_4_6_cor, cv.MORPH_CLOSE, kernel_4_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_6_cor = pytesseract.image_to_string(
                crop_image_4_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_6_cor)
                sheet.write('G76', result_4_6_cor)
            # Cor_fabricada_4
            crop_image_4_fabricada_cor = crop_image_4[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_4_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_4_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_4_fabricada_cor = cv.cvtColor(crop_image_4_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_4_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_fabricada_cor = cv.morphologyEx(crop_image_4_fabricada_cor, cv.MORPH_CLOSE, kernel_4_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_4_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H76', result_fabricada_cor)
        if 5 <= numero_quadros:
            crop_image_5 = img1[novo_y_1 * 4:novo_y_1 * 5]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_5
            crop_image_5_dimensoes = crop_image_5[q + 60:a - 20, z:p]
            crop_image_5_dimensoes = cv.cvtColor(crop_image_5_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_dimensoes = pytesseract.image_to_string(crop_image_5_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_dimensoes)
                sheet.write('A85', result_5_dimensoes)
            # Unidades_5
            crop_image_5_unidades = crop_image_5[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_5_unidades = cv.fastNlMeansDenoisingColored(crop_image_5_unidades, None, 10, 10, 7, 21)
            kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_unidades = cv.morphologyEx(crop_image_5_unidades, cv.MORPH_CLOSE, kernel_5)
            crop_image_5_unidades = cv.cvtColor(crop_image_5_unidades, cv.COLOR_BGR2GRAY)
            crop_image_5_unidades = cv.threshold(crop_image_5_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_unidades = pytesseract.image_to_string(
                crop_image_5_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_5_unidades == "" or result_5_unidades[0] == str(4) \
                    or result_5_unidades[0:2] == str(28) or result_5_unidades[0:2] == str(29) or result_5_unidades[0:1] == str(0):
                crop_image_5_unidades = crop_image_5[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_5_unidades = cv.fastNlMeansDenoisingColored(crop_image_5_unidades, None, 10, 10, 7, 21)
                kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_5_unidades = cv.morphologyEx(crop_image_5_unidades, cv.MORPH_CLOSE, kernel_5)
                crop_image_5_unidades = cv.cvtColor(crop_image_5_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_5_unidades = pytesseract.image_to_string(
                    crop_image_5_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_5_unidades[0:1] == str(0):
                    crop_image_5_unidades = crop_image_5[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_5_unidades = cv.fastNlMeansDenoisingColored(crop_image_5_unidades, None, 10, 10, 7, 21)
                    kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_5_unidades = cv.morphologyEx(crop_image_5_unidades, cv.MORPH_CLOSE, kernel_5)
                    crop_image_5_unidades = cv.cvtColor(crop_image_5_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_5_unidades = pytesseract.image_to_string(
                        crop_image_5_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_5_unidades)
                sheet.write('A86', result_5_unidades)
            # cliche_5
            crop_image_5_cliche = crop_image_5[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_5_cliche = cv.cvtColor(crop_image_5_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_cliche = pytesseract.image_to_string(
                crop_image_5_cliche,
                config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_cliche)
                sheet.write('A87', result_5_cliche)
            # Tinta_5
            crop_image_5_tinta = crop_image_5[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_5_tinta = cv.fastNlMeansDenoisingColored(crop_image_5_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_tinta = cv.morphologyEx(crop_image_5_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_5_tinta = cv.cvtColor(crop_image_5_tinta, cv.COLOR_BGR2GRAY)
            crop_image_5_tinta = cv.threshold(crop_image_5_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_tinta = pytesseract.image_to_string(
                crop_image_5_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_tinta)
                sheet.write('A88', result_5_tinta)
            # n_cores_5
            crop_image_5_n_cores = crop_image_5[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_5_n_cores = cv.fastNlMeansDenoisingColored(crop_image_5_n_cores, None, 10, 10, 7, 21)
            kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_n_cores = cv.morphologyEx(crop_image_5_n_cores, cv.MORPH_CLOSE, kernel_5)
            crop_image_5_n_cores = cv.cvtColor(crop_image_5_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_5_n_cores = cv.threshold(crop_image_5_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_n_cores = pytesseract.image_to_string(
                crop_image_5_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_n_cores)
                sheet.write('A89', result_5_n_cores)
            # n_caixas_5
            crop_image_5_n_caixas = crop_image_5[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_n_caixas = pytesseract.image_to_string(crop_image_5_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_n_caixas)
                sheet.write('A90', result_5_n_caixas)
            # tipo_clientes_5
            crop_image_5_tipo_clientes = crop_image_5[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_5_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_5_tipo_clientes, None, 10, 10, 7, 21)
            kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_tipo_clientes = cv.morphologyEx(crop_image_5_tipo_clientes, cv.MORPH_CLOSE, kernel_5)
            crop_image_5_tipo_clientes = cv.cvtColor(crop_image_5_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_tipo_clientes = pytesseract.image_to_string(
                crop_image_5_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_tipo_clientes)
                sheet.write('A91', result_5_tipo_clientes)
            # Servicos_5
            crop_image_5_servicos_1 = crop_image_5[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_servicos_1 = pytesseract.image_to_string(
                crop_image_5_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_servicos_1)
                sheet.write('A92', result_5_servicos_1)
            # Servicos_2_5
            crop_image_5_servicos_2 = crop_image_5[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_servicos_2 = pytesseract.image_to_string(crop_image_5_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_servicos_2)
                sheet.write('A93', result_5_servicos_2)
            # Caixas_1_5
            crop_image_5_caixas = crop_image_1[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_5_caixas = cv.cvtColor(crop_image_5_caixas, cv.COLOR_BGR2GRAY)
            kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_caixas = cv.morphologyEx(crop_image_5_caixas, cv.MORPH_CLOSE, kernel_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_caixas = pytesseract.image_to_string(crop_image_5_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_caixas)
                sheet.write('A94', result_5_caixas)
            # Total_5
            crop_image_5_total = crop_image_5[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_5_total = cv.cvtColor(crop_image_5_total, cv.COLOR_BGR2GRAY)
            crop_image_5_total = cv.threshold(crop_image_5_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_total = cv.morphologyEx(crop_image_5_total, cv.MORPH_CLOSE, kernel_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_total = pytesseract.image_to_string(crop_image_5_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_total)
                sheet.write('A95', result_5_total)
                if result_5_total[0:1] == str(9):
                    crop_image_5_total = crop_image_5[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_5_total = cv.cvtColor(crop_image_5_total, cv.COLOR_BGR2GRAY)
                    kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_5_total = cv.morphologyEx(crop_image_5_total, cv.MORPH_CLOSE, kernel_5)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_5_total = pytesseract.image_to_string(crop_image_5_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_5_total)
                        sheet.write('A95', result_5_total)
            # Espessura_5
            crop_image_5_espessura = crop_image_5[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_espessura = pytesseract.image_to_string(crop_image_5_espessura,
                                                             config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_espessura)
                sheet.write('A96', result_5_espessura)
            # Cor_1_5
            crop_image_5_1_cor = crop_image_5[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_5_1_cor = cv.fastNlMeansDenoisingColored(crop_image_5_1_cor, None, 10, 10, 7, 21)
            crop_image_5_1_cor = cv.cvtColor(crop_image_5_1_cor, cv.COLOR_BGR2GRAY)
            kernel_5_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_1_cor = cv.morphologyEx(crop_image_5_1_cor, cv.MORPH_CLOSE, kernel_5_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_1_cor = pytesseract.image_to_string(
                crop_image_5_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_1_cor)
                sheet.write('B97', result_5_1_cor)
            # Cor_2_5
            crop_image_5_2_cor = crop_image_5[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_5_2_cor = cv.fastNlMeansDenoisingColored(crop_image_5_2_cor, None, 10, 10, 7, 21)
            crop_image_5_2_cor = cv.cvtColor(crop_image_5_2_cor, cv.COLOR_BGR2GRAY)
            kernel_5_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_2_cor = cv.morphologyEx(crop_image_5_2_cor, cv.MORPH_CLOSE, kernel_5_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_2_cor = pytesseract.image_to_string(
                crop_image_5_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_2_cor)
                sheet.write('C97', result_5_2_cor)
            # Cor_3_5
            crop_image_5_3_cor = crop_image_5[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_5_3_cor = cv.fastNlMeansDenoisingColored(crop_image_5_3_cor, None, 10, 10, 7, 21)
            crop_image_5_3_cor = cv.cvtColor(crop_image_5_3_cor, cv.COLOR_BGR2GRAY)
            kernel_5_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_3_cor = cv.morphologyEx(crop_image_5_3_cor, cv.MORPH_CLOSE, kernel_5_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_3_cor = pytesseract.image_to_string(
                crop_image_5_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_3_cor)
                sheet.write('D97', result_5_3_cor)
            # Cor_4_5
            crop_image_5_4_cor = crop_image_5[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_5_4_cor = cv.fastNlMeansDenoisingColored(crop_image_5_4_cor, None, 10, 10, 7, 21)
            crop_image_5_4_cor = cv.cvtColor(crop_image_5_4_cor, cv.COLOR_BGR2GRAY)
            kernel_5_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_4_cor = cv.morphologyEx(crop_image_5_4_cor, cv.MORPH_CLOSE, kernel_5_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_4_cor = pytesseract.image_to_string(
                crop_image_5_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_4_cor)
                sheet.write('E97', result_5_4_cor)
            # Cor_5_5
            crop_image_5_5_cor = crop_image_5[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_5_5_cor = cv.fastNlMeansDenoisingColored(crop_image_5_5_cor, None, 10, 10, 7, 21)
            crop_image_5_5_cor = cv.cvtColor(crop_image_5_5_cor, cv.COLOR_BGR2GRAY)
            kernel_5_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_5_cor = cv.morphologyEx(crop_image_5_5_cor, cv.MORPH_CLOSE, kernel_5_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_5_cor = pytesseract.image_to_string(
                crop_image_5_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_5_cor)
                sheet.write('F97', result_5_5_cor)
            # Cor_6_5
            crop_image_5_6_cor = crop_image_5[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_5_6_cor = cv.fastNlMeansDenoisingColored(crop_image_5_6_cor, None, 10, 10, 7, 21)
            crop_image_5_6_cor = cv.cvtColor(crop_image_5_6_cor, cv.COLOR_BGR2GRAY)
            kernel_5_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_6_cor = cv.morphologyEx(crop_image_5_6_cor, cv.MORPH_CLOSE, kernel_5_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_6_cor = pytesseract.image_to_string(
                crop_image_5_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_6_cor)
                sheet.write('G97', result_5_6_cor)
            # Cor_fabricada_5
            crop_image_5_fabricada_cor = crop_image_5[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_5_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_5_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_5_fabricada_cor = cv.cvtColor(crop_image_5_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_5_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_fabricada_cor = cv.morphologyEx(crop_image_5_fabricada_cor, cv.MORPH_CLOSE, kernel_5_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_5_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H97', result_fabricada_cor)
        if 6 <= numero_quadros:
            crop_image_6 = img1[novo_y_1 * 5:novo_y_1 * 6]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_6
            crop_image_6_dimensoes = crop_image_6[q + 60:a - 20, z:p]
            crop_image_6_dimensoes = cv.cvtColor(crop_image_6_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_dimensoes = pytesseract.image_to_string(crop_image_6_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_dimensoes)
                sheet.write('A106', result_6_dimensoes)
            # Unidades_6
            crop_image_6_unidades = crop_image_6[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_6_unidades = cv.fastNlMeansDenoisingColored(crop_image_6_unidades, None, 10, 10, 7, 21)
            kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_unidades = cv.morphologyEx(crop_image_6_unidades, cv.MORPH_CLOSE, kernel_6)
            crop_image_6_unidades = cv.cvtColor(crop_image_6_unidades, cv.COLOR_BGR2GRAY)
            crop_image_6_unidades = cv.threshold(crop_image_6_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_unidades = pytesseract.image_to_string(
                crop_image_6_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_6_unidades == "" or result_6_unidades[0] == str(4) \
                    or result_6_unidades[0:2] == str(28) or result_6_unidades[0:2] == str(29) or result_6_unidades[0:1] == str(0):
                crop_image_6_unidades = crop_image_6[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_6_unidades = cv.fastNlMeansDenoisingColored(crop_image_6_unidades, None, 10, 10, 7, 21)
                kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_6_unidades = cv.morphologyEx(crop_image_6_unidades, cv.MORPH_CLOSE, kernel_6)
                crop_image_6_unidades = cv.cvtColor(crop_image_6_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_6_unidades = pytesseract.image_to_string(
                    crop_image_6_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_6_unidades[0:1] == str(0):
                    crop_image_6_unidades = crop_image_6[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_6_unidades = cv.fastNlMeansDenoisingColored(crop_image_6_unidades, None, 10, 10, 7, 21)
                    kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_6_unidades = cv.morphologyEx(crop_image_6_unidades, cv.MORPH_CLOSE, kernel_6)
                    crop_image_6_unidades = cv.cvtColor(crop_image_6_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_6_unidades = pytesseract.image_to_string(
                        crop_image_6_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_6_unidades)
                sheet.write('A107', result_6_unidades)
            # cliche_6
            crop_image_6_cliche = crop_image_6[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_6_cliche = cv.cvtColor(crop_image_6_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_cliche = pytesseract.image_to_string(
                crop_image_6_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_cliche)
                sheet.write('A108', result_6_cliche)
            # Tinta_6
            crop_image_6_tinta = crop_image_6[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_6_tinta = cv.fastNlMeansDenoisingColored(crop_image_6_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_tinta = cv.morphologyEx(crop_image_6_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_6_tinta = cv.cvtColor(crop_image_6_tinta, cv.COLOR_BGR2GRAY)
            crop_image_6_tinta = cv.threshold(crop_image_6_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_tinta = pytesseract.image_to_string(
                crop_image_6_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_tinta)
                sheet.write('A109', result_6_tinta)
            # n_cores_6
            crop_image_6_n_cores = crop_image_6[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_6_n_cores = cv.fastNlMeansDenoisingColored(crop_image_6_n_cores, None, 10, 10, 7, 21)
            kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_n_cores = cv.morphologyEx(crop_image_6_n_cores, cv.MORPH_CLOSE, kernel_6)
            crop_image_6_n_cores = cv.cvtColor(crop_image_6_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_6_n_cores = cv.threshold(crop_image_6_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_n_cores = pytesseract.image_to_string(
                crop_image_6_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_n_cores)
                sheet.write('A110', result_6_n_cores)
            # n_caixas_6
            crop_image_6_n_caixas = crop_image_6[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_n_caixas = pytesseract.image_to_string(crop_image_6_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_n_caixas)
                sheet.write('A111', result_6_n_caixas)
            # tipo_clientes_6
            crop_image_6_tipo_clientes = crop_image_6[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_6_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_6_tipo_clientes, None, 10, 10, 7, 21)
            kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_tipo_clientes = cv.morphologyEx(crop_image_6_tipo_clientes, cv.MORPH_CLOSE, kernel_6)
            crop_image_6_tipo_clientes = cv.cvtColor(crop_image_6_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_tipo_clientes = pytesseract.image_to_string(
                crop_image_6_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_tipo_clientes)
                sheet.write('A112', result_6_tipo_clientes)
            # Servicos_6
            crop_image_6_servicos_1 = crop_image_6[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_servicos_1 = pytesseract.image_to_string(crop_image_6_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_servicos_1)
                sheet.write('A113', result_6_servicos_1)
            # Servicos_2_6
            crop_image_6_servicos_2 = crop_image_6[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_servicos_2 = pytesseract.image_to_string(crop_image_6_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_servicos_2)
                sheet.write('A114', result_6_servicos_2)
            # Caixas_1_6
            crop_image_6_caixas = crop_image_1[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_6_caixas = cv.cvtColor(crop_image_6_caixas, cv.COLOR_BGR2GRAY)
            kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_caixas = cv.morphologyEx(crop_image_6_caixas, cv.MORPH_CLOSE, kernel_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_caixas = pytesseract.image_to_string(crop_image_6_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_caixas)
                sheet.write('A115', result_6_caixas)
            # Total_6
            crop_image_6_total = crop_image_6[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_6_total = cv.cvtColor(crop_image_6_total, cv.COLOR_BGR2GRAY)
            crop_image_6_total = cv.threshold(crop_image_6_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_total = cv.morphologyEx(crop_image_6_total, cv.MORPH_CLOSE, kernel_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_total = pytesseract.image_to_string(crop_image_6_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_total)
                sheet.write('A116', result_6_total)
                if result_6_total[0:1] == str(9):
                    crop_image_6_total = crop_image_6[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_6_total = cv.cvtColor(crop_image_6_total, cv.COLOR_BGR2GRAY)
                    kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_6_total = cv.morphologyEx(crop_image_6_total, cv.MORPH_CLOSE, kernel_6)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_6_total = pytesseract.image_to_string(crop_image_6_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_6_total)
                        sheet.write('A117', result_6_total)
            # Espessura_6
            crop_image_6_espessura = crop_image_6[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_espessura = pytesseract.image_to_string(crop_image_6_espessura,
                                                             config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_espessura)
                sheet.write('A117', result_6_espessura)

            # Cor_1_6
            crop_image_6_1_cor = crop_image_6[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_6_1_cor = cv.fastNlMeansDenoisingColored(crop_image_6_1_cor, None, 10, 10, 7, 21)
            crop_image_6_1_cor = cv.cvtColor(crop_image_6_1_cor, cv.COLOR_BGR2GRAY)
            kernel_6_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_1_cor = cv.morphologyEx(crop_image_6_1_cor, cv.MORPH_CLOSE, kernel_6_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_1_cor = pytesseract.image_to_string(
                crop_image_6_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_1_cor)
                sheet.write('B118', result_6_1_cor)

            # Cor_2_6
            crop_image_6_2_cor = crop_image_6[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_6_2_cor = cv.fastNlMeansDenoisingColored(crop_image_6_2_cor, None, 10, 10, 7, 21)
            crop_image_6_2_cor = cv.cvtColor(crop_image_6_2_cor, cv.COLOR_BGR2GRAY)
            kernel_6_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_2_cor = cv.morphologyEx(crop_image_6_2_cor, cv.MORPH_CLOSE, kernel_6_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_2_cor = pytesseract.image_to_string(
                crop_image_6_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_2_cor)
                sheet.write('C118', result_6_2_cor)

            # Cor_3_6
            crop_image_6_3_cor = crop_image_6[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_6_3_cor = cv.fastNlMeansDenoisingColored(crop_image_6_3_cor, None, 10, 10, 7, 21)
            crop_image_6_3_cor = cv.cvtColor(crop_image_6_3_cor, cv.COLOR_BGR2GRAY)
            kernel_6_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_3_cor = cv.morphologyEx(crop_image_6_3_cor, cv.MORPH_CLOSE, kernel_6_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_3_cor = pytesseract.image_to_string(
                crop_image_6_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_3_cor)
                sheet.write('D118', result_6_3_cor)

            # Cor_4_6
            crop_image_6_4_cor = crop_image_6[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_6_4_cor = cv.fastNlMeansDenoisingColored(crop_image_6_4_cor, None, 10, 10, 7, 21)
            crop_image_6_4_cor = cv.cvtColor(crop_image_6_4_cor, cv.COLOR_BGR2GRAY)
            kernel_6_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_4_cor = cv.morphologyEx(crop_image_6_4_cor, cv.MORPH_CLOSE, kernel_6_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_4_cor = pytesseract.image_to_string(
                crop_image_6_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_4_cor)
                sheet.write('E118', result_6_4_cor)

            # Cor_5_6
            crop_image_6_5_cor = crop_image_6[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_6_5_cor = cv.fastNlMeansDenoisingColored(crop_image_6_5_cor, None, 10, 10, 7, 21)
            crop_image_6_5_cor = cv.cvtColor(crop_image_6_5_cor, cv.COLOR_BGR2GRAY)
            kernel_6_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_5_cor = cv.morphologyEx(crop_image_6_5_cor, cv.MORPH_CLOSE, kernel_6_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_5_cor = pytesseract.image_to_string(
                crop_image_6_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_5_cor)
                sheet.write('F118', result_6_5_cor)

            # Cor_6_6
            crop_image_6_6_cor = crop_image_6[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_6_6_cor = cv.fastNlMeansDenoisingColored(crop_image_6_6_cor, None, 10, 10, 7, 21)
            crop_image_6_6_cor = cv.cvtColor(crop_image_6_6_cor, cv.COLOR_BGR2GRAY)
            kernel_6_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_6_cor = cv.morphologyEx(crop_image_6_6_cor, cv.MORPH_CLOSE, kernel_6_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_6_cor = pytesseract.image_to_string(
                crop_image_6_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_6_cor)
                sheet.write('G118', result_6_6_cor)

            # Cor_fabricada_6
            crop_image_6_fabricada_cor = crop_image_6[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_6_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_6_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_6_fabricada_cor = cv.cvtColor(crop_image_6_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_6_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_fabricada_cor = cv.morphologyEx(crop_image_6_fabricada_cor, cv.MORPH_CLOSE, kernel_6_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_6_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H118', result_fabricada_cor)
        if 7 <= numero_quadros:
            crop_image_7 = img1[novo_y_1 * 6:novo_y_1 * 7]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_7
            crop_image_7_dimensoes = crop_image_7[q + 60:a - 20, z:p]
            crop_image_7_dimensoes = cv.cvtColor(crop_image_7_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_dimensoes = pytesseract.image_to_string(crop_image_7_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_dimensoes)
                sheet.write('A127', result_7_dimensoes)
            # Unidades_7
            crop_image_7_unidades = crop_image_7[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_7_unidades = cv.fastNlMeansDenoisingColored(crop_image_7_unidades, None, 10, 10, 7, 21)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_unidades = cv.morphologyEx(crop_image_7_unidades, cv.MORPH_CLOSE, kernel_7)
            crop_image_7_unidades = cv.cvtColor(crop_image_7_unidades, cv.COLOR_BGR2GRAY)
            crop_image_7_unidades = cv.threshold(crop_image_7_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_unidades = pytesseract.image_to_string(
                crop_image_7_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_7_unidades == "" or result_7_unidades[0] == str(4) \
                    or result_7_unidades[0:2] == str(28) or result_7_unidades[0:2] == str(29) or result_7_unidades[0:1] == str(0):
                crop_image_7_unidades = crop_image_7[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_7_unidades = cv.fastNlMeansDenoisingColored(crop_image_7_unidades, None, 10, 10, 7, 21)
                kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_7_unidades = cv.morphologyEx(crop_image_7_unidades, cv.MORPH_CLOSE, kernel_7)
                crop_image_7_unidades = cv.cvtColor(crop_image_7_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_7_unidades = pytesseract.image_to_string(
                    crop_image_7_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_7_unidades[0:1] == str(0):
                    crop_image_7_unidades = crop_image_7[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_7_unidades = cv.fastNlMeansDenoisingColored(crop_image_7_unidades, None, 10, 10, 7, 21)
                    kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_7_unidades = cv.morphologyEx(crop_image_7_unidades, cv.MORPH_CLOSE, kernel_7)
                    crop_image_7_unidades = cv.cvtColor(crop_image_7_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_7_unidades = pytesseract.image_to_string(
                        crop_image_7_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_7_unidades)
                sheet.write('A128', result_7_unidades)
            # cliche_7
            crop_image_7_cliche = crop_image_7[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_7_cliche = cv.cvtColor(crop_image_7_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_cliche = pytesseract.image_to_string(
                crop_image_7_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_cliche)
                sheet.write('A129', result_7_cliche)
            # Tinta_7
            crop_image_7_tinta = crop_image_7[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_7_tinta = cv.fastNlMeansDenoisingColored(crop_image_7_tinta, None, 10, 10, 7, 21)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_tinta = cv.morphologyEx(crop_image_7_tinta, cv.MORPH_CLOSE, kernel_7)
            crop_image_7_tinta = cv.cvtColor(crop_image_7_tinta, cv.COLOR_BGR2GRAY)
            crop_image_7_tinta = cv.threshold(crop_image_7_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_tinta = pytesseract.image_to_string(
                crop_image_7_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_tinta)
                sheet.write('A130', result_7_tinta)
            # n_cores_7
            crop_image_7_n_cores = crop_image_7[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_7_n_cores = cv.fastNlMeansDenoisingColored(crop_image_7_n_cores, None, 10, 10, 7, 21)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_n_cores = cv.morphologyEx(crop_image_7_n_cores, cv.MORPH_CLOSE, kernel_7)
            crop_image_7_n_cores = cv.cvtColor(crop_image_7_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_7_n_cores = cv.threshold(crop_image_7_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_n_cores = pytesseract.image_to_string(
                crop_image_7_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_n_cores)
                sheet.write('A131', result_7_n_cores)
            # n_caixas_7
            crop_image_7_n_caixas = crop_image_7[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_n_caixas = pytesseract.image_to_string(crop_image_7_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_n_caixas)
                sheet.write('A132', result_7_n_caixas)
            # tipo_clientes_7
            crop_image_7_tipo_clientes = crop_image_7[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_7_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_7_tipo_clientes, None, 10, 10, 7, 21)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_tipo_clientes = cv.morphologyEx(crop_image_7_tipo_clientes, cv.MORPH_CLOSE, kernel_7)
            crop_image_7_tipo_clientes = cv.cvtColor(crop_image_7_tipo_clientes, cv.COLOR_BGR2GRAY)

            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_tipo_clientes = pytesseract.image_to_string(
                crop_image_7_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_tipo_clientes)
                sheet.write('A133', result_7_tipo_clientes)
            # Servicos_7
            crop_image_7_servicos_1 = crop_image_7[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_servicos_1 = pytesseract.image_to_string(crop_image_7_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_servicos_1)
                sheet.write('A134', result_7_servicos_1)
            # Servicos_2_7
            crop_image_7_servicos_2 = crop_image_7[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_servicos_2 = pytesseract.image_to_string(crop_image_7_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_servicos_2)
                sheet.write('A135', result_7_servicos_2)
            # Caixas_1_7
            crop_image_7_caixas = crop_image_1[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_7_caixas = cv.cvtColor(crop_image_7_caixas, cv.COLOR_BGR2GRAY)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_caixas = cv.morphologyEx(crop_image_7_caixas, cv.MORPH_CLOSE, kernel_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_caixas = pytesseract.image_to_string(crop_image_7_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_caixas)
                sheet.write('A136', result_7_caixas)
            # Total_7
            crop_image_7_total = crop_image_7[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_7_total = cv.cvtColor(crop_image_7_total, cv.COLOR_BGR2GRAY)
            crop_image_7_total = cv.threshold(crop_image_7_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_total = cv.morphologyEx(crop_image_7_total, cv.MORPH_CLOSE, kernel_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_total = pytesseract.image_to_string(crop_image_7_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_total)
                sheet.write('A137', result_7_total)
                if result_7_total[0:1] == str(9):
                    crop_image_7_total = crop_image_7[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_7_total = cv.cvtColor(crop_image_7_total, cv.COLOR_BGR2GRAY)
                    kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_7_total = cv.morphologyEx(crop_image_7_total, cv.MORPH_CLOSE, kernel_7)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_7_total = pytesseract.image_to_string(crop_image_7_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_7_total)
                        sheet.write('A137', result_7_total)
            # Espessura_7
            crop_image_7_espessura = crop_image_7[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_espessura = pytesseract.image_to_string(crop_image_7_espessura,
                                                             config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_espessura)
                sheet.write('A138', result_7_espessura)
            # Cor_1_7
            crop_image_7_1_cor = crop_image_7[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_7_1_cor = cv.fastNlMeansDenoisingColored(crop_image_7_1_cor, None, 10, 10, 7, 21)
            crop_image_7_1_cor = cv.cvtColor(crop_image_7_1_cor, cv.COLOR_BGR2GRAY)
            kernel_7_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_1_cor = cv.morphologyEx(crop_image_7_1_cor, cv.MORPH_CLOSE, kernel_7_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_1_cor = pytesseract.image_to_string(
                crop_image_7_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_1_cor)
                sheet.write('B139', result_7_1_cor)
            # Cor_2_7
            crop_image_7_2_cor = crop_image_7[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_7_2_cor = cv.fastNlMeansDenoisingColored(crop_image_7_2_cor, None, 10, 10, 7, 21)
            crop_image_7_2_cor = cv.cvtColor(crop_image_7_2_cor, cv.COLOR_BGR2GRAY)
            kernel_7_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_2_cor = cv.morphologyEx(crop_image_7_2_cor, cv.MORPH_CLOSE, kernel_7_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_2_cor = pytesseract.image_to_string(
                crop_image_7_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_2_cor)
                sheet.write('C139', result_7_2_cor)

            # Cor_3_7
            crop_image_7_3_cor = crop_image_7[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_7_3_cor = cv.fastNlMeansDenoisingColored(crop_image_7_3_cor, None, 10, 10, 7, 21)
            crop_image_7_3_cor = cv.cvtColor(crop_image_7_3_cor, cv.COLOR_BGR2GRAY)
            kernel_7_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_3_cor = cv.morphologyEx(crop_image_7_3_cor, cv.MORPH_CLOSE, kernel_7_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_3_cor = pytesseract.image_to_string(
                crop_image_7_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_3_cor)
                sheet.write('D139', result_7_3_cor)

            # Cor_4_7
            crop_image_7_4_cor = crop_image_7[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_7_4_cor = cv.fastNlMeansDenoisingColored(crop_image_7_4_cor, None, 10, 10, 7, 21)
            crop_image_7_4_cor = cv.cvtColor(crop_image_7_4_cor, cv.COLOR_BGR2GRAY)
            kernel_7_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_4_cor = cv.morphologyEx(crop_image_7_4_cor, cv.MORPH_CLOSE, kernel_7_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_4_cor = pytesseract.image_to_string(
                crop_image_7_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_4_cor)
                sheet.write('E139', result_7_4_cor)

            # Cor_5_7
            crop_image_7_5_cor = crop_image_7[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_7_5_cor = cv.fastNlMeansDenoisingColored(crop_image_7_5_cor, None, 10, 10, 7, 21)
            crop_image_7_5_cor = cv.cvtColor(crop_image_7_5_cor, cv.COLOR_BGR2GRAY)
            kernel_7_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_5_cor = cv.morphologyEx(crop_image_7_5_cor, cv.MORPH_CLOSE, kernel_7_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_5_cor = pytesseract.image_to_string(
                crop_image_7_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_5_cor)
                sheet.write('F139', result_7_5_cor)

            # Cor_6_7
            crop_image_7_6_cor = crop_image_7[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_7_6_cor = cv.fastNlMeansDenoisingColored(crop_image_7_6_cor, None, 10, 10, 7, 21)
            crop_image_7_6_cor = cv.cvtColor(crop_image_7_6_cor, cv.COLOR_BGR2GRAY)
            kernel_7_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_6_cor = cv.morphologyEx(crop_image_7_6_cor, cv.MORPH_CLOSE, kernel_7_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_6_cor = pytesseract.image_to_string(
                crop_image_7_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_6_cor)
                sheet.write('G139', result_7_6_cor)

            # Cor_fabricada_7
            crop_image_7_fabricada_cor = crop_image_7[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_7_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_7_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_7_fabricada_cor = cv.cvtColor(crop_image_7_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_7_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_fabricada_cor = cv.morphologyEx(crop_image_7_fabricada_cor, cv.MORPH_CLOSE, kernel_7_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_7_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H139', result_fabricada_cor)
        if 8 <= numero_quadros:
            crop_image_8 = img1[novo_y_1 * 7:novo_y_1 * 8]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_8
            crop_image_8_dimensoes = crop_image_8[q + 60:a - 20, z:p]
            crop_image_8_dimensoes = cv.cvtColor(crop_image_8_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_dimensoes = pytesseract.image_to_string(crop_image_8_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_dimensoes)
                sheet.write('A148', result_8_dimensoes)
            # Unidades_8
            crop_image_8_unidades = crop_image_8[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_8_unidades = cv.fastNlMeansDenoisingColored(crop_image_8_unidades, None, 10, 10, 7, 21)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_unidades = cv.morphologyEx(crop_image_8_unidades, cv.MORPH_CLOSE, kernel_8)
            crop_image_8_unidades = cv.cvtColor(crop_image_8_unidades, cv.COLOR_BGR2GRAY)
            crop_image_8_unidades = cv.threshold(crop_image_8_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_unidades = pytesseract.image_to_string(
                crop_image_8_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_8_unidades == "" or result_8_unidades[0] == str(4) \
                    or result_8_unidades[0:2] == str(28) or result_8_unidades[0:2] == str(29) or result_8_unidades[0:1] == str(0):
                crop_image_8_unidades = crop_image_8[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_8_unidades = cv.fastNlMeansDenoisingColored(crop_image_8_unidades, None, 10, 10, 7, 21)
                kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_8_unidades = cv.morphologyEx(crop_image_8_unidades, cv.MORPH_CLOSE, kernel_8)
                crop_image_8_unidades = cv.cvtColor(crop_image_8_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_8_unidades = pytesseract.image_to_string(
                    crop_image_8_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_8_unidades[0:1] == str(0):
                    crop_image_8_unidades = crop_image_8[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_8_unidades = cv.fastNlMeansDenoisingColored(crop_image_8_unidades, None, 10, 10, 7, 21)
                    kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_8_unidades = cv.morphologyEx(crop_image_8_unidades, cv.MORPH_CLOSE, kernel_8)
                    crop_image_8_unidades = cv.cvtColor(crop_image_8_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_8_unidades = pytesseract.image_to_string(
                        crop_image_8_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_8_unidades)
                sheet.write('A149', result_8_unidades)
            # cliche_8
            crop_image_8_cliche = crop_image_8[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_8_cliche = cv.cvtColor(crop_image_8_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_cliche = pytesseract.image_to_string(
                crop_image_8_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_cliche)
                sheet.write('A150', result_8_cliche)
            # Tinta_8
            crop_image_8_tinta = crop_image_8[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_8_tinta = cv.fastNlMeansDenoisingColored(crop_image_8_tinta, None, 10, 10, 7, 21)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_tinta = cv.morphologyEx(crop_image_8_tinta, cv.MORPH_CLOSE, kernel_8)
            crop_image_8_tinta = cv.cvtColor(crop_image_8_tinta, cv.COLOR_BGR2GRAY)
            crop_image_8_tinta = cv.threshold(crop_image_8_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_tinta = pytesseract.image_to_string(
                crop_image_8_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_tinta)
                sheet.write('A151', result_8_tinta)
            # n_cores_8
            crop_image_8_n_cores = crop_image_8[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_8_n_cores = cv.fastNlMeansDenoisingColored(crop_image_8_n_cores, None, 10, 10, 7, 21)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_n_cores = cv.morphologyEx(crop_image_8_n_cores, cv.MORPH_CLOSE, kernel_8)
            crop_image_8_n_cores = cv.cvtColor(crop_image_8_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_8_n_cores = cv.threshold(crop_image_8_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_n_cores = pytesseract.image_to_string(
                crop_image_8_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_n_cores)
                sheet.write('A152', result_8_n_cores)
            # n_caixas_8
            crop_image_8_n_caixas = crop_image_8[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_n_caixas = pytesseract.image_to_string(crop_image_8_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_n_caixas)
                sheet.write('A153', result_8_n_caixas)
            # tipo_clientes_8
            crop_image_8_tipo_clientes = crop_image_8[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_8_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_8_tipo_clientes, None, 10, 10, 7, 21)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_tipo_clientes = cv.morphologyEx(crop_image_8_tipo_clientes, cv.MORPH_CLOSE, kernel_8)
            crop_image_8_tipo_clientes = cv.cvtColor(crop_image_8_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_tipo_clientes = pytesseract.image_to_string(
                crop_image_8_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_tipo_clientes)
                sheet.write('A154', result_8_tipo_clientes)
            # Servicos_8
            crop_image_8_servicos_1 = crop_image_8[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_servicos_1 = pytesseract.image_to_string(crop_image_8_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_servicos_1)
                sheet.write('A155', result_8_servicos_1)
            # Servicos_2_8
            crop_image_8_servicos_2 = crop_image_8[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_servicos_2 = pytesseract.image_to_string(crop_image_8_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_servicos_2)
                sheet.write('A156', result_8_servicos_2)
            # Caixas_1_8
            crop_image_8_caixas = crop_image_8[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_8_caixas = cv.cvtColor(crop_image_8_caixas, cv.COLOR_BGR2GRAY)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_caixas = cv.morphologyEx(crop_image_8_caixas, cv.MORPH_CLOSE, kernel_8)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_caixas = pytesseract.image_to_string(crop_image_8_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_caixas)
                sheet.write('A157', result_8_caixas)
            # Total_8
            crop_image_8_total = crop_image_8[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_8_total = cv.cvtColor(crop_image_8_total, cv.COLOR_BGR2GRAY)
            crop_image_8_total = cv.threshold(crop_image_8_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_total = cv.morphologyEx(crop_image_8_total, cv.MORPH_CLOSE, kernel_8)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_total = pytesseract.image_to_string(crop_image_8_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_total)
                sheet.write('A158', result_8_total)
                if result_8_total[0:1] == str(9):
                    crop_image_8_total = crop_image_8[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_8_total = cv.cvtColor(crop_image_8_total, cv.COLOR_BGR2GRAY)
                    kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_8_total = cv.morphologyEx(crop_image_8_total, cv.MORPH_CLOSE, kernel_8)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_8_total = pytesseract.image_to_string(crop_image_8_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_8_total)
                        sheet.write('A158', result_8_total)
            # Espessura_8
            crop_image_8_espessura = crop_image_8[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_espessura = pytesseract.image_to_string(crop_image_8_espessura,
                                                             config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_espessura)
                sheet.write('A159', result_8_espessura)
            # Cor_1_8
            crop_image_8_1_cor = crop_image_8[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_8_1_cor = cv.fastNlMeansDenoisingColored(crop_image_8_1_cor, None, 10, 10, 7, 21)
            crop_image_8_1_cor = cv.cvtColor(crop_image_8_1_cor, cv.COLOR_BGR2GRAY)
            kernel_8_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_1_cor = cv.morphologyEx(crop_image_8_1_cor, cv.MORPH_CLOSE, kernel_8_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_1_cor = pytesseract.image_to_string(
                crop_image_8_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_1_cor)
                sheet.write('B160', result_8_1_cor)
            # Cor_2_8
            crop_image_8_2_cor = crop_image_8[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_8_2_cor = cv.fastNlMeansDenoisingColored(crop_image_8_2_cor, None, 10, 10, 7, 21)
            crop_image_8_2_cor = cv.cvtColor(crop_image_8_2_cor, cv.COLOR_BGR2GRAY)
            kernel_8_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_2_cor = cv.morphologyEx(crop_image_8_2_cor, cv.MORPH_CLOSE, kernel_8_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_2_cor = pytesseract.image_to_string(
                crop_image_8_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_2_cor)
                sheet.write('C160', result_8_2_cor)
            # Cor_3_8
            crop_image_8_3_cor = crop_image_8[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_8_3_cor = cv.fastNlMeansDenoisingColored(crop_image_8_3_cor, None, 10, 10, 7, 21)
            crop_image_8_3_cor = cv.cvtColor(crop_image_8_3_cor, cv.COLOR_BGR2GRAY)
            kernel_8_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_3_cor = cv.morphologyEx(crop_image_8_3_cor, cv.MORPH_CLOSE, kernel_8_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_3_cor = pytesseract.image_to_string(
                crop_image_8_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_3_cor)
                sheet.write('D160', result_8_3_cor)
            # Cor_4_8
            crop_image_8_4_cor = crop_image_8[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_8_4_cor = cv.fastNlMeansDenoisingColored(crop_image_8_4_cor, None, 10, 10, 7, 21)
            crop_image_8_4_cor = cv.cvtColor(crop_image_8_4_cor, cv.COLOR_BGR2GRAY)
            kernel_8_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_4_cor = cv.morphologyEx(crop_image_8_4_cor, cv.MORPH_CLOSE, kernel_8_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_4_cor = pytesseract.image_to_string(
                crop_image_8_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_4_cor)
                sheet.write('E160', result_8_4_cor)
            # Cor_5_8
            crop_image_8_5_cor = crop_image_8[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_8_5_cor = cv.fastNlMeansDenoisingColored(crop_image_8_5_cor, None, 10, 10, 7, 21)
            crop_image_8_5_cor = cv.cvtColor(crop_image_8_5_cor, cv.COLOR_BGR2GRAY)
            kernel_8_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_5_cor = cv.morphologyEx(crop_image_8_5_cor, cv.MORPH_CLOSE, kernel_8_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_5_cor = pytesseract.image_to_string(
                crop_image_8_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_5_cor)
                sheet.write('F160', result_8_5_cor)

            # Cor_6_8
            crop_image_8_6_cor = crop_image_8[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_8_6_cor = cv.fastNlMeansDenoisingColored(crop_image_8_6_cor, None, 10, 10, 7, 21)
            crop_image_8_6_cor = cv.cvtColor(crop_image_8_6_cor, cv.COLOR_BGR2GRAY)
            kernel_8_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_6_cor = cv.morphologyEx(crop_image_8_6_cor, cv.MORPH_CLOSE, kernel_8_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_6_cor = pytesseract.image_to_string(
                crop_image_8_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_6_cor)
                sheet.write('G160', result_8_6_cor)

            # Cor_fabricada_8
            crop_image_8_fabricada_cor = crop_image_8[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_8_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_8_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_8_fabricada_cor = cv.cvtColor(crop_image_8_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_8_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_fabricada_cor = cv.morphologyEx(crop_image_8_fabricada_cor, cv.MORPH_CLOSE, kernel_8_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_8_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H160', result_fabricada_cor)
        if 9 <= numero_quadros:
            crop_image_9 = img1[novo_y_1 * 8:novo_y_1 * 9]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_9
            crop_image_9_dimensoes = crop_image_9[q + 60:a - 20, z:p]

            crop_image_9_dimensoes = cv.cvtColor(crop_image_9_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_dimensoes = pytesseract.image_to_string(
                crop_image_9_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_dimensoes)
                sheet.write('A169', result_9_dimensoes)
            # Unidades_9
            crop_image_9_unidades = crop_image_9[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_9_unidades = cv.fastNlMeansDenoisingColored(crop_image_9_unidades, None, 10, 10, 7, 21)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_unidades = cv.morphologyEx(crop_image_9_unidades, cv.MORPH_CLOSE, kernel_9)
            crop_image_9_unidades = cv.cvtColor(crop_image_9_unidades, cv.COLOR_BGR2GRAY)
            crop_image_9_unidades = cv.threshold(crop_image_9_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_unidades = pytesseract.image_to_string(
                crop_image_9_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_9_unidades == "" or result_9_unidades[0] == str(4) \
                    or result_9_unidades[0:2] == str(28) or result_9_unidades[0:2] == str(29) or result_9_unidades[0:1] == str(0):
                crop_image_9_unidades = crop_image_9[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_9_unidades = cv.fastNlMeansDenoisingColored(crop_image_9_unidades, None, 10, 10, 7, 21)
                kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_9_unidades = cv.morphologyEx(crop_image_9_unidades, cv.MORPH_CLOSE, kernel_9)
                crop_image_9_unidades = cv.cvtColor(crop_image_9_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_9_unidades = pytesseract.image_to_string(
                    crop_image_9_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_9_unidades[0:1] == str(0):
                    crop_image_9_unidades = crop_image_9[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_9_unidades = cv.fastNlMeansDenoisingColored(crop_image_9_unidades, None, 10, 10, 7, 21)
                    kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_9_unidades = cv.morphologyEx(crop_image_9_unidades, cv.MORPH_CLOSE, kernel_9)
                    crop_image_9_unidades = cv.cvtColor(crop_image_9_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_9_unidades = pytesseract.image_to_string(
                        crop_image_9_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_9_unidades)
                sheet.write('A170', result_9_unidades)
            # cliche_9
            crop_image_9_cliche = crop_image_9[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_9_cliche = cv.cvtColor(crop_image_9_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_cliche = pytesseract.image_to_string(
                crop_image_9_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_cliche)
                sheet.write('A171', result_9_cliche)
            # Tinta_9
            crop_image_9_tinta = crop_image_9[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_9_tinta = cv.fastNlMeansDenoisingColored(crop_image_9_tinta, None, 10, 10, 7, 21)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_tinta = cv.morphologyEx(crop_image_9_tinta, cv.MORPH_CLOSE, kernel_9)
            crop_image_9_tinta = cv.cvtColor(crop_image_9_tinta, cv.COLOR_BGR2GRAY)
            crop_image_9_tinta = cv.threshold(crop_image_9_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_tinta = pytesseract.image_to_string(
                crop_image_9_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_tinta)
                sheet.write('A172', result_9_tinta)
            # n_cores_9
            crop_image_9_n_cores = crop_image_9[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_9_n_cores = cv.fastNlMeansDenoisingColored(crop_image_9_n_cores, None, 10, 10, 7, 21)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_n_cores = cv.morphologyEx(crop_image_9_n_cores, cv.MORPH_CLOSE, kernel_9)
            crop_image_9_n_cores = cv.cvtColor(crop_image_9_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_9_n_cores = cv.threshold(crop_image_9_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_n_cores = pytesseract.image_to_string(
                crop_image_9_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_n_cores)
                sheet.write('A173', result_9_n_cores)
            # n_caixas_9
            crop_image_9_n_caixas = crop_image_9[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_n_caixas = pytesseract.image_to_string(crop_image_9_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_n_caixas)
                sheet.write('A174', result_9_n_caixas)
            # tipo_clientes_9
            crop_image_9_tipo_clientes = crop_image_9[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_9_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_9_tipo_clientes, None, 10, 10, 7, 21)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_tipo_clientes = cv.morphologyEx(crop_image_9_tipo_clientes, cv.MORPH_CLOSE, kernel_9)
            crop_image_9_tipo_clientes = cv.cvtColor(crop_image_9_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_tipo_clientes = pytesseract.image_to_string(
                crop_image_9_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_tipo_clientes)
                sheet.write('A175', result_9_tipo_clientes)
            # Servicos_9
            crop_image_9_servicos_1 = crop_image_9[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_servicos_1 = pytesseract.image_to_string(crop_image_9_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_servicos_1)
                sheet.write('A176', result_9_servicos_1)
            # Servicos_2_9
            crop_image_9_servicos_2 = crop_image_9[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_servicos_2 = pytesseract.image_to_string(crop_image_9_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_servicos_2)
                sheet.write('A177', result_9_servicos_2)
            # Caixas_1_9
            crop_image_9_caixas = crop_image_9[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_9_caixas = cv.cvtColor(crop_image_9_caixas, cv.COLOR_BGR2GRAY)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_caixas = cv.morphologyEx(crop_image_9_caixas, cv.MORPH_CLOSE, kernel_9)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_caixas = pytesseract.image_to_string(crop_image_9_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_caixas)
                sheet.write('A178', result_9_caixas)
            # Total_9
            crop_image_9_total = crop_image_9[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_9_total = cv.cvtColor(crop_image_9_total, cv.COLOR_BGR2GRAY)
            crop_image_9_total = cv.threshold(crop_image_9_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_total = cv.morphologyEx(crop_image_9_total, cv.MORPH_CLOSE, kernel_9)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_total = pytesseract.image_to_string(crop_image_9_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_total)
                sheet.write('A179', result_9_total)
                if result_9_total[0:1] == str(9):
                    crop_image_9_total = crop_image_9[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_9_total = cv.cvtColor(crop_image_9_total, cv.COLOR_BGR2GRAY)
                    kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_9_total = cv.morphologyEx(crop_image_9_total, cv.MORPH_CLOSE, kernel_9)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_9_total = pytesseract.image_to_string(crop_image_9_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_9_total)
                        sheet.write('A179', result_9_total)
            # Espessura_9
            crop_image_9_espessura = crop_image_9[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_espessura = pytesseract.image_to_string(crop_image_9_espessura,
                                                             config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_espessura)
                sheet.write('A180', result_9_espessura)
            # Cor_1_9
            crop_image_9_1_cor = crop_image_9[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_9_1_cor = cv.fastNlMeansDenoisingColored(crop_image_9_1_cor, None, 10, 10, 7, 21)
            crop_image_9_1_cor = cv.cvtColor(crop_image_9_1_cor, cv.COLOR_BGR2GRAY)
            kernel_9_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_1_cor = cv.morphologyEx(crop_image_9_1_cor, cv.MORPH_CLOSE, kernel_9_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_1_cor = pytesseract.image_to_string(
                crop_image_9_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_1_cor)
                sheet.write('B181', result_9_1_cor)
            # Cor_2_9
            crop_image_9_2_cor = crop_image_9[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_9_2_cor = cv.fastNlMeansDenoisingColored(crop_image_9_2_cor, None, 10, 10, 7, 21)
            crop_image_9_2_cor = cv.cvtColor(crop_image_9_2_cor, cv.COLOR_BGR2GRAY)
            kernel_9_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_2_cor = cv.morphologyEx(crop_image_9_2_cor, cv.MORPH_CLOSE, kernel_9_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_2_cor = pytesseract.image_to_string(
                crop_image_9_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_2_cor)
                sheet.write('C181', result_9_2_cor)
            # Cor_3_9
            crop_image_9_3_cor = crop_image_9[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_9_3_cor = cv.fastNlMeansDenoisingColored(crop_image_9_3_cor, None, 10, 10, 7, 21)
            crop_image_9_3_cor = cv.cvtColor(crop_image_9_3_cor, cv.COLOR_BGR2GRAY)
            kernel_9_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_3_cor = cv.morphologyEx(crop_image_9_3_cor, cv.MORPH_CLOSE, kernel_9_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_3_cor = pytesseract.image_to_string(
                crop_image_9_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_3_cor)
                sheet.write('D181', result_9_3_cor)
            # Cor_4_9
            crop_image_9_4_cor = crop_image_9[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_9_4_cor = cv.fastNlMeansDenoisingColored(crop_image_9_4_cor, None, 10, 10, 7, 21)
            crop_image_9_4_cor = cv.cvtColor(crop_image_9_4_cor, cv.COLOR_BGR2GRAY)
            kernel_9_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_4_cor = cv.morphologyEx(crop_image_9_4_cor, cv.MORPH_CLOSE, kernel_9_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_4_cor = pytesseract.image_to_string(
                crop_image_9_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_4_cor)
                sheet.write('E181', result_9_4_cor)

            # Cor_5_9
            crop_image_9_5_cor = crop_image_9[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_9_5_cor = cv.fastNlMeansDenoisingColored(crop_image_9_5_cor, None, 10, 10, 7, 21)
            crop_image_9_5_cor = cv.cvtColor(crop_image_9_5_cor, cv.COLOR_BGR2GRAY)
            kernel_9_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_5_cor = cv.morphologyEx(crop_image_9_5_cor, cv.MORPH_CLOSE, kernel_9_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_5_cor = pytesseract.image_to_string(
                crop_image_9_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_5_cor)
                sheet.write('F181', result_9_5_cor)

            # Cor_6_9
            crop_image_9_6_cor = crop_image_9[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_9_6_cor = cv.fastNlMeansDenoisingColored(crop_image_9_6_cor, None, 10, 10, 7, 21)
            crop_image_9_6_cor = cv.cvtColor(crop_image_9_6_cor, cv.COLOR_BGR2GRAY)
            kernel_9_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_6_cor = cv.morphologyEx(crop_image_9_6_cor, cv.MORPH_CLOSE, kernel_9_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_6_cor = pytesseract.image_to_string(
                crop_image_9_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_6_cor)
                sheet.write('G181', result_9_6_cor)

            # Cor_fabricada_9
            crop_image_9_fabricada_cor = crop_image_9[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_9_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_9_fabricada_cor, None, 10, 10, 7, 21)
            crop_image_9_fabricada_cor = cv.cvtColor(crop_image_9_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_9_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_fabricada_cor = cv.morphologyEx(crop_image_9_fabricada_cor, cv.MORPH_CLOSE, kernel_9_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_9_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H181', result_fabricada_cor)
        if 10 <= numero_quadros:
            crop_image_10 = img1[novo_y_1 * 9:novo_y_1 * 10]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_10
            crop_image_10_dimensoes = crop_image_10[q + 60:a - 20, z:p]
            crop_image_10_dimensoes = cv.cvtColor(crop_image_10_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_dimensoes = pytesseract.image_to_string(crop_image_10_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_dimensoes)
                sheet.write('A190', result_10_dimensoes)
            # Unidades_10
            crop_image_10_unidades = crop_image_10[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_10_unidades = cv.fastNlMeansDenoisingColored(crop_image_10_unidades, None, 10, 10, 7, 21)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_unidades = cv.morphologyEx(crop_image_10_unidades, cv.MORPH_CLOSE, kernel_10)
            crop_image_10_unidades = cv.cvtColor(crop_image_10_unidades, cv.COLOR_BGR2GRAY)
            crop_image_10_unidades = cv.threshold(crop_image_10_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_unidades = pytesseract.image_to_string(
                crop_image_10_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_10_unidades == "" or result_10_unidades[0] == str(4) \
                    or result_10_unidades[0:2] == str(28) or result_10_unidades[0:2] == str(29) or result_10_unidades[0:1] == str(0):
                crop_image_10_unidades = crop_image_10[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_10_unidades = cv.fastNlMeansDenoisingColored(crop_image_10_unidades, None, 10, 10, 7, 21)
                kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_10_unidades = cv.morphologyEx(crop_image_10_unidades, cv.MORPH_CLOSE, kernel_10)
                crop_image_10_unidades = cv.cvtColor(crop_image_10_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_10_unidades = pytesseract.image_to_string(
                    crop_image_10_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_10_unidades[0:1] == str(0):
                    crop_image_10_unidades = crop_image_10[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_10_unidades = cv.fastNlMeansDenoisingColored(crop_image_10_unidades, None, 10, 10, 7, 21)
                    kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_10_unidades = cv.morphologyEx(crop_image_10_unidades, cv.MORPH_CLOSE, kernel_10)
                    crop_image_10_unidades = cv.cvtColor(crop_image_10_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_10_unidades = pytesseract.image_to_string(
                        crop_image_10_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_10_unidades)
                sheet.write('A191', result_10_unidades)
            # cliche_10
            crop_image_10_cliche = crop_image_10[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_10_cliche = cv.cvtColor(crop_image_10_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_cliche = pytesseract.image_to_string(
                crop_image_10_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_cliche)
                sheet.write('A192', result_10_cliche)
            # Tinta_10
            crop_image_10_tinta = crop_image_10[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_10_tinta = cv.fastNlMeansDenoisingColored(crop_image_10_tinta, None, 10, 10, 7, 21)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_tinta = cv.morphologyEx(crop_image_10_tinta, cv.MORPH_CLOSE, kernel_10)
            crop_image_10_tinta = cv.cvtColor(crop_image_10_tinta, cv.COLOR_BGR2GRAY)
            crop_image_10_tinta = cv.threshold(crop_image_10_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_tinta = pytesseract.image_to_string(
                crop_image_10_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_tinta)
                sheet.write('A193', result_10_tinta)
            # n_cores_10
            crop_image_10_n_cores = crop_image_10[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_10_n_cores = cv.fastNlMeansDenoisingColored(crop_image_10_n_cores, None, 10, 10, 7, 21)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_n_cores = cv.morphologyEx(crop_image_10_n_cores, cv.MORPH_CLOSE, kernel_10)
            crop_image_10_n_cores = cv.cvtColor(crop_image_10_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_10_n_cores = cv.threshold(crop_image_10_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_n_cores = pytesseract.image_to_string(
                crop_image_10_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_n_cores)
                sheet.write('A194', result_10_n_cores)
            # n_caixas_10
            crop_image_10_n_caixas = crop_image_10[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_n_caixas = pytesseract.image_to_string(crop_image_10_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_n_caixas)
                sheet.write('A195', result_10_n_caixas)
            # tipo_clientes_10
            crop_image_10_tipo_clientes = crop_image_10[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_10_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_10_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_tipo_clientes = cv.morphologyEx(crop_image_10_tipo_clientes, cv.MORPH_CLOSE, kernel_10)
            crop_image_10_tipo_clientes = cv.cvtColor(crop_image_10_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_tipo_clientes = pytesseract.image_to_string(
                crop_image_10_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_tipo_clientes)
                sheet.write('A196', result_10_tipo_clientes)
            # Servicos_10
            crop_image_10_servicos_1 = crop_image_10[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_servicos_1 = pytesseract.image_to_string(crop_image_10_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_servicos_1)
                sheet.write('A197', result_10_servicos_1)
            # Servicos_2_10
            crop_image_10_servicos_2 = crop_image_10[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_servicos_2 = pytesseract.image_to_string(crop_image_10_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_servicos_2)
                sheet.write('A198', result_10_servicos_2)
            # Caixas_1_10
            crop_image_10_caixas = crop_image_10[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_10_caixas = cv.cvtColor(crop_image_10_caixas, cv.COLOR_BGR2GRAY)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_caixas = cv.morphologyEx(crop_image_10_caixas, cv.MORPH_CLOSE, kernel_10)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_caixas = pytesseract.image_to_string(crop_image_10_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_caixas)
                sheet.write('A199', result_10_caixas)
            # Total_10
            crop_image_10_total = crop_image_10[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_10_total = cv.cvtColor(crop_image_10_total, cv.COLOR_BGR2GRAY)
            crop_image_10_total = cv.threshold(crop_image_10_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_total = cv.morphologyEx(crop_image_10_total, cv.MORPH_CLOSE, kernel_10)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_total = pytesseract.image_to_string(crop_image_10_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_total)
                sheet.write('A200', result_10_total)
                if result_10_total[0:1] == str(9):
                    crop_image_10_total = crop_image_10[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_10_total = cv.cvtColor(crop_image_10_total, cv.COLOR_BGR2GRAY)
                    kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_10_total = cv.morphologyEx(crop_image_10_total, cv.MORPH_CLOSE, kernel_10)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_10_total = pytesseract.image_to_string(crop_image_10_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_10_total)
                        sheet.write('A200', result_10_total)
            # Espessura_10
            crop_image_10_espessura = crop_image_10[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_espessura = pytesseract.image_to_string(crop_image_10_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_espessura)
                sheet.write('A201', result_10_espessura)
            # Cor_1_10
            crop_image_10_1_cor = crop_image_10[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_10_1_cor = cv.fastNlMeansDenoisingColored(crop_image_10_1_cor, None, 10, 10, 7, 21)
            crop_image_10_1_cor = cv.cvtColor(crop_image_10_1_cor, cv.COLOR_BGR2GRAY)
            kernel_10_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_1_cor = cv.morphologyEx(crop_image_10_1_cor, cv.MORPH_CLOSE, kernel_10_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_1_cor = pytesseract.image_to_string(
                crop_image_10_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_1_cor)
                sheet.write('B202', result_10_1_cor)
            # Cor_2_10
            crop_image_10_2_cor = crop_image_10[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_10_2_cor = cv.fastNlMeansDenoisingColored(crop_image_10_2_cor, None, 10, 10, 7, 21)
            crop_image_10_2_cor = cv.cvtColor(crop_image_10_2_cor, cv.COLOR_BGR2GRAY)
            kernel_10_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_2_cor = cv.morphologyEx(crop_image_10_2_cor, cv.MORPH_CLOSE, kernel_10_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_2_cor = pytesseract.image_to_string(
                crop_image_10_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_2_cor)
                sheet.write('C202', result_10_2_cor)
            # Cor_3_10
            crop_image_10_3_cor = crop_image_10[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_10_3_cor = cv.fastNlMeansDenoisingColored(crop_image_10_3_cor, None, 10, 10, 7, 21)
            crop_image_10_3_cor = cv.cvtColor(crop_image_10_3_cor, cv.COLOR_BGR2GRAY)
            kernel_10_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_3_cor = cv.morphologyEx(crop_image_10_3_cor, cv.MORPH_CLOSE, kernel_10_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_3_cor = pytesseract.image_to_string(
                crop_image_10_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_3_cor)
                sheet.write('D202', result_10_3_cor)
            # Cor_4_10
            crop_image_10_4_cor = crop_image_10[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_10_4_cor = cv.fastNlMeansDenoisingColored(crop_image_10_4_cor, None, 10, 10, 7, 21)
            crop_image_10_4_cor = cv.cvtColor(crop_image_10_4_cor, cv.COLOR_BGR2GRAY)
            kernel_10_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_4_cor = cv.morphologyEx(crop_image_10_4_cor, cv.MORPH_CLOSE, kernel_10_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_4_cor = pytesseract.image_to_string(
                crop_image_10_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_4_cor)
                sheet.write('E202', result_10_4_cor)
            # Cor_5_10
            crop_image_10_5_cor = crop_image_10[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_10_5_cor = cv.fastNlMeansDenoisingColored(crop_image_10_5_cor, None, 10, 10, 7, 21)
            crop_image_10_5_cor = cv.cvtColor(crop_image_10_5_cor, cv.COLOR_BGR2GRAY)
            kernel_10_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_5_cor = cv.morphologyEx(crop_image_10_5_cor, cv.MORPH_CLOSE, kernel_10_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_5_cor = pytesseract.image_to_string(
                crop_image_10_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_5_cor)
                sheet.write('F202', result_10_5_cor)

            # Cor_6_10
            crop_image_10_6_cor = crop_image_10[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_10_6_cor = cv.fastNlMeansDenoisingColored(crop_image_10_6_cor, None, 10, 10, 7, 21)
            crop_image_10_6_cor = cv.cvtColor(crop_image_10_6_cor, cv.COLOR_BGR2GRAY)
            kernel_10_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_6_cor = cv.morphologyEx(crop_image_10_6_cor, cv.MORPH_CLOSE, kernel_10_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_6_cor = pytesseract.image_to_string(
                crop_image_10_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_6_cor)
                sheet.write('G202', result_10_6_cor)
            # Cor_fabricada_10
            crop_image_10_fabricada_cor = crop_image_10[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_10_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_10_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_10_fabricada_cor = cv.cvtColor(crop_image_10_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_10_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_fabricada_cor = cv.morphologyEx(crop_image_10_fabricada_cor, cv.MORPH_CLOSE, kernel_10_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_10_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H202', result_fabricada_cor)
        if 11 <= numero_quadros:
            crop_image_11 = img1[novo_y_1 * 10:novo_y_1 * 11]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_11
            crop_image_11_dimensoes = crop_image_11[q + 60:a - 20, z:p]
            crop_image_11_dimensoes = cv.cvtColor(crop_image_11_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_dimensoes = pytesseract.image_to_string(crop_image_11_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_dimensoes)
                sheet.write('A211', result_11_dimensoes)
            # Unidades_11
            crop_image_11_unidades = crop_image_11[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_11_unidades = cv.fastNlMeansDenoisingColored(crop_image_11_unidades, None, 10, 10, 7, 21)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_unidades = cv.morphologyEx(crop_image_11_unidades, cv.MORPH_CLOSE, kernel_11)
            crop_image_11_unidades = cv.cvtColor(crop_image_11_unidades, cv.COLOR_BGR2GRAY)
            crop_image_11_unidades = cv.threshold(crop_image_11_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_unidades = pytesseract.image_to_string(
                crop_image_11_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_11_unidades == "" or result_11_unidades[0] == str(4) \
                    or result_11_unidades[0:2] == str(28) or result_11_unidades[0:2] == str(29) or result_11_unidades[0:1] == str(0):
                crop_image_11_unidades = crop_image_11[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_11_unidades = cv.fastNlMeansDenoisingColored(crop_image_11_unidades, None, 10, 10, 7, 21)
                kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_11_unidades = cv.morphologyEx(crop_image_11_unidades, cv.MORPH_CLOSE, kernel_11)
                crop_image_11_unidades = cv.cvtColor(crop_image_11_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_11_unidades = pytesseract.image_to_string(
                    crop_image_11_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_11_unidades[0:1] == str(0):
                    crop_image_11_unidades = crop_image_11[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_11_unidades = cv.fastNlMeansDenoisingColored(crop_image_11_unidades, None, 10, 10, 7, 21)
                    kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_11_unidades = cv.morphologyEx(crop_image_11_unidades, cv.MORPH_CLOSE, kernel_11)
                    crop_image_11_unidades = cv.cvtColor(crop_image_11_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_11_unidades = pytesseract.image_to_string(
                        crop_image_11_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_11_unidades)
                sheet.write('A212', result_11_unidades)
            # cliche_11
            crop_image_11_cliche = crop_image_11[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_11_cliche = cv.cvtColor(crop_image_11_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_cliche = pytesseract.image_to_string(
                crop_image_11_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_cliche)
                sheet.write('A213', result_11_cliche)
            # Tinta_11
            crop_image_11_tinta = crop_image_11[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_11_tinta = cv.fastNlMeansDenoisingColored(crop_image_11_tinta, None, 10, 10, 7, 21)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_tinta = cv.morphologyEx(crop_image_11_tinta, cv.MORPH_CLOSE, kernel_11)
            crop_image_11_tinta = cv.cvtColor(crop_image_11_tinta, cv.COLOR_BGR2GRAY)
            crop_image_11_tinta = cv.threshold(crop_image_11_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_tinta = pytesseract.image_to_string(
                crop_image_11_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_tinta)
                sheet.write('A214', result_11_tinta)
            # n_cores_11
            crop_image_11_n_cores = crop_image_11[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_11_n_cores = cv.fastNlMeansDenoisingColored(crop_image_11_n_cores, None, 10, 10, 7, 21)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_n_cores = cv.morphologyEx(crop_image_11_n_cores, cv.MORPH_CLOSE, kernel_11)
            crop_image_11_n_cores = cv.cvtColor(crop_image_11_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_11_n_cores = cv.threshold(crop_image_11_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_n_cores = pytesseract.image_to_string(
                crop_image_11_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_n_cores)
                sheet.write('A215', result_11_n_cores)
            # n_caixas_11
            crop_image_11_n_caixas = crop_image_11[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_n_caixas = pytesseract.image_to_string(crop_image_11_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_n_caixas)
                sheet.write('A216', result_11_n_caixas)
            # tipo_clientes_11
            crop_image_11_tipo_clientes = crop_image_11[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_11_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_11_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_tipo_clientes = cv.morphologyEx(crop_image_11_tipo_clientes, cv.MORPH_CLOSE, kernel_11)
            crop_image_11_tipo_clientes = cv.cvtColor(crop_image_11_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_tipo_clientes = pytesseract.image_to_string(
                crop_image_11_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_tipo_clientes)
                sheet.write('A217', result_11_tipo_clientes)
            # Servicos_11
            crop_image_11_servicos_1 = crop_image_11[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_servicos_1 = pytesseract.image_to_string(crop_image_11_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_servicos_1)
                sheet.write('A218', result_11_servicos_1)
            # Servicos_2_11
            crop_image_11_servicos_2 = crop_image_11[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_servicos_2 = pytesseract.image_to_string(crop_image_11_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_servicos_2)
                sheet.write('A219', result_11_servicos_2)
            # Caixas_1_11
            crop_image_11_caixas = crop_image_11[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_11_caixas = cv.cvtColor(crop_image_11_caixas, cv.COLOR_BGR2GRAY)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_caixas = cv.morphologyEx(crop_image_11_caixas, cv.MORPH_CLOSE, kernel_11)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_caixas = pytesseract.image_to_string(crop_image_11_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_caixas)
                sheet.write('A220', result_11_caixas)
            # Total_11
            crop_image_11_total = crop_image_11[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_11_total = cv.cvtColor(crop_image_11_total, cv.COLOR_BGR2GRAY)
            crop_image_11_total = cv.threshold(crop_image_11_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_total = cv.morphologyEx(crop_image_11_total, cv.MORPH_CLOSE, kernel_11)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_total = pytesseract.image_to_string(crop_image_11_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_total)
                sheet.write('A221', result_11_total)
                if result_11_total[0:1] == str(9):
                    crop_image_11_total = crop_image_11[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_11_total = cv.cvtColor(crop_image_11_total, cv.COLOR_BGR2GRAY)
                    kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_11_total = cv.morphologyEx(crop_image_11_total, cv.MORPH_CLOSE, kernel_11)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_11_total = pytesseract.image_to_string(crop_image_11_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_11_total)
                        sheet.write('A221', result_11_total)

            # Espessura_11
            crop_image_11_espessura = crop_image_11[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_espessura = pytesseract.image_to_string(crop_image_11_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_espessura)
                sheet.write('A222', result_11_espessura)
            # Cor_1_11
            crop_image_11_1_cor = crop_image_11[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_11_1_cor = cv.fastNlMeansDenoisingColored(crop_image_11_1_cor, None, 10, 10, 7, 21)
            crop_image_11_1_cor = cv.cvtColor(crop_image_11_1_cor, cv.COLOR_BGR2GRAY)
            kernel_11_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_1_cor = cv.morphologyEx(crop_image_11_1_cor, cv.MORPH_CLOSE, kernel_11_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_1_cor = pytesseract.image_to_string(
                crop_image_11_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_1_cor)
                sheet.write('B223', result_11_1_cor)
            # Cor_2_11
            crop_image_11_2_cor = crop_image_11[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_11_2_cor = cv.fastNlMeansDenoisingColored(crop_image_11_2_cor, None, 10, 10, 7, 21)
            crop_image_11_2_cor = cv.cvtColor(crop_image_11_2_cor, cv.COLOR_BGR2GRAY)
            kernel_11_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_2_cor = cv.morphologyEx(crop_image_11_2_cor, cv.MORPH_CLOSE, kernel_11_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_2_cor = pytesseract.image_to_string(
                crop_image_11_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_2_cor)
                sheet.write('C223', result_11_2_cor)
            # Cor_3_11
            crop_image_11_3_cor = crop_image_11[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_11_3_cor = cv.fastNlMeansDenoisingColored(crop_image_11_3_cor, None, 10, 10, 7, 21)
            crop_image_11_3_cor = cv.cvtColor(crop_image_11_3_cor, cv.COLOR_BGR2GRAY)
            kernel_11_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_3_cor = cv.morphologyEx(crop_image_11_3_cor, cv.MORPH_CLOSE, kernel_11_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_3_cor = pytesseract.image_to_string(
                crop_image_11_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_3_cor)
                sheet.write('D223', result_11_3_cor)
            # Cor_4_11
            crop_image_11_4_cor = crop_image_11[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_11_4_cor = cv.fastNlMeansDenoisingColored(crop_image_11_4_cor, None, 10, 10, 7, 21)
            crop_image_11_4_cor = cv.cvtColor(crop_image_11_4_cor, cv.COLOR_BGR2GRAY)
            kernel_11_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_4_cor = cv.morphologyEx(crop_image_11_4_cor, cv.MORPH_CLOSE, kernel_11_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_4_cor = pytesseract.image_to_string(
                crop_image_11_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_4_cor)
                sheet.write('E223', result_11_4_cor)
            # Cor_5_11
            crop_image_11_5_cor = crop_image_11[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_11_5_cor = cv.fastNlMeansDenoisingColored(crop_image_11_5_cor, None, 10, 10, 7, 21)
            crop_image_11_5_cor = cv.cvtColor(crop_image_11_5_cor, cv.COLOR_BGR2GRAY)
            kernel_11_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_5_cor = cv.morphologyEx(crop_image_11_5_cor, cv.MORPH_CLOSE, kernel_11_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_5_cor = pytesseract.image_to_string(
                crop_image_11_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_5_cor)
                sheet.write('F223', result_11_5_cor)
            # Cor_6_11
            crop_image_11_6_cor = crop_image_11[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_11_6_cor = cv.fastNlMeansDenoisingColored(crop_image_11_6_cor, None, 10, 10, 7, 21)
            crop_image_11_6_cor = cv.cvtColor(crop_image_11_6_cor, cv.COLOR_BGR2GRAY)
            kernel_11_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_6_cor = cv.morphologyEx(crop_image_11_6_cor, cv.MORPH_CLOSE, kernel_11_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_6_cor = pytesseract.image_to_string(
                crop_image_11_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_6_cor)
                sheet.write('G223', result_11_6_cor)

            # Cor_fabricada_11
            crop_image_11_fabricada_cor = crop_image_11[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_11_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_11_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_11_fabricada_cor = cv.cvtColor(crop_image_11_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_11_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_fabricada_cor = cv.morphologyEx(crop_image_11_fabricada_cor, cv.MORPH_CLOSE, kernel_11_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_11_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H223', result_fabricada_cor)
        if 12 <= numero_quadros:
            crop_image_12 = img1[novo_y_1 * 11:novo_y_1 * 12]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_12
            crop_image_12_dimensoes = crop_image_12[q + 60:a - 20, z:p]
            crop_image_12_dimensoes = cv.cvtColor(crop_image_12_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_dimensoes = pytesseract.image_to_string(crop_image_12_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_dimensoes)
                sheet.write('A232', result_12_dimensoes)
            # Unidades_12
            crop_image_12_unidades = crop_image_12[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_12_unidades = cv.fastNlMeansDenoisingColored(crop_image_12_unidades, None, 10, 10, 7, 21)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_unidades = cv.morphologyEx(crop_image_12_unidades, cv.MORPH_CLOSE, kernel_12)
            crop_image_12_unidades = cv.cvtColor(crop_image_12_unidades, cv.COLOR_BGR2GRAY)
            crop_image_12_unidades = cv.threshold(crop_image_12_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_unidades = pytesseract.image_to_string(
                crop_image_12_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_12_unidades == "" or result_12_unidades[0] == str(4) \
                    or result_12_unidades[0:2] == str(28) or result_12_unidades[0:2] == str(29) or result_12_unidades[0:1] == str(0):
                crop_image_12_unidades = crop_image_12[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_12_unidades = cv.fastNlMeansDenoisingColored(crop_image_12_unidades, None, 10, 10, 7, 21)
                kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_12_unidades = cv.morphologyEx(crop_image_12_unidades, cv.MORPH_CLOSE, kernel_12)
                crop_image_12_unidades = cv.cvtColor(crop_image_12_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_12_unidades = pytesseract.image_to_string(
                    crop_image_12_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_12_unidades[0:1] == str(0):
                    crop_image_12_unidades = crop_image_12[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_12_unidades = cv.fastNlMeansDenoisingColored(crop_image_12_unidades, None, 10, 10, 7, 21)
                    kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_12_unidades = cv.morphologyEx(crop_image_12_unidades, cv.MORPH_CLOSE, kernel_12)
                    crop_image_12_unidades = cv.cvtColor(crop_image_12_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_12_unidades = pytesseract.image_to_string(
                        crop_image_12_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_12_unidades)
                sheet.write('A233', result_12_unidades)
            # cliche_12
            crop_image_12_cliche = crop_image_12[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_12_cliche = cv.cvtColor(crop_image_12_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_cliche = pytesseract.image_to_string(
                crop_image_12_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_cliche)
                sheet.write('A234', result_12_cliche)
            # Tinta_12
            crop_image_12_tinta = crop_image_12[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_12_tinta = cv.fastNlMeansDenoisingColored(crop_image_12_tinta, None, 10, 10, 7, 21)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_tinta = cv.morphologyEx(crop_image_12_tinta, cv.MORPH_CLOSE, kernel_12)
            crop_image_12_tinta = cv.cvtColor(crop_image_12_tinta, cv.COLOR_BGR2GRAY)
            crop_image_12_tinta = cv.threshold(crop_image_12_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_tinta = pytesseract.image_to_string(
                crop_image_12_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_tinta)
                sheet.write('A235', result_12_tinta)
            # n_cores_12
            crop_image_12_n_cores = crop_image_12[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_12_n_cores = cv.fastNlMeansDenoisingColored(crop_image_12_n_cores, None, 10, 10, 7, 21)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_n_cores = cv.morphologyEx(crop_image_12_n_cores, cv.MORPH_CLOSE, kernel_12)
            crop_image_12_n_cores = cv.cvtColor(crop_image_12_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_12_n_cores = cv.threshold(crop_image_12_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_n_cores = pytesseract.image_to_string(
                crop_image_12_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_n_cores)
                sheet.write('A236', result_12_n_cores)
            # n_caixas_12
            crop_image_12_n_caixas = crop_image_12[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_n_caixas = pytesseract.image_to_string(crop_image_12_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_n_caixas)
                sheet.write('A237', result_12_n_caixas)
            # tipo_clientes_12
            crop_image_12_tipo_clientes = crop_image_12[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_12_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_12_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_tipo_clientes = cv.morphologyEx(crop_image_12_tipo_clientes, cv.MORPH_CLOSE, kernel_12)
            crop_image_12_tipo_clientes = cv.cvtColor(crop_image_12_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_tipo_clientes = pytesseract.image_to_string(
                crop_image_12_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_tipo_clientes)
                sheet.write('A238', result_12_tipo_clientes)
            # Servicos_12
            crop_image_12_servicos_1 = crop_image_12[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_servicos_1 = pytesseract.image_to_string(crop_image_12_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_servicos_1)
                sheet.write('A239', result_12_servicos_1)
            # Servicos_2_12
            crop_image_12_servicos_2 = crop_image_12[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_servicos_2 = pytesseract.image_to_string(crop_image_12_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_servicos_2)
                sheet.write('A240', result_12_servicos_2)
            # Caixas_1_12
            crop_image_12_caixas = crop_image_12[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_12_caixas = cv.cvtColor(crop_image_12_caixas, cv.COLOR_BGR2GRAY)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_caixas = cv.morphologyEx(crop_image_12_caixas, cv.MORPH_CLOSE, kernel_12)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_caixas = pytesseract.image_to_string(crop_image_12_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_caixas)
                sheet.write('A241', result_12_caixas)
            # Total_12
            crop_image_12_total = crop_image_12[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_12_total = cv.cvtColor(crop_image_12_total, cv.COLOR_BGR2GRAY)
            crop_image_12_total = cv.threshold(crop_image_12_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_total = cv.morphologyEx(crop_image_12_total, cv.MORPH_CLOSE, kernel_12)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_total = pytesseract.image_to_string(crop_image_12_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_total)
                sheet.write('A242', result_12_total)
                if result_12_total[0:1] == str(9):
                    crop_image_12_total = crop_image_12[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_12_total = cv.cvtColor(crop_image_12_total, cv.COLOR_BGR2GRAY)
                    kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_12_total = cv.morphologyEx(crop_image_12_total, cv.MORPH_CLOSE, kernel_12)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_12_total = pytesseract.image_to_string(crop_image_12_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_12_total)
                        sheet.write('A242', result_12_total)
            # Espessura_12
            crop_image_12_espessura = crop_image_12[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_espessura = pytesseract.image_to_string(crop_image_12_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_espessura)
                sheet.write('A243', result_12_espessura)
            # Cor_1_12
            crop_image_12_1_cor = crop_image_12[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_12_1_cor = cv.fastNlMeansDenoisingColored(crop_image_12_1_cor, None, 10, 10, 7, 21)
            crop_image_12_1_cor = cv.cvtColor(crop_image_12_1_cor, cv.COLOR_BGR2GRAY)
            kernel_12_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_1_cor = cv.morphologyEx(crop_image_12_1_cor, cv.MORPH_CLOSE, kernel_12_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_1_cor = pytesseract.image_to_string(
                crop_image_12_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_1_cor)
                sheet.write('B244', result_12_1_cor)
            # Cor_2_12
            crop_image_12_2_cor = crop_image_12[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_12_2_cor = cv.fastNlMeansDenoisingColored(crop_image_12_2_cor, None, 10, 10, 7, 21)
            crop_image_12_2_cor = cv.cvtColor(crop_image_12_2_cor, cv.COLOR_BGR2GRAY)
            kernel_12_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_2_cor = cv.morphologyEx(crop_image_12_2_cor, cv.MORPH_CLOSE, kernel_12_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_2_cor = pytesseract.image_to_string(
                crop_image_12_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_2_cor)
                sheet.write('C244', result_12_2_cor)
            # Cor_3_12
            crop_image_12_3_cor = crop_image_12[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_12_3_cor = cv.fastNlMeansDenoisingColored(crop_image_12_3_cor, None, 10, 10, 7, 21)
            crop_image_12_3_cor = cv.cvtColor(crop_image_12_3_cor, cv.COLOR_BGR2GRAY)
            kernel_12_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_3_cor = cv.morphologyEx(crop_image_12_3_cor, cv.MORPH_CLOSE, kernel_12_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_3_cor = pytesseract.image_to_string(
                crop_image_12_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_3_cor)
                sheet.write('D244', result_12_3_cor)
            # Cor_4_12
            crop_image_12_4_cor = crop_image_12[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_12_4_cor = cv.fastNlMeansDenoisingColored(crop_image_12_4_cor, None, 10, 10, 7, 21)
            crop_image_12_4_cor = cv.cvtColor(crop_image_12_4_cor, cv.COLOR_BGR2GRAY)
            kernel_12_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_4_cor = cv.morphologyEx(crop_image_12_4_cor, cv.MORPH_CLOSE, kernel_12_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_4_cor = pytesseract.image_to_string(
                crop_image_12_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_4_cor)
                sheet.write('E244', result_12_4_cor)
            # Cor_5_12
            crop_image_12_5_cor = crop_image_12[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_12_5_cor = cv.fastNlMeansDenoisingColored(crop_image_12_5_cor, None, 10, 10, 7, 21)
            crop_image_12_5_cor = cv.cvtColor(crop_image_12_5_cor, cv.COLOR_BGR2GRAY)
            kernel_12_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_5_cor = cv.morphologyEx(crop_image_12_5_cor, cv.MORPH_CLOSE, kernel_12_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_5_cor = pytesseract.image_to_string(
                crop_image_12_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_5_cor)
                sheet.write('F244', result_12_5_cor)
            # Cor_6_12
            crop_image_12_6_cor = crop_image_12[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_12_6_cor = cv.fastNlMeansDenoisingColored(crop_image_12_6_cor, None, 10, 10, 7, 21)
            crop_image_12_6_cor = cv.cvtColor(crop_image_12_6_cor, cv.COLOR_BGR2GRAY)
            kernel_12_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_6_cor = cv.morphologyEx(crop_image_12_6_cor, cv.MORPH_CLOSE, kernel_12_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_6_cor = pytesseract.image_to_string(
                crop_image_12_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_6_cor)
                sheet.write('G244', result_12_6_cor)
            # Cor_fabricada_12
            crop_image_12_fabricada_cor = crop_image_12[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_12_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_12_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_12_fabricada_cor = cv.cvtColor(crop_image_12_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_12_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_fabricada_cor = cv.morphologyEx(crop_image_12_fabricada_cor, cv.MORPH_CLOSE, kernel_12_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_12_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H244', result_fabricada_cor)
        if 13 <= numero_quadros:
            crop_image_13 = img1[novo_y_1 * 12:novo_y_1 * 13]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_13
            crop_image_13_dimensoes = crop_image_13[q + 60:a - 20, z:p]
            crop_image_13_dimensoes = cv.cvtColor(crop_image_13_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_dimensoes = pytesseract.image_to_string(crop_image_13_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_dimensoes)
                sheet.write('A253', result_13_dimensoes)
            # Unidades_13
            crop_image_13_unidades = crop_image_13[(q + (413 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_13_unidades = cv.fastNlMeansDenoisingColored(crop_image_13_unidades, None, 10, 10, 7, 21)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_unidades = cv.morphologyEx(crop_image_13_unidades, cv.MORPH_CLOSE, kernel_13)
            crop_image_13_unidades = cv.cvtColor(crop_image_13_unidades, cv.COLOR_BGR2GRAY)
            crop_image_13_unidades = cv.threshold(crop_image_13_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_unidades = pytesseract.image_to_string(
                crop_image_13_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_13_unidades == "" or result_13_unidades[0] == str(4) \
                    or result_13_unidades[0:2] == str(28) or result_13_unidades[0:2] == str(29) or result_13_unidades[0:1] == str(0):
                crop_image_13_unidades = crop_image_13[(q + (413 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_13_unidades = cv.fastNlMeansDenoisingColored(crop_image_13_unidades, None, 10, 10, 7, 21)
                kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_13_unidades = cv.morphologyEx(crop_image_13_unidades, cv.MORPH_CLOSE, kernel_13)
                crop_image_13_unidades = cv.cvtColor(crop_image_13_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_13_unidades = pytesseract.image_to_string(
                    crop_image_13_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_13_unidades[0:1] == str(0):
                    crop_image_13_unidades = crop_image_13[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_13_unidades = cv.fastNlMeansDenoisingColored(crop_image_13_unidades, None, 10, 10, 7, 21)
                    kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_13_unidades = cv.morphologyEx(crop_image_13_unidades, cv.MORPH_CLOSE, kernel_13)
                    crop_image_13_unidades = cv.cvtColor(crop_image_13_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_13_unidades = pytesseract.image_to_string(
                        crop_image_13_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_13_unidades)
                sheet.write('A254', result_13_unidades)
            # cliche_13
            crop_image_13_cliche = crop_image_13[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_13_cliche = cv.cvtColor(crop_image_13_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_cliche = pytesseract.image_to_string(
                crop_image_13_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_cliche)
                sheet.write('A255', result_13_cliche)
            # Tinta_13
            crop_image_13_tinta = crop_image_13[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_13_tinta = cv.fastNlMeansDenoisingColored(crop_image_13_tinta, None, 10, 10, 7, 21)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_tinta = cv.morphologyEx(crop_image_13_tinta, cv.MORPH_CLOSE, kernel_13)
            crop_image_13_tinta = cv.cvtColor(crop_image_13_tinta, cv.COLOR_BGR2GRAY)
            crop_image_13_tinta = cv.threshold(crop_image_13_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_tinta = pytesseract.image_to_string(
                crop_image_13_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_tinta)
                sheet.write('A256', result_13_tinta)
            # n_cores_13
            crop_image_13_n_cores = crop_image_13[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_13_n_cores = cv.fastNlMeansDenoisingColored(crop_image_13_n_cores, None, 10, 10, 7, 21)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_n_cores = cv.morphologyEx(crop_image_13_n_cores, cv.MORPH_CLOSE, kernel_13)
            crop_image_13_n_cores = cv.cvtColor(crop_image_13_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_13_n_cores = cv.threshold(crop_image_13_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_n_cores = pytesseract.image_to_string(
                crop_image_13_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_n_cores)
                sheet.write('A257', result_13_n_cores)
            # n_caixas_13
            crop_image_13_n_caixas = crop_image_13[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_n_caixas = pytesseract.image_to_string(crop_image_13_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_n_caixas)
                sheet.write('A258', result_13_n_caixas)
            # tipo_clientes_13
            crop_image_13_tipo_clientes = crop_image_13[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_13_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_13_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_tipo_clientes = cv.morphologyEx(crop_image_13_tipo_clientes, cv.MORPH_CLOSE, kernel_13)
            crop_image_13_tipo_clientes = cv.cvtColor(crop_image_13_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_tipo_clientes = pytesseract.image_to_string(
                crop_image_13_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_tipo_clientes)
                sheet.write('A259', result_13_tipo_clientes)
            # Servicos_13
            crop_image_13_servicos_1 = crop_image_13[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_servicos_1 = pytesseract.image_to_string(crop_image_13_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_servicos_1)
                sheet.write('A260', result_13_servicos_1)
            # Servicos_2_13
            crop_image_13_servicos_2 = crop_image_13[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_servicos_2 = pytesseract.image_to_string(crop_image_13_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_servicos_2)
                sheet.write('A261', result_13_servicos_2)
            # Caixas_1_13
            crop_image_13_caixas = crop_image_13[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_13_caixas = cv.cvtColor(crop_image_13_caixas, cv.COLOR_BGR2GRAY)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_caixas = cv.morphologyEx(crop_image_13_caixas, cv.MORPH_CLOSE, kernel_13)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_caixas = pytesseract.image_to_string(crop_image_13_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_caixas)
                sheet.write('A262', result_13_caixas)
            # Total_13
            crop_image_13_total = crop_image_13[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_13_total = cv.cvtColor(crop_image_13_total, cv.COLOR_BGR2GRAY)
            crop_image_13_total = cv.threshold(crop_image_13_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_total = cv.morphologyEx(crop_image_13_total, cv.MORPH_CLOSE, kernel_13)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_total = pytesseract.image_to_string(crop_image_13_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_total)
                sheet.write('A263', result_13_total)
                if result_13_total[0:1] == str(9):
                    crop_image_13_total = crop_image_13[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_13_total = cv.cvtColor(crop_image_13_total, cv.COLOR_BGR2GRAY)
                    kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_13_total = cv.morphologyEx(crop_image_13_total, cv.MORPH_CLOSE, kernel_13)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_13_total = pytesseract.image_to_string(crop_image_13_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_13_total)
                        sheet.write('A263', result_13_total)
            # Espessura_13
            crop_image_13_espessura = crop_image_13[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_espessura = pytesseract.image_to_string(crop_image_13_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_espessura)
                sheet.write('A264', result_13_espessura)
            # Cor_1_13
            crop_image_13_1_cor = crop_image_13[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_13_1_cor = cv.fastNlMeansDenoisingColored(crop_image_13_1_cor, None, 10, 10, 7, 21)
            crop_image_13_1_cor = cv.cvtColor(crop_image_13_1_cor, cv.COLOR_BGR2GRAY)
            kernel_13_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_1_cor = cv.morphologyEx(crop_image_13_1_cor, cv.MORPH_CLOSE, kernel_13_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_1_cor = pytesseract.image_to_string(
                crop_image_13_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_1_cor)
                sheet.write('B265', result_13_1_cor)
            # Cor_2_13
            crop_image_13_2_cor = crop_image_13[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_13_2_cor = cv.fastNlMeansDenoisingColored(crop_image_13_2_cor, None, 10, 10, 7, 21)
            crop_image_13_2_cor = cv.cvtColor(crop_image_13_2_cor, cv.COLOR_BGR2GRAY)
            kernel_13_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_2_cor = cv.morphologyEx(crop_image_13_2_cor, cv.MORPH_CLOSE, kernel_13_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_2_cor = pytesseract.image_to_string(
                crop_image_13_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_2_cor)
                sheet.write('C265', result_13_2_cor)
            # Cor_3_13
            crop_image_13_3_cor = crop_image_13[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_13_3_cor = cv.fastNlMeansDenoisingColored(crop_image_13_3_cor, None, 10, 10, 7, 21)
            crop_image_13_3_cor = cv.cvtColor(crop_image_13_3_cor, cv.COLOR_BGR2GRAY)
            kernel_13_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_3_cor = cv.morphologyEx(crop_image_13_3_cor, cv.MORPH_CLOSE, kernel_13_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_3_cor = pytesseract.image_to_string(
                crop_image_13_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_3_cor)
                sheet.write('D265', result_13_3_cor)
            # Cor_4_13
            crop_image_13_4_cor = crop_image_13[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_13_4_cor = cv.fastNlMeansDenoisingColored(crop_image_13_4_cor, None, 10, 10, 7, 21)
            crop_image_13_4_cor = cv.cvtColor(crop_image_13_4_cor, cv.COLOR_BGR2GRAY)
            kernel_13_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_4_cor = cv.morphologyEx(crop_image_13_4_cor, cv.MORPH_CLOSE, kernel_13_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_4_cor = pytesseract.image_to_string(
                crop_image_13_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_4_cor)
                sheet.write('E265', result_13_4_cor)
            # Cor_5_13
            crop_image_13_5_cor = crop_image_13[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_13_5_cor = cv.fastNlMeansDenoisingColored(crop_image_13_5_cor, None, 10, 10, 7, 21)
            crop_image_13_5_cor = cv.cvtColor(crop_image_13_5_cor, cv.COLOR_BGR2GRAY)
            kernel_13_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_5_cor = cv.morphologyEx(crop_image_13_5_cor, cv.MORPH_CLOSE, kernel_13_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_5_cor = pytesseract.image_to_string(
                crop_image_13_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_5_cor)
                sheet.write('F265', result_13_5_cor)
            # Cor_6_13
            crop_image_13_6_cor = crop_image_13[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_13_6_cor = cv.fastNlMeansDenoisingColored(crop_image_13_6_cor, None, 10, 10, 7, 21)
            crop_image_13_6_cor = cv.cvtColor(crop_image_13_6_cor, cv.COLOR_BGR2GRAY)
            kernel_13_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_6_cor = cv.morphologyEx(crop_image_13_6_cor, cv.MORPH_CLOSE, kernel_13_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_6_cor = pytesseract.image_to_string(
                crop_image_13_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_6_cor)
                sheet.write('G265', result_13_6_cor)
            # Cor_fabricada_13
            crop_image_13_fabricada_cor = crop_image_13[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_13_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_13_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_13_fabricada_cor = cv.cvtColor(crop_image_13_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_13_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_fabricada_cor = cv.morphologyEx(crop_image_13_fabricada_cor, cv.MORPH_CLOSE, kernel_13_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_13_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H265', result_fabricada_cor)
        if 14 <= numero_quadros:
            crop_image_14 = img1[novo_y_1 * 13:novo_y_1 * 14]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_14
            crop_image_14_dimensoes = crop_image_14[q + 60:a - 20, z:p]
            crop_image_14_dimensoes = cv.cvtColor(crop_image_14_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_dimensoes = pytesseract.image_to_string(crop_image_14_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_dimensoes)
                sheet.write('A274', result_14_dimensoes)
            # Unidades_14
            crop_image_14_unidades = crop_image_14[(q + (414 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_14_unidades = cv.fastNlMeansDenoisingColored(crop_image_14_unidades, None, 10, 10, 7, 21)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_unidades = cv.morphologyEx(crop_image_14_unidades, cv.MORPH_CLOSE, kernel_14)
            crop_image_14_unidades = cv.cvtColor(crop_image_14_unidades, cv.COLOR_BGR2GRAY)
            crop_image_14_unidades = cv.threshold(crop_image_14_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_unidades = pytesseract.image_to_string(
                crop_image_14_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_14_unidades == "" or result_14_unidades[0] == str(4) \
                    or result_14_unidades[0:2] == str(28) or result_14_unidades[0:2] == str(29) or result_14_unidades[0:1] == str(0):
                crop_image_14_unidades = crop_image_14[(q + (414 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_14_unidades = cv.fastNlMeansDenoisingColored(crop_image_14_unidades, None, 10, 10, 7, 21)
                kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_14_unidades = cv.morphologyEx(crop_image_14_unidades, cv.MORPH_CLOSE, kernel_14)
                crop_image_14_unidades = cv.cvtColor(crop_image_14_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_14_unidades = pytesseract.image_to_string(
                    crop_image_14_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_14_unidades[0:1] == str(0):
                    crop_image_14_unidades = crop_image_14[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_14_unidades = cv.fastNlMeansDenoisingColored(crop_image_14_unidades, None, 10, 10, 7, 21)
                    kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_14_unidades = cv.morphologyEx(crop_image_14_unidades, cv.MORPH_CLOSE, kernel_14)
                    crop_image_14_unidades = cv.cvtColor(crop_image_14_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_14_unidades = pytesseract.image_to_string(
                        crop_image_14_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_14_unidades)
                sheet.write('A275', result_14_unidades)
            # cliche_14
            crop_image_14_cliche = crop_image_14[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_14_cliche = cv.cvtColor(crop_image_14_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_cliche = pytesseract.image_to_string(
                crop_image_14_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_cliche)
                sheet.write('A276', result_14_cliche)
            # Tinta_14
            crop_image_14_tinta = crop_image_14[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_14_tinta = cv.fastNlMeansDenoisingColored(crop_image_14_tinta, None, 10, 10, 7, 21)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_tinta = cv.morphologyEx(crop_image_14_tinta, cv.MORPH_CLOSE, kernel_14)
            crop_image_14_tinta = cv.cvtColor(crop_image_14_tinta, cv.COLOR_BGR2GRAY)
            crop_image_14_tinta = cv.threshold(crop_image_14_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_tinta = pytesseract.image_to_string(
                crop_image_14_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_tinta)
                sheet.write('A277', result_14_tinta)
            # n_cores_14
            crop_image_14_n_cores = crop_image_14[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_14_n_cores = cv.fastNlMeansDenoisingColored(crop_image_14_n_cores, None, 10, 10, 7, 21)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_n_cores = cv.morphologyEx(crop_image_14_n_cores, cv.MORPH_CLOSE, kernel_14)
            crop_image_14_n_cores = cv.cvtColor(crop_image_14_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_14_n_cores = cv.threshold(crop_image_14_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_n_cores = pytesseract.image_to_string(
                crop_image_14_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_n_cores)
                sheet.write('A278', result_14_n_cores)
            # n_caixas_14
            crop_image_14_n_caixas = crop_image_14[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_n_caixas = pytesseract.image_to_string(crop_image_14_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_n_caixas)
                sheet.write('A279', result_14_n_caixas)
            # tipo_clientes_14
            crop_image_14_tipo_clientes = crop_image_14[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_14_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_14_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_tipo_clientes = cv.morphologyEx(crop_image_14_tipo_clientes, cv.MORPH_CLOSE, kernel_14)
            crop_image_14_tipo_clientes = cv.cvtColor(crop_image_14_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_tipo_clientes = pytesseract.image_to_string(
                crop_image_14_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_tipo_clientes)
                sheet.write('A280', result_14_tipo_clientes)
            # Servicos_14
            crop_image_14_servicos_1 = crop_image_14[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_servicos_1 = pytesseract.image_to_string(crop_image_14_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_servicos_1)
                sheet.write('A281', result_14_servicos_1)
            # Servicos_2_14
            crop_image_14_servicos_2 = crop_image_14[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_servicos_2 = pytesseract.image_to_string(crop_image_14_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_servicos_2)
                sheet.write('A282', result_14_servicos_2)
            # Caixas_1_14
            crop_image_14_caixas = crop_image_14[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_14_caixas = cv.cvtColor(crop_image_14_caixas, cv.COLOR_BGR2GRAY)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_caixas = cv.morphologyEx(crop_image_14_caixas, cv.MORPH_CLOSE, kernel_14)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_caixas = pytesseract.image_to_string(crop_image_14_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_caixas)
                sheet.write('A283', result_14_caixas)
            # Total_14
            crop_image_14_total = crop_image_14[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_14_total = cv.cvtColor(crop_image_14_total, cv.COLOR_BGR2GRAY)
            crop_image_14_total = cv.threshold(crop_image_14_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_total = cv.morphologyEx(crop_image_14_total, cv.MORPH_CLOSE, kernel_14)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_total = pytesseract.image_to_string(crop_image_14_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_total)
                sheet.write('A284', result_14_total)
                if result_14_total[0:1] == str(9):
                    crop_image_14_total = crop_image_14[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_14_total = cv.cvtColor(crop_image_14_total, cv.COLOR_BGR2GRAY)
                    kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_14_total = cv.morphologyEx(crop_image_14_total, cv.MORPH_CLOSE, kernel_14)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_14_total = pytesseract.image_to_string(crop_image_14_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_14_total)
                        sheet.write('A284', result_14_total)
            # Espessura_14
            crop_image_14_espessura = crop_image_14[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_espessura = pytesseract.image_to_string(crop_image_14_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_espessura)
                sheet.write('A285', result_14_espessura)
            # Cor_1_14
            crop_image_14_1_cor = crop_image_14[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_14_1_cor = cv.fastNlMeansDenoisingColored(crop_image_14_1_cor, None, 10, 10, 7, 21)
            crop_image_14_1_cor = cv.cvtColor(crop_image_14_1_cor, cv.COLOR_BGR2GRAY)
            kernel_14_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_1_cor = cv.morphologyEx(crop_image_14_1_cor, cv.MORPH_CLOSE, kernel_14_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_1_cor = pytesseract.image_to_string(
                crop_image_14_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_1_cor)
                sheet.write('B286', result_14_1_cor)
            # Cor_2_14
            crop_image_14_2_cor = crop_image_14[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_14_2_cor = cv.fastNlMeansDenoisingColored(crop_image_14_2_cor, None, 10, 10, 7, 21)
            crop_image_14_2_cor = cv.cvtColor(crop_image_14_2_cor, cv.COLOR_BGR2GRAY)
            kernel_14_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_2_cor = cv.morphologyEx(crop_image_14_2_cor, cv.MORPH_CLOSE, kernel_14_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_2_cor = pytesseract.image_to_string(
                crop_image_14_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_2_cor)
                sheet.write('C286', result_14_2_cor)
            # Cor_3_14
            crop_image_14_3_cor = crop_image_14[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_14_3_cor = cv.fastNlMeansDenoisingColored(crop_image_14_3_cor, None, 10, 10, 7, 21)
            crop_image_14_3_cor = cv.cvtColor(crop_image_14_3_cor, cv.COLOR_BGR2GRAY)
            kernel_14_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_3_cor = cv.morphologyEx(crop_image_14_3_cor, cv.MORPH_CLOSE, kernel_14_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_3_cor = pytesseract.image_to_string(
                crop_image_14_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_3_cor)
                sheet.write('D286', result_14_3_cor)
            # Cor_4_14
            crop_image_14_4_cor = crop_image_14[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_14_4_cor = cv.fastNlMeansDenoisingColored(crop_image_14_4_cor, None, 10, 10, 7, 21)
            crop_image_14_4_cor = cv.cvtColor(crop_image_14_4_cor, cv.COLOR_BGR2GRAY)
            kernel_14_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_4_cor = cv.morphologyEx(crop_image_14_4_cor, cv.MORPH_CLOSE, kernel_14_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_4_cor = pytesseract.image_to_string(
                crop_image_14_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_4_cor)
                sheet.write('E286', result_14_4_cor)
            # Cor_5_14
            crop_image_14_5_cor = crop_image_14[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_14_5_cor = cv.fastNlMeansDenoisingColored(crop_image_14_5_cor, None, 10, 10, 7, 21)
            crop_image_14_5_cor = cv.cvtColor(crop_image_14_5_cor, cv.COLOR_BGR2GRAY)
            kernel_14_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_5_cor = cv.morphologyEx(crop_image_14_5_cor, cv.MORPH_CLOSE, kernel_14_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_5_cor = pytesseract.image_to_string(
                crop_image_14_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_5_cor)
                sheet.write('F286', result_14_5_cor)
            # Cor_6_14
            crop_image_14_6_cor = crop_image_14[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_14_6_cor = cv.fastNlMeansDenoisingColored(crop_image_14_6_cor, None, 10, 10, 7, 21)
            crop_image_14_6_cor = cv.cvtColor(crop_image_14_6_cor, cv.COLOR_BGR2GRAY)
            kernel_14_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_6_cor = cv.morphologyEx(crop_image_14_6_cor, cv.MORPH_CLOSE, kernel_14_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_6_cor = pytesseract.image_to_string(
                crop_image_14_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_6_cor)
                sheet.write('G286', result_14_6_cor)
            # Cor_fabricada_14
            crop_image_14_fabricada_cor = crop_image_14[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_14_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_14_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_14_fabricada_cor = cv.cvtColor(crop_image_14_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_14_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_fabricada_cor = cv.morphologyEx(crop_image_14_fabricada_cor, cv.MORPH_CLOSE, kernel_14_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_14_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H286', result_fabricada_cor)
        if 15 <= numero_quadros:
            crop_image_15 = img1[novo_y_1 * 14:novo_y_1 * 15]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_15
            crop_image_15_dimensoes = crop_image_15[q + 60:a - 20, z:p]
            crop_image_15_dimensoes = cv.cvtColor(crop_image_15_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_dimensoes = pytesseract.image_to_string(crop_image_15_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A295', result_15_dimensoes)
            # Unidades_15
            crop_image_15_unidades = crop_image_15[(q + (415 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_15_unidades = cv.fastNlMeansDenoisingColored(crop_image_15_unidades, None, 10, 10, 7, 21)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_unidades = cv.morphologyEx(crop_image_15_unidades, cv.MORPH_CLOSE, kernel_15)
            crop_image_15_unidades = cv.cvtColor(crop_image_15_unidades, cv.COLOR_BGR2GRAY)
            crop_image_15_unidades = cv.threshold(crop_image_15_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_unidades = pytesseract.image_to_string(
                crop_image_15_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_15_unidades == "" or result_15_unidades[0] == str(4) \
                    or result_15_unidades[0:2] == str(28) or result_15_unidades[0:2] == str(29) or result_15_unidades[0:1] == str(0):
                crop_image_15_unidades = crop_image_15[(q + (415 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_15_unidades = cv.fastNlMeansDenoisingColored(crop_image_15_unidades, None, 10, 10, 7, 21)
                kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_15_unidades = cv.morphologyEx(crop_image_15_unidades, cv.MORPH_CLOSE, kernel_15)
                crop_image_15_unidades = cv.cvtColor(crop_image_15_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_15_unidades = pytesseract.image_to_string(
                    crop_image_15_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_15_unidades[0:1] == str(0):
                    crop_image_15_unidades = crop_image_15[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_15_unidades = cv.fastNlMeansDenoisingColored(crop_image_15_unidades, None, 10, 10, 7, 21)
                    kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_15_unidades = cv.morphologyEx(crop_image_15_unidades, cv.MORPH_CLOSE, kernel_15)
                    crop_image_15_unidades = cv.cvtColor(crop_image_15_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_15_unidades = pytesseract.image_to_string(
                        crop_image_15_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_15_unidades)
                sheet.write('A296', result_15_unidades)
            # cliche_15
            crop_image_15_cliche = crop_image_15[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_15_cliche = cv.cvtColor(crop_image_15_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_cliche = pytesseract.image_to_string(
                crop_image_15_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_cliche)
                sheet.write('A297', result_15_cliche)
            # Tinta_15
            crop_image_15_tinta = crop_image_15[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_15_tinta = cv.fastNlMeansDenoisingColored(crop_image_15_tinta, None, 10, 10, 7, 21)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_tinta = cv.morphologyEx(crop_image_15_tinta, cv.MORPH_CLOSE, kernel_15)
            crop_image_15_tinta = cv.cvtColor(crop_image_15_tinta, cv.COLOR_BGR2GRAY)
            crop_image_15_tinta = cv.threshold(crop_image_15_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_tinta = pytesseract.image_to_string(
                crop_image_15_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_tinta)
                sheet.write('A298', result_15_tinta)
            # n_cores_15
            crop_image_15_n_cores = crop_image_15[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_15_n_cores = cv.fastNlMeansDenoisingColored(crop_image_15_n_cores, None, 10, 10, 7, 21)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_n_cores = cv.morphologyEx(crop_image_15_n_cores, cv.MORPH_CLOSE, kernel_15)
            crop_image_15_n_cores = cv.cvtColor(crop_image_15_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_15_n_cores = cv.threshold(crop_image_15_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_n_cores = pytesseract.image_to_string(
                crop_image_15_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_n_cores)
                sheet.write('A299', result_15_n_cores)
            # n_caixas_15
            crop_image_15_n_caixas = crop_image_15[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_n_caixas = pytesseract.image_to_string(crop_image_15_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_n_caixas)
                sheet.write('A300', result_15_n_caixas)
            # tipo_clientes_15
            crop_image_15_tipo_clientes = crop_image_15[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_15_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_15_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_tipo_clientes = cv.morphologyEx(crop_image_15_tipo_clientes, cv.MORPH_CLOSE, kernel_15)
            crop_image_15_tipo_clientes = cv.cvtColor(crop_image_15_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_tipo_clientes = pytesseract.image_to_string(
                crop_image_15_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_tipo_clientes)
                sheet.write('A301', result_15_tipo_clientes)
            # Servicos_15
            crop_image_15_servicos_1 = crop_image_15[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_servicos_1 = pytesseract.image_to_string(crop_image_15_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_servicos_1)
                sheet.write('A302', result_15_servicos_1)
            # Servicos_2_15
            crop_image_15_servicos_2 = crop_image_15[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_servicos_2 = pytesseract.image_to_string(crop_image_15_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_servicos_2)
                sheet.write('A303', result_15_servicos_2)
            # Caixas_1_15
            crop_image_15_caixas = crop_image_15[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_15_caixas = cv.cvtColor(crop_image_15_caixas, cv.COLOR_BGR2GRAY)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_caixas = cv.morphologyEx(crop_image_15_caixas, cv.MORPH_CLOSE, kernel_15)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_caixas = pytesseract.image_to_string(crop_image_15_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_caixas)
                sheet.write('A304', result_15_caixas)
            # Total_15
            crop_image_15_total = crop_image_15[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_15_total = cv.cvtColor(crop_image_15_total, cv.COLOR_BGR2GRAY)
            crop_image_15_total = cv.threshold(crop_image_15_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_total = cv.morphologyEx(crop_image_15_total, cv.MORPH_CLOSE, kernel_15)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_total = pytesseract.image_to_string(crop_image_15_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_total)
                sheet.write('A305', result_15_total)
                if result_15_total[0:1] == str(9):
                    crop_image_15_total = crop_image_15[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_15_total = cv.cvtColor(crop_image_15_total, cv.COLOR_BGR2GRAY)
                    kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_15_total = cv.morphologyEx(crop_image_15_total, cv.MORPH_CLOSE, kernel_15)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_15_total = pytesseract.image_to_string(crop_image_15_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_15_total)
                        sheet.write('A305', result_15_total)
            # Espessura_15
            crop_image_15_espessura = crop_image_15[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_espessura = pytesseract.image_to_string(crop_image_15_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_espessura)
                sheet.write('A306', result_15_espessura)
            # Cor_1_15
            crop_image_15_1_cor = crop_image_15[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_15_1_cor = cv.fastNlMeansDenoisingColored(crop_image_15_1_cor, None, 10, 10, 7, 21)
            crop_image_15_1_cor = cv.cvtColor(crop_image_15_1_cor, cv.COLOR_BGR2GRAY)
            kernel_15_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_1_cor = cv.morphologyEx(crop_image_15_1_cor, cv.MORPH_CLOSE, kernel_15_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_1_cor = pytesseract.image_to_string(
                crop_image_15_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_1_cor)
                sheet.write('B307', result_15_1_cor)
            # Cor_2_15
            crop_image_15_2_cor = crop_image_15[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_15_2_cor = cv.fastNlMeansDenoisingColored(crop_image_15_2_cor, None, 10, 10, 7, 21)
            crop_image_15_2_cor = cv.cvtColor(crop_image_15_2_cor, cv.COLOR_BGR2GRAY)
            kernel_15_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_2_cor = cv.morphologyEx(crop_image_15_2_cor, cv.MORPH_CLOSE, kernel_15_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_2_cor = pytesseract.image_to_string(
                crop_image_15_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_2_cor)
                sheet.write('C307', result_15_2_cor)
            # Cor_3_15
            crop_image_15_3_cor = crop_image_15[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_15_3_cor = cv.fastNlMeansDenoisingColored(crop_image_15_3_cor, None, 10, 10, 7, 21)
            crop_image_15_3_cor = cv.cvtColor(crop_image_15_3_cor, cv.COLOR_BGR2GRAY)
            kernel_15_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_3_cor = cv.morphologyEx(crop_image_15_3_cor, cv.MORPH_CLOSE, kernel_15_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_3_cor = pytesseract.image_to_string(
                crop_image_15_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_3_cor)
                sheet.write('D307', result_15_3_cor)
            # Cor_4_15
            crop_image_15_4_cor = crop_image_15[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_15_4_cor = cv.fastNlMeansDenoisingColored(crop_image_15_4_cor, None, 10, 10, 7, 21)
            crop_image_15_4_cor = cv.cvtColor(crop_image_15_4_cor, cv.COLOR_BGR2GRAY)
            kernel_15_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_4_cor = cv.morphologyEx(crop_image_15_4_cor, cv.MORPH_CLOSE, kernel_15_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_4_cor = pytesseract.image_to_string(
                crop_image_15_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_4_cor)
                sheet.write('E307', result_15_4_cor)
            # Cor_5_15
            crop_image_15_5_cor = crop_image_15[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_15_5_cor = cv.fastNlMeansDenoisingColored(crop_image_15_5_cor, None, 10, 10, 7, 21)
            crop_image_15_5_cor = cv.cvtColor(crop_image_15_5_cor, cv.COLOR_BGR2GRAY)
            kernel_15_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_5_cor = cv.morphologyEx(crop_image_15_5_cor, cv.MORPH_CLOSE, kernel_15_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_5_cor = pytesseract.image_to_string(
                crop_image_15_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_5_cor)
                sheet.write('F307', result_15_5_cor)
            # Cor_6_15
            crop_image_15_6_cor = crop_image_15[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_15_6_cor = cv.fastNlMeansDenoisingColored(crop_image_15_6_cor, None, 10, 10, 7, 21)
            crop_image_15_6_cor = cv.cvtColor(crop_image_15_6_cor, cv.COLOR_BGR2GRAY)
            kernel_15_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_6_cor = cv.morphologyEx(crop_image_15_6_cor, cv.MORPH_CLOSE, kernel_15_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_6_cor = pytesseract.image_to_string(
                crop_image_15_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_6_cor)
                sheet.write('G307', result_15_6_cor)
            # Cor_fabricada_15
            crop_image_15_fabricada_cor = crop_image_15[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_15_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_15_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_15_fabricada_cor = cv.cvtColor(crop_image_15_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_15_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_fabricada_cor = cv.morphologyEx(crop_image_15_fabricada_cor, cv.MORPH_CLOSE, kernel_15_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_15_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H307', result_fabricada_cor)
        if 16 <= numero_quadros:
            crop_image_16 = img1[novo_y_1 * 15:novo_y_1 * 16]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_16
            crop_image_16_dimensoes = crop_image_16[q + 60:a - 20, z:p]
            crop_image_16_dimensoes = cv.fastNlMeansDenoisingColored(crop_image_16_dimensoes, None, 10, 10, 7, 21)
            crop_image_16_dimensoes = cv.cvtColor(crop_image_16_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_dimensoes = pytesseract.image_to_string(crop_image_16_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_dimensoes)
                sheet.write('A316', result_16_dimensoes)
            # Unidades_16
            crop_image_16_unidades = crop_image_16[(q + (416 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_16_unidades = cv.fastNlMeansDenoisingColored(crop_image_16_unidades, None, 10, 10, 7, 21)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_unidades = cv.morphologyEx(crop_image_16_unidades, cv.MORPH_CLOSE, kernel_16)
            crop_image_16_unidades = cv.cvtColor(crop_image_16_unidades, cv.COLOR_BGR2GRAY)
            crop_image_16_unidades = cv.threshold(crop_image_16_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_unidades = pytesseract.image_to_string(
                crop_image_16_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_16_unidades == "" or result_16_unidades[0] == str(4) \
                    or result_16_unidades[0:2] == str(28) or result_16_unidades[0:2] == str(29) or result_16_unidades[0:1] == str(0):
                crop_image_16_unidades = crop_image_16[(q + (416 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_16_unidades = cv.fastNlMeansDenoisingColored(crop_image_16_unidades, None, 10, 10, 7, 21)
                kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_16_unidades = cv.morphologyEx(crop_image_16_unidades, cv.MORPH_CLOSE, kernel_16)
                crop_image_16_unidades = cv.cvtColor(crop_image_16_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_16_unidades = pytesseract.image_to_string(
                    crop_image_16_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_16_unidades[0:1] == str(0):
                    crop_image_16_unidades = crop_image_16[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_16_unidades = cv.fastNlMeansDenoisingColored(crop_image_16_unidades, None, 10, 10, 7, 21)
                    kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_16_unidades = cv.morphologyEx(crop_image_16_unidades, cv.MORPH_CLOSE, kernel_16)
                    crop_image_16_unidades = cv.cvtColor(crop_image_16_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_16_unidades = pytesseract.image_to_string(
                        crop_image_16_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_16_unidades)
                sheet.write('A317', result_16_unidades)
            # cliche_16
            crop_image_16_cliche = crop_image_16[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_16_cliche = cv.cvtColor(crop_image_16_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_cliche = pytesseract.image_to_string(
                crop_image_16_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_cliche)
                sheet.write('A318', result_16_cliche)
            # Tinta_16
            crop_image_16_tinta = crop_image_16[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_16_tinta = cv.fastNlMeansDenoisingColored(crop_image_16_tinta, None, 10, 10, 7, 21)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_tinta = cv.morphologyEx(crop_image_16_tinta, cv.MORPH_CLOSE, kernel_16)
            crop_image_16_tinta = cv.cvtColor(crop_image_16_tinta, cv.COLOR_BGR2GRAY)
            crop_image_16_tinta = cv.threshold(crop_image_16_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_tinta = pytesseract.image_to_string(
                crop_image_16_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_tinta)
                sheet.write('A319', result_16_tinta)
            # n_cores_16
            crop_image_16_n_cores = crop_image_16[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_16_n_cores = cv.fastNlMeansDenoisingColored(crop_image_16_n_cores, None, 10, 10, 7, 21)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_n_cores = cv.morphologyEx(crop_image_16_n_cores, cv.MORPH_CLOSE, kernel_16)
            crop_image_16_n_cores = cv.cvtColor(crop_image_16_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_16_n_cores = cv.threshold(crop_image_16_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_n_cores = pytesseract.image_to_string(
                crop_image_16_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_n_cores)
                sheet.write('A320', result_16_n_cores)
            # n_caixas_16
            crop_image_16_n_caixas = crop_image_16[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_n_caixas = pytesseract.image_to_string(crop_image_16_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_n_caixas)
                sheet.write('A321', result_16_n_caixas)
            # tipo_clientes_16
            crop_image_16_tipo_clientes = crop_image_16[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_16_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_16_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_tipo_clientes = cv.morphologyEx(crop_image_16_tipo_clientes, cv.MORPH_CLOSE, kernel_16)
            crop_image_16_tipo_clientes = cv.cvtColor(crop_image_16_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_tipo_clientes = pytesseract.image_to_string(
                crop_image_16_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_tipo_clientes)
                sheet.write('A322', result_16_tipo_clientes)
            # Servicos_16
            crop_image_16_servicos_1 = crop_image_16[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_servicos_1 = pytesseract.image_to_string(crop_image_16_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_servicos_1)
                sheet.write('A323', result_16_servicos_1)
            # Servicos_2_16
            crop_image_16_servicos_2 = crop_image_16[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_servicos_2 = pytesseract.image_to_string(crop_image_16_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_servicos_2)
                sheet.write('A324', result_16_servicos_2)
            # Caixas_1_16
            crop_image_16_caixas = crop_image_16[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_16_caixas = cv.cvtColor(crop_image_16_caixas, cv.COLOR_BGR2GRAY)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_caixas = cv.morphologyEx(crop_image_16_caixas, cv.MORPH_CLOSE, kernel_16)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_caixas = pytesseract.image_to_string(crop_image_16_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_caixas)
                sheet.write('A325', result_16_caixas)
            # Total_16
            crop_image_16_total = crop_image_16[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_16_total = cv.cvtColor(crop_image_16_total, cv.COLOR_BGR2GRAY)
            crop_image_16_total = cv.threshold(crop_image_16_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_total = cv.morphologyEx(crop_image_16_total, cv.MORPH_CLOSE, kernel_16)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_total = pytesseract.image_to_string(crop_image_16_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_total)
                sheet.write('A326', result_16_total)
                if result_16_total[0:1] == str(9):
                    crop_image_16_total = crop_image_16[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_16_total = cv.cvtColor(crop_image_16_total, cv.COLOR_BGR2GRAY)
                    kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_16_total = cv.morphologyEx(crop_image_16_total, cv.MORPH_CLOSE, kernel_16)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_16_total = pytesseract.image_to_string(crop_image_16_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_16_total)
                        sheet.write('A326', result_16_total)
            # Espessura_16
            crop_image_16_espessura = crop_image_16[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_espessura = pytesseract.image_to_string(crop_image_16_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_espessura)
                sheet.write('A327', result_16_espessura)
            # Cor_1_16
            crop_image_16_1_cor = crop_image_16[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_16_1_cor = cv.fastNlMeansDenoisingColored(crop_image_16_1_cor, None, 10, 10, 7, 21)
            crop_image_16_1_cor = cv.cvtColor(crop_image_16_1_cor, cv.COLOR_BGR2GRAY)
            kernel_16_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_1_cor = cv.morphologyEx(crop_image_16_1_cor, cv.MORPH_CLOSE, kernel_16_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_1_cor = pytesseract.image_to_string(
                crop_image_16_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_1_cor)
                sheet.write('B328', result_16_1_cor)

            # Cor_2_16
            crop_image_16_2_cor = crop_image_16[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_16_2_cor = cv.fastNlMeansDenoisingColored(crop_image_16_2_cor, None, 10, 10, 7, 21)
            crop_image_16_2_cor = cv.cvtColor(crop_image_16_2_cor, cv.COLOR_BGR2GRAY)
            kernel_16_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_2_cor = cv.morphologyEx(crop_image_16_2_cor, cv.MORPH_CLOSE, kernel_16_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_2_cor = pytesseract.image_to_string(
                crop_image_16_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_2_cor)
                sheet.write('C328', result_16_2_cor)
            # Cor_3_16
            crop_image_16_3_cor = crop_image_16[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_16_3_cor = cv.fastNlMeansDenoisingColored(crop_image_16_3_cor, None, 10, 10, 7, 21)
            crop_image_16_3_cor = cv.cvtColor(crop_image_16_3_cor, cv.COLOR_BGR2GRAY)
            kernel_16_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_3_cor = cv.morphologyEx(crop_image_16_3_cor, cv.MORPH_CLOSE, kernel_16_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_3_cor = pytesseract.image_to_string(
                crop_image_16_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_3_cor)
                sheet.write('D328', result_16_3_cor)
            # Cor_4_16
            crop_image_16_4_cor = crop_image_16[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_16_4_cor = cv.fastNlMeansDenoisingColored(crop_image_16_4_cor, None, 10, 10, 7, 21)
            crop_image_16_4_cor = cv.cvtColor(crop_image_16_4_cor, cv.COLOR_BGR2GRAY)
            kernel_16_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_4_cor = cv.morphologyEx(crop_image_16_4_cor, cv.MORPH_CLOSE, kernel_16_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_4_cor = pytesseract.image_to_string(
                crop_image_16_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_4_cor)
                sheet.write('E328', result_16_4_cor)
            # Cor_5_16
            crop_image_16_5_cor = crop_image_16[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_16_5_cor = cv.fastNlMeansDenoisingColored(crop_image_16_5_cor, None, 10, 10, 7, 21)
            crop_image_16_5_cor = cv.cvtColor(crop_image_16_5_cor, cv.COLOR_BGR2GRAY)
            kernel_16_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_5_cor = cv.morphologyEx(crop_image_16_5_cor, cv.MORPH_CLOSE, kernel_16_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_5_cor = pytesseract.image_to_string(
                crop_image_16_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_5_cor)
                sheet.write('F328', result_16_5_cor)
            # Cor_6_16
            crop_image_16_6_cor = crop_image_16[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_16_6_cor = cv.fastNlMeansDenoisingColored(crop_image_16_6_cor, None, 10, 10, 7, 21)
            crop_image_16_6_cor = cv.cvtColor(crop_image_16_6_cor, cv.COLOR_BGR2GRAY)
            kernel_16_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_6_cor = cv.morphologyEx(crop_image_16_6_cor, cv.MORPH_CLOSE, kernel_16_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_6_cor = pytesseract.image_to_string(
                crop_image_16_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_6_cor)
                sheet.write('G328', result_16_6_cor)
            # Cor_fabricada_16
            crop_image_16_fabricada_cor = crop_image_16[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_16_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_16_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_16_fabricada_cor = cv.cvtColor(crop_image_16_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_16_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_fabricada_cor = cv.morphologyEx(crop_image_16_fabricada_cor, cv.MORPH_CLOSE, kernel_16_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_16_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H328', result_fabricada_cor)
        if 17 <= numero_quadros:
            crop_image_17 = img1[novo_y_1 * 16:novo_y_1 * 17]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_17
            crop_image_17_dimensoes = crop_image_17[q + 60:a - 20, z:p]
            crop_image_17_dimensoes = cv.cvtColor(crop_image_17_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_dimensoes = pytesseract.image_to_string(crop_image_17_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A337', result_17_dimensoes)
            # Unidades_17
            crop_image_17_unidades = crop_image_17[(q + (417 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_17_unidades = cv.fastNlMeansDenoisingColored(crop_image_17_unidades, None, 10, 10, 7, 21)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_unidades = cv.morphologyEx(crop_image_17_unidades, cv.MORPH_CLOSE, kernel_17)
            crop_image_17_unidades = cv.cvtColor(crop_image_17_unidades, cv.COLOR_BGR2GRAY)
            crop_image_17_unidades = cv.threshold(crop_image_17_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_unidades = pytesseract.image_to_string(
                crop_image_17_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_17_unidades == "" or result_17_unidades[0] == str(4) \
                    or result_17_unidades[0:2] == str(28) or result_17_unidades[0:2] == str(29) or result_17_unidades[0:1] == str(0):
                crop_image_17_unidades = crop_image_17[(q + (417 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_17_unidades = cv.fastNlMeansDenoisingColored(crop_image_17_unidades, None, 10, 10, 7, 21)
                kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_17_unidades = cv.morphologyEx(crop_image_17_unidades, cv.MORPH_CLOSE, kernel_17)
                crop_image_17_unidades = cv.cvtColor(crop_image_17_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_17_unidades = pytesseract.image_to_string(
                    crop_image_17_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_17_unidades[0:1] == str(0):
                    crop_image_17_unidades = crop_image_17[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_17_unidades = cv.fastNlMeansDenoisingColored(crop_image_17_unidades, None, 10, 10, 7, 21)
                    kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_17_unidades = cv.morphologyEx(crop_image_17_unidades, cv.MORPH_CLOSE, kernel_17)
                    crop_image_17_unidades = cv.cvtColor(crop_image_17_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_17_unidades = pytesseract.image_to_string(
                        crop_image_17_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_17_unidades)
                sheet.write('A338', result_17_unidades)
            # cliche_17
            crop_image_17_cliche = crop_image_17[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_17_cliche = cv.cvtColor(crop_image_17_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_cliche = pytesseract.image_to_string(
                crop_image_17_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_cliche)
                sheet.write('A339', result_17_cliche)
            # Tinta_17
            crop_image_17_tinta = crop_image_17[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_17_tinta = cv.fastNlMeansDenoisingColored(crop_image_17_tinta, None, 10, 10, 7, 21)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_tinta = cv.morphologyEx(crop_image_17_tinta, cv.MORPH_CLOSE, kernel_17)
            crop_image_17_tinta = cv.cvtColor(crop_image_17_tinta, cv.COLOR_BGR2GRAY)
            crop_image_17_tinta = cv.threshold(crop_image_17_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_tinta = pytesseract.image_to_string(
                crop_image_17_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_tinta)
                sheet.write('A340', result_17_tinta)
            # n_cores_17
            crop_image_17_n_cores = crop_image_17[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_17_n_cores = cv.fastNlMeansDenoisingColored(crop_image_17_n_cores, None, 10, 10, 7, 21)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_n_cores = cv.morphologyEx(crop_image_17_n_cores, cv.MORPH_CLOSE, kernel_17)
            crop_image_17_n_cores = cv.cvtColor(crop_image_17_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_17_n_cores = cv.threshold(crop_image_17_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_n_cores = pytesseract.image_to_string(
                crop_image_17_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_n_cores)
                sheet.write('A341', result_17_n_cores)
            # n_caixas_17
            crop_image_17_n_caixas = crop_image_17[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_n_caixas = pytesseract.image_to_string(crop_image_17_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_n_caixas)
                sheet.write('A342', result_17_n_caixas)
            # 17
            crop_image_17_tipo_clientes = crop_image_17[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_17_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_17_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_tipo_clientes = cv.morphologyEx(crop_image_17_tipo_clientes, cv.MORPH_CLOSE, kernel_17)
            crop_image_17_tipo_clientes = cv.cvtColor(crop_image_17_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_tipo_clientes = pytesseract.image_to_string(
                crop_image_17_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_tipo_clientes)
                sheet.write('A343', result_17_tipo_clientes)
            # Servicos_17
            crop_image_17_servicos_1 = crop_image_17[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_servicos_1 = pytesseract.image_to_string(crop_image_17_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_servicos_1)
                sheet.write('A344', result_17_servicos_1)
            # Servicos_2_17
            crop_image_17_servicos_2 = crop_image_17[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_servicos_2 = pytesseract.image_to_string(crop_image_17_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_servicos_2)
                sheet.write('A345', result_17_servicos_2)
            # Caixas_1_17
            crop_image_17_caixas = crop_image_17[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_17_caixas = cv.cvtColor(crop_image_17_caixas, cv.COLOR_BGR2GRAY)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_caixas = cv.morphologyEx(crop_image_17_caixas, cv.MORPH_CLOSE, kernel_17)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_caixas = pytesseract.image_to_string(crop_image_17_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_caixas)
                sheet.write('A346', result_17_caixas)
            # Total_17
            crop_image_17_total = crop_image_17[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_17_total = cv.cvtColor(crop_image_17_total, cv.COLOR_BGR2GRAY)
            crop_image_17_total = cv.threshold(crop_image_17_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_total = cv.morphologyEx(crop_image_17_total, cv.MORPH_CLOSE, kernel_17)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_total = pytesseract.image_to_string(crop_image_17_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_total)
                sheet.write('A347', result_17_total)
                if result_17_total[0:1] == str(9):
                    crop_image_17_total = crop_image_17[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_17_total = cv.cvtColor(crop_image_17_total, cv.COLOR_BGR2GRAY)
                    kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_17_total = cv.morphologyEx(crop_image_17_total, cv.MORPH_CLOSE, kernel_17)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_17_total = pytesseract.image_to_string(crop_image_17_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_17_total)
                        sheet.write('A347', result_17_total)
            # Espessura_17
            crop_image_17_espessura = crop_image_17[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_espessura = pytesseract.image_to_string(crop_image_17_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_espessura)
                sheet.write('A348', result_17_espessura)
            # Cor_1_17
            crop_image_17_1_cor = crop_image_17[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_17_1_cor = cv.fastNlMeansDenoisingColored(crop_image_17_1_cor, None, 10, 10, 7, 21)
            crop_image_17_1_cor = cv.cvtColor(crop_image_17_1_cor, cv.COLOR_BGR2GRAY)
            kernel_17_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_1_cor = cv.morphologyEx(crop_image_17_1_cor, cv.MORPH_CLOSE, kernel_17_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_1_cor = pytesseract.image_to_string(
                crop_image_17_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_1_cor)
                sheet.write('B349', result_17_1_cor)
            # Cor_2_17
            crop_image_17_2_cor = crop_image_17[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_17_2_cor = cv.fastNlMeansDenoisingColored(crop_image_17_2_cor, None, 10, 10, 7, 21)
            crop_image_17_2_cor = cv.cvtColor(crop_image_17_2_cor, cv.COLOR_BGR2GRAY)
            kernel_17_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_2_cor = cv.morphologyEx(crop_image_17_2_cor, cv.MORPH_CLOSE, kernel_17_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_2_cor = pytesseract.image_to_string(
                crop_image_17_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_2_cor)
                sheet.write('C349', result_17_2_cor)
            # Cor_3_17
            crop_image_17_3_cor = crop_image_17[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_17_3_cor = cv.fastNlMeansDenoisingColored(crop_image_17_3_cor, None, 10, 10, 7, 21)
            crop_image_17_3_cor = cv.cvtColor(crop_image_17_3_cor, cv.COLOR_BGR2GRAY)
            kernel_17_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_3_cor = cv.morphologyEx(crop_image_17_3_cor, cv.MORPH_CLOSE, kernel_17_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_3_cor = pytesseract.image_to_string(
                crop_image_17_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_3_cor)
                sheet.write('D349', result_17_3_cor)
            # Cor_4_17
            crop_image_17_4_cor = crop_image_17[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_17_4_cor = cv.fastNlMeansDenoisingColored(crop_image_17_4_cor, None, 10, 10, 7, 21)
            crop_image_17_4_cor = cv.cvtColor(crop_image_17_4_cor, cv.COLOR_BGR2GRAY)
            kernel_17_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_4_cor = cv.morphologyEx(crop_image_17_4_cor, cv.MORPH_CLOSE, kernel_17_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_4_cor = pytesseract.image_to_string(
                crop_image_17_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_4_cor)
                sheet.write('E349', result_17_4_cor)
            # Cor_5_17
            crop_image_17_5_cor = crop_image_17[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_17_5_cor = cv.fastNlMeansDenoisingColored(crop_image_17_5_cor, None, 10, 10, 7, 21)
            crop_image_17_5_cor = cv.cvtColor(crop_image_17_5_cor, cv.COLOR_BGR2GRAY)
            kernel_17_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_5_cor = cv.morphologyEx(crop_image_17_5_cor, cv.MORPH_CLOSE, kernel_17_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_5_cor = pytesseract.image_to_string(
                crop_image_17_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_5_cor)
                sheet.write('F349', result_17_5_cor)
            # Cor_6_17
            crop_image_17_6_cor = crop_image_17[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_17_6_cor = cv.fastNlMeansDenoisingColored(crop_image_17_6_cor, None, 10, 10, 7, 21)
            crop_image_17_6_cor = cv.cvtColor(crop_image_17_6_cor, cv.COLOR_BGR2GRAY)
            kernel_17_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_6_cor = cv.morphologyEx(crop_image_17_6_cor, cv.MORPH_CLOSE, kernel_17_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_6_cor = pytesseract.image_to_string(
                crop_image_17_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_6_cor)
                sheet.write('G349', result_17_6_cor)
            # Cor_fabricada_17
            crop_image_17_fabricada_cor = crop_image_17[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_17_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_17_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_17_fabricada_cor = cv.cvtColor(crop_image_17_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_17_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_fabricada_cor = cv.morphologyEx(crop_image_17_fabricada_cor, cv.MORPH_CLOSE, kernel_17_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_17_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H349', result_fabricada_cor)
        if 18 <= numero_quadros:
            crop_image_18 = img1[novo_y_1 * 17:novo_y_1 * 18]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_18
            crop_image_18_dimensoes = crop_image_18[q + 60:a - 20, z:p]
            crop_image_18_dimensoes = cv.cvtColor(crop_image_18_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_dimensoes = pytesseract.image_to_string(crop_image_18_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A358', result_18_dimensoes)
            # Unidades_18
            crop_image_18_unidades = crop_image_18[(q + (418 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_18_unidades = cv.fastNlMeansDenoisingColored(crop_image_18_unidades, None, 10, 10, 7, 21)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_unidades = cv.morphologyEx(crop_image_18_unidades, cv.MORPH_CLOSE, kernel_18)
            crop_image_18_unidades = cv.cvtColor(crop_image_18_unidades, cv.COLOR_BGR2GRAY)
            crop_image_18_unidades = cv.threshold(crop_image_18_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_unidades = pytesseract.image_to_string(
                crop_image_18_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_18_unidades == "" or result_18_unidades[0] == str(4) \
                    or result_18_unidades[0:2] == str(28) or result_18_unidades[0:2] == str(29) or result_18_unidades[0:1] == str(0):
                crop_image_18_unidades = crop_image_18[(q + (418 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_18_unidades = cv.fastNlMeansDenoisingColored(crop_image_18_unidades, None, 10, 10, 7, 21)
                kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_18_unidades = cv.morphologyEx(crop_image_18_unidades, cv.MORPH_CLOSE, kernel_18)
                crop_image_18_unidades = cv.cvtColor(crop_image_18_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_18_unidades = pytesseract.image_to_string(
                    crop_image_18_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_18_unidades[0:1] == str(0):
                    crop_image_18_unidades = crop_image_18[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_18_unidades = cv.fastNlMeansDenoisingColored(crop_image_18_unidades, None, 10, 10, 7, 21)
                    kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_18_unidades = cv.morphologyEx(crop_image_18_unidades, cv.MORPH_CLOSE, kernel_18)
                    crop_image_18_unidades = cv.cvtColor(crop_image_18_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_18_unidades = pytesseract.image_to_string(
                        crop_image_18_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_18_unidades)
                sheet.write('A359', result_18_unidades)
            # cliche_18
            crop_image_18_cliche = crop_image_18[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_18_cliche = cv.cvtColor(crop_image_18_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_cliche = pytesseract.image_to_string(
                crop_image_18_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_cliche)
                sheet.write('A360', result_18_cliche)
            # Tinta_18
            crop_image_18_tinta = crop_image_18[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_18_tinta = cv.fastNlMeansDenoisingColored(crop_image_18_tinta, None, 10, 10, 7, 21)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_tinta = cv.morphologyEx(crop_image_18_tinta, cv.MORPH_CLOSE, kernel_18)
            crop_image_18_tinta = cv.cvtColor(crop_image_18_tinta, cv.COLOR_BGR2GRAY)
            crop_image_18_tinta = cv.threshold(crop_image_18_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_tinta = pytesseract.image_to_string(
                crop_image_18_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_tinta)
                sheet.write('A361', result_18_tinta)
            # n_cores_18
            crop_image_18_n_cores = crop_image_18[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_18_n_cores = cv.fastNlMeansDenoisingColored(crop_image_18_n_cores, None, 10, 10, 7, 21)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_n_cores = cv.morphologyEx(crop_image_18_n_cores, cv.MORPH_CLOSE, kernel_18)
            crop_image_18_n_cores = cv.cvtColor(crop_image_18_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_18_n_cores = cv.threshold(crop_image_18_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_n_cores = pytesseract.image_to_string(
                crop_image_18_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_n_cores)
                sheet.write('A362', result_18_n_cores)
            # n_caixas_18
            crop_image_18_n_caixas = crop_image_18[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_n_caixas = pytesseract.image_to_string(crop_image_18_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_n_caixas)
                sheet.write('A363', result_18_n_caixas)
            # tipo_clientes_18
            crop_image_18_tipo_clientes = crop_image_18[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_18_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_18_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_tipo_clientes = cv.morphologyEx(crop_image_18_tipo_clientes, cv.MORPH_CLOSE, kernel_18)
            crop_image_18_tipo_clientes = cv.cvtColor(crop_image_18_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_tipo_clientes = pytesseract.image_to_string(
                crop_image_18_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_tipo_clientes)
                sheet.write('A364', result_18_tipo_clientes)
            # Servicos_18
            crop_image_18_servicos_1 = crop_image_18[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_servicos_1 = pytesseract.image_to_string(crop_image_18_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_servicos_1)
                sheet.write('A365', result_18_servicos_1)
            # Servicos_2_18
            crop_image_18_servicos_2 = crop_image_18[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_servicos_2 = pytesseract.image_to_string(crop_image_18_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_servicos_2)
                sheet.write('A366', result_18_servicos_2)
            # Caixas_1_18
            crop_image_18_caixas = crop_image_18[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_18_caixas = cv.cvtColor(crop_image_18_caixas, cv.COLOR_BGR2GRAY)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_caixas = cv.morphologyEx(crop_image_18_caixas, cv.MORPH_CLOSE, kernel_18)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_caixas = pytesseract.image_to_string(crop_image_18_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_caixas)
                sheet.write('A367', result_18_caixas)
            # Total_18
            crop_image_18_total = crop_image_18[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_18_total = cv.cvtColor(crop_image_18_total, cv.COLOR_BGR2GRAY)
            crop_image_18_total = cv.threshold(crop_image_18_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_total = cv.morphologyEx(crop_image_18_total, cv.MORPH_CLOSE, kernel_18)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_total = pytesseract.image_to_string(crop_image_18_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_total)
                sheet.write('A368', result_18_total)
                if result_18_total[0:1] == str(9):
                    crop_image_18_total = crop_image_18[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_18_total = cv.cvtColor(crop_image_18_total, cv.COLOR_BGR2GRAY)
                    kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_18_total = cv.morphologyEx(crop_image_18_total, cv.MORPH_CLOSE, kernel_18)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_18_total = pytesseract.image_to_string(crop_image_18_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_18_total)
                        sheet.write('A368', result_18_total)
            # Espessura_18
            crop_image_18_espessura = crop_image_18[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_espessura = pytesseract.image_to_string(crop_image_18_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_espessura)
                sheet.write('A369', result_18_espessura)
            # Cor_1_18
            crop_image_18_1_cor = crop_image_18[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_18_1_cor = cv.fastNlMeansDenoisingColored(crop_image_18_1_cor, None, 10, 10, 7, 21)
            crop_image_18_1_cor = cv.cvtColor(crop_image_18_1_cor, cv.COLOR_BGR2GRAY)
            kernel_18_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_1_cor = cv.morphologyEx(crop_image_18_1_cor, cv.MORPH_CLOSE, kernel_18_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_1_cor = pytesseract.image_to_string(
                crop_image_18_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_1_cor)
                sheet.write('B370', result_18_1_cor)
            # Cor_2_18
            crop_image_18_2_cor = crop_image_18[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_18_2_cor = cv.fastNlMeansDenoisingColored(crop_image_18_2_cor, None, 10, 10, 7, 21)
            crop_image_18_2_cor = cv.cvtColor(crop_image_18_2_cor, cv.COLOR_BGR2GRAY)
            kernel_18_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_2_cor = cv.morphologyEx(crop_image_18_2_cor, cv.MORPH_CLOSE, kernel_18_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_2_cor = pytesseract.image_to_string(
                crop_image_18_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_2_cor)
                sheet.write('C370', result_18_2_cor)
            # Cor_3_18
            crop_image_18_3_cor = crop_image_18[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_18_3_cor = cv.fastNlMeansDenoisingColored(crop_image_18_3_cor, None, 10, 10, 7, 21)
            crop_image_18_3_cor = cv.cvtColor(crop_image_18_3_cor, cv.COLOR_BGR2GRAY)
            kernel_18_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_3_cor = cv.morphologyEx(crop_image_18_3_cor, cv.MORPH_CLOSE, kernel_18_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_3_cor = pytesseract.image_to_string(
                crop_image_18_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_3_cor)
                sheet.write('D370', result_18_3_cor)
            # Cor_4_18
            crop_image_18_4_cor = crop_image_18[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_18_4_cor = cv.fastNlMeansDenoisingColored(crop_image_18_4_cor, None, 10, 10, 7, 21)
            crop_image_18_4_cor = cv.cvtColor(crop_image_18_4_cor, cv.COLOR_BGR2GRAY)
            kernel_18_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_4_cor = cv.morphologyEx(crop_image_18_4_cor, cv.MORPH_CLOSE, kernel_18_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_4_cor = pytesseract.image_to_string(
                crop_image_18_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_4_cor)
                sheet.write('E370', result_18_4_cor)
            # Cor_5_18
            crop_image_18_5_cor = crop_image_18[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_18_5_cor = cv.fastNlMeansDenoisingColored(crop_image_18_5_cor, None, 10, 10, 7, 21)
            crop_image_18_5_cor = cv.cvtColor(crop_image_18_5_cor, cv.COLOR_BGR2GRAY)
            kernel_18_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_5_cor = cv.morphologyEx(crop_image_18_5_cor, cv.MORPH_CLOSE, kernel_18_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_5_cor = pytesseract.image_to_string(
                crop_image_18_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_5_cor)
                sheet.write('F370', result_18_5_cor)
            # Cor_6_18
            crop_image_18_6_cor = crop_image_18[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_18_6_cor = cv.fastNlMeansDenoisingColored(crop_image_18_6_cor, None, 10, 10, 7, 21)
            crop_image_18_6_cor = cv.cvtColor(crop_image_18_6_cor, cv.COLOR_BGR2GRAY)
            kernel_18_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_6_cor = cv.morphologyEx(crop_image_18_6_cor, cv.MORPH_CLOSE, kernel_18_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_6_cor = pytesseract.image_to_string(
                crop_image_18_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_6_cor)
                sheet.write('G370', result_18_6_cor)
            # Cor_fabricada_18
            crop_image_18_fabricada_cor = crop_image_18[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_18_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_18_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_18_fabricada_cor = cv.cvtColor(crop_image_18_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_18_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_fabricada_cor = cv.morphologyEx(crop_image_18_fabricada_cor, cv.MORPH_CLOSE, kernel_18_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_18_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H370', result_fabricada_cor)
        if 19 <= numero_quadros:
            crop_image_19 = img1[novo_y_1 * 18:novo_y_1 * 19]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_19
            crop_image_19_dimensoes = crop_image_19[q + 60:a - 20, z:p]
            crop_image_19_dimensoes = cv.cvtColor(crop_image_19_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_dimensoes = pytesseract.image_to_string(crop_image_19_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_dimensoes)
                sheet.write('A379', result_19_dimensoes)
            # Unidades_19
            crop_image_19_unidades = crop_image_19[(q + (419 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_19_unidades = cv.fastNlMeansDenoisingColored(crop_image_19_unidades, None, 10, 10, 7, 21)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_unidades = cv.morphologyEx(crop_image_19_unidades, cv.MORPH_CLOSE, kernel_19)
            crop_image_19_unidades = cv.cvtColor(crop_image_19_unidades, cv.COLOR_BGR2GRAY)
            crop_image_19_unidades = cv.threshold(crop_image_19_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_unidades = pytesseract.image_to_string(
                crop_image_19_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_19_unidades == "" or result_19_unidades[0] == str(4) \
                    or result_19_unidades[0:2] == str(28) or result_19_unidades[0:2] == str(29) or result_19_unidades[0:1] == str(0):
                crop_image_19_unidades = crop_image_19[(q + (419 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_19_unidades = cv.fastNlMeansDenoisingColored(crop_image_19_unidades, None, 10, 10, 7, 21)
                kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_19_unidades = cv.morphologyEx(crop_image_19_unidades, cv.MORPH_CLOSE, kernel_19)
                crop_image_19_unidades = cv.cvtColor(crop_image_19_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_19_unidades = pytesseract.image_to_string(
                    crop_image_19_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_19_unidades[0:1] == str(0):
                    crop_image_19_unidades = crop_image_19[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_19_unidades = cv.fastNlMeansDenoisingColored(crop_image_19_unidades, None, 10, 10, 7, 21)
                    kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_19_unidades = cv.morphologyEx(crop_image_19_unidades, cv.MORPH_CLOSE, kernel_19)
                    crop_image_19_unidades = cv.cvtColor(crop_image_19_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_19_unidades = pytesseract.image_to_string(
                        crop_image_19_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_19_unidades)
                sheet.write('A380', result_19_unidades)
            # cliche_19
            crop_image_19_cliche = crop_image_19[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_19_cliche = cv.cvtColor(crop_image_19_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_cliche = pytesseract.image_to_string(
                crop_image_19_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_cliche)
                sheet.write('A381', result_19_cliche)
            # Tinta_19
            crop_image_19_tinta = crop_image_19[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_19_tinta = cv.fastNlMeansDenoisingColored(crop_image_19_tinta, None, 10, 10, 7, 21)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_tinta = cv.morphologyEx(crop_image_19_tinta, cv.MORPH_CLOSE, kernel_19)
            crop_image_19_tinta = cv.cvtColor(crop_image_19_tinta, cv.COLOR_BGR2GRAY)
            crop_image_19_tinta = cv.threshold(crop_image_19_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_tinta = pytesseract.image_to_string(
                crop_image_19_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_tinta)
                sheet.write('A382', result_19_tinta)
            # n_cores_19
            crop_image_19_n_cores = crop_image_19[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_19_n_cores = cv.fastNlMeansDenoisingColored(crop_image_19_n_cores, None, 10, 10, 7, 21)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_n_cores = cv.morphologyEx(crop_image_19_n_cores, cv.MORPH_CLOSE, kernel_19)
            crop_image_19_n_cores = cv.cvtColor(crop_image_19_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_19_n_cores = cv.threshold(crop_image_19_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_n_cores = pytesseract.image_to_string(
                crop_image_19_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_n_cores)
                sheet.write('A383', result_19_n_cores)
            # n_caixas_19
            crop_image_19_n_caixas = crop_image_19[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_n_caixas = pytesseract.image_to_string(crop_image_19_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_n_caixas)
                sheet.write('A384', result_19_n_caixas)
            # tipo_clientes_19
            crop_image_19_tipo_clientes = crop_image_19[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_19_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_19_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_tipo_clientes = cv.morphologyEx(crop_image_19_tipo_clientes, cv.MORPH_CLOSE, kernel_19)
            crop_image_19_tipo_clientes = cv.cvtColor(crop_image_19_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_tipo_clientes = pytesseract.image_to_string(
                crop_image_19_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_tipo_clientes)
                sheet.write('A385', result_19_tipo_clientes)
            # Servicos_19
            crop_image_19_servicos_1 = crop_image_19[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_servicos_1 = pytesseract.image_to_string(crop_image_19_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_servicos_1)
                sheet.write('A386', result_19_servicos_1)
            # Servicos_2_19
            crop_image_19_servicos_2 = crop_image_19[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_servicos_2 = pytesseract.image_to_string(crop_image_19_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_servicos_2)
                sheet.write('A387', result_19_servicos_2)
            # Caixas_1_19
            crop_image_19_caixas = crop_image_19[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_19_caixas = cv.cvtColor(crop_image_19_caixas, cv.COLOR_BGR2GRAY)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_caixas = cv.morphologyEx(crop_image_19_caixas, cv.MORPH_CLOSE, kernel_19)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_caixas = pytesseract.image_to_string(crop_image_19_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_caixas)
                sheet.write('A388', result_19_caixas)
            # Total_19
            crop_image_19_total = crop_image_19[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_19_total = cv.cvtColor(crop_image_19_total, cv.COLOR_BGR2GRAY)
            crop_image_19_total = cv.threshold(crop_image_19_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_total = cv.morphologyEx(crop_image_19_total, cv.MORPH_CLOSE, kernel_19)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_total = pytesseract.image_to_string(crop_image_19_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_total)
                sheet.write('A389', result_19_total)
                if result_19_total[0:1] == str(9):
                    crop_image_19_total = crop_image_19[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_19_total = cv.cvtColor(crop_image_19_total, cv.COLOR_BGR2GRAY)
                    kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_19_total = cv.morphologyEx(crop_image_19_total, cv.MORPH_CLOSE, kernel_19)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_19_total = pytesseract.image_to_string(crop_image_19_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_19_total)
                        sheet.write('A389', result_19_total)
            # Espessura_19
            crop_image_19_espessura = crop_image_19[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_espessura = pytesseract.image_to_string(crop_image_19_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_espessura)
                sheet.write('A390', result_19_espessura)
            # Cor_1_19
            crop_image_19_1_cor = crop_image_19[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_19_1_cor = cv.fastNlMeansDenoisingColored(crop_image_19_1_cor, None, 10, 10, 7, 21)
            crop_image_19_1_cor = cv.cvtColor(crop_image_19_1_cor, cv.COLOR_BGR2GRAY)
            kernel_19_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_1_cor = cv.morphologyEx(crop_image_19_1_cor, cv.MORPH_CLOSE, kernel_19_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_1_cor = pytesseract.image_to_string(
                crop_image_19_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_1_cor)
                sheet.write('B391', result_19_1_cor)
            # Cor_2_19
            crop_image_19_2_cor = crop_image_19[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_19_2_cor = cv.fastNlMeansDenoisingColored(crop_image_19_2_cor, None, 10, 10, 7, 21)
            crop_image_19_2_cor = cv.cvtColor(crop_image_19_2_cor, cv.COLOR_BGR2GRAY)
            kernel_19_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_2_cor = cv.morphologyEx(crop_image_19_2_cor, cv.MORPH_CLOSE, kernel_19_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_2_cor = pytesseract.image_to_string(
                crop_image_19_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_2_cor)
                sheet.write('C391', result_19_2_cor)
            # Cor_3_19
            crop_image_19_3_cor = crop_image_19[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_19_3_cor = cv.fastNlMeansDenoisingColored(crop_image_19_3_cor, None, 10, 10, 7, 21)
            crop_image_19_3_cor = cv.cvtColor(crop_image_19_3_cor, cv.COLOR_BGR2GRAY)
            kernel_19_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_3_cor = cv.morphologyEx(crop_image_19_3_cor, cv.MORPH_CLOSE, kernel_19_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_3_cor = pytesseract.image_to_string(
                crop_image_19_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_3_cor)
                sheet.write('D391', result_19_3_cor)
            # Cor_4_19
            crop_image_19_4_cor = crop_image_19[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_19_4_cor = cv.fastNlMeansDenoisingColored(crop_image_19_4_cor, None, 10, 10, 7, 21)
            crop_image_19_4_cor = cv.cvtColor(crop_image_19_4_cor, cv.COLOR_BGR2GRAY)
            kernel_19_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_4_cor = cv.morphologyEx(crop_image_19_4_cor, cv.MORPH_CLOSE, kernel_19_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_4_cor = pytesseract.image_to_string(
                crop_image_19_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_4_cor)
                sheet.write('E391', result_19_4_cor)
            # Cor_5_19
            crop_image_19_5_cor = crop_image_19[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_19_5_cor = cv.fastNlMeansDenoisingColored(crop_image_19_5_cor, None, 10, 10, 7, 21)
            crop_image_19_5_cor = cv.cvtColor(crop_image_19_5_cor, cv.COLOR_BGR2GRAY)
            kernel_19_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_5_cor = cv.morphologyEx(crop_image_19_5_cor, cv.MORPH_CLOSE, kernel_19_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_5_cor = pytesseract.image_to_string(
                crop_image_19_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_5_cor)
                sheet.write('F391', result_19_5_cor)
            # Cor_6_19
            crop_image_19_6_cor = crop_image_19[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_19_6_cor = cv.fastNlMeansDenoisingColored(crop_image_19_6_cor, None, 10, 10, 7, 21)
            crop_image_19_6_cor = cv.cvtColor(crop_image_19_6_cor, cv.COLOR_BGR2GRAY)
            kernel_19_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_6_cor = cv.morphologyEx(crop_image_19_6_cor, cv.MORPH_CLOSE, kernel_19_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_6_cor = pytesseract.image_to_string(
                crop_image_19_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_6_cor)
                sheet.write('G391', result_19_6_cor)
            # Cor_fabricada_19
            crop_image_19_fabricada_cor = crop_image_19[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_19_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_19_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_19_fabricada_cor = cv.cvtColor(crop_image_19_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_19_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_fabricada_cor = cv.morphologyEx(crop_image_19_fabricada_cor, cv.MORPH_CLOSE, kernel_19_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_19_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H391', result_fabricada_cor)
        if 20 <= numero_quadros:
            crop_image_20 = img1[novo_y_1 * 19:novo_y_1 * 20]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_20
            crop_image_20_dimensoes = crop_image_20[q + 60:a - 20, z:p]
            crop_image_20_dimensoes = cv.cvtColor(crop_image_20_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_dimensoes = pytesseract.image_to_string(crop_image_20_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A400', result_20_dimensoes)
            # Unidades_20
            crop_image_20_unidades = crop_image_20[(q + (420 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_20_unidades = cv.fastNlMeansDenoisingColored(crop_image_20_unidades, None, 10, 10, 7, 21)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_unidades = cv.morphologyEx(crop_image_20_unidades, cv.MORPH_CLOSE, kernel_20)
            crop_image_20_unidades = cv.cvtColor(crop_image_20_unidades, cv.COLOR_BGR2GRAY)
            crop_image_20_unidades = cv.threshold(crop_image_20_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_unidades = pytesseract.image_to_string(
                crop_image_20_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_20_unidades == "" or result_20_unidades[0] == str(4) \
                    or result_20_unidades[0:2] == str(28) or result_20_unidades[0:2] == str(29) or result_20_unidades[0:1] == str(0):
                crop_image_20_unidades = crop_image_20[(q + (420 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_20_unidades = cv.fastNlMeansDenoisingColored(crop_image_20_unidades, None, 10, 10, 7, 21)
                kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_20_unidades = cv.morphologyEx(crop_image_20_unidades, cv.MORPH_CLOSE, kernel_20)
                crop_image_20_unidades = cv.cvtColor(crop_image_20_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_20_unidades = pytesseract.image_to_string(
                    crop_image_20_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_20_unidades[0:1] == str(0):
                    crop_image_20_unidades = crop_image_20[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_20_unidades = cv.fastNlMeansDenoisingColored(crop_image_20_unidades, None, 10, 10, 7, 21)
                    kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_20_unidades = cv.morphologyEx(crop_image_20_unidades, cv.MORPH_CLOSE, kernel_20)
                    crop_image_20_unidades = cv.cvtColor(crop_image_20_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_20_unidades = pytesseract.image_to_string(
                        crop_image_20_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_20_unidades)
                sheet.write('A401', result_20_unidades)
            # cliche_20
            crop_image_20_cliche = crop_image_20[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_20_cliche = cv.cvtColor(crop_image_20_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_cliche = pytesseract.image_to_string(
                crop_image_20_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_cliche)
                sheet.write('A402', result_20_cliche)
            # Tinta_20
            crop_image_20_tinta = crop_image_20[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_20_tinta = cv.fastNlMeansDenoisingColored(crop_image_20_tinta, None, 10, 10, 7, 21)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_tinta = cv.morphologyEx(crop_image_20_tinta, cv.MORPH_CLOSE, kernel_20)
            crop_image_20_tinta = cv.cvtColor(crop_image_20_tinta, cv.COLOR_BGR2GRAY)
            crop_image_20_tinta = cv.threshold(crop_image_20_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_tinta = pytesseract.image_to_string(
                crop_image_20_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_tinta)
                sheet.write('A403', result_20_tinta)
            # n_cores_20
            crop_image_20_n_cores = crop_image_20[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_20_n_cores = cv.fastNlMeansDenoisingColored(crop_image_20_n_cores, None, 10, 10, 7, 21)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_n_cores = cv.morphologyEx(crop_image_20_n_cores, cv.MORPH_CLOSE, kernel_20)
            crop_image_20_n_cores = cv.cvtColor(crop_image_20_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_20_n_cores = cv.threshold(crop_image_20_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_n_cores = pytesseract.image_to_string(
                crop_image_20_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_n_cores)
                sheet.write('A404', result_20_n_cores)
            # n_caixas_20
            crop_image_20_n_caixas = crop_image_20[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_n_caixas = pytesseract.image_to_string(crop_image_20_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_n_caixas)
                sheet.write('A405', result_20_n_caixas)
            # tipo_clientes_20
            crop_image_20_tipo_clientes = crop_image_20[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_20_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_20_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_tipo_clientes = cv.morphologyEx(crop_image_20_tipo_clientes, cv.MORPH_CLOSE, kernel_20)
            crop_image_20_tipo_clientes = cv.cvtColor(crop_image_20_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_tipo_clientes = pytesseract.image_to_string(
                crop_image_20_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_tipo_clientes)
                sheet.write('A406', result_20_tipo_clientes)
            # Servicos_20
            crop_image_20_servicos_1 = crop_image_20[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_servicos_1 = pytesseract.image_to_string(crop_image_20_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_servicos_1)
                sheet.write('A407', result_20_servicos_1)
            # Servicos_2_20
            crop_image_20_servicos_2 = crop_image_20[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_servicos_2 = pytesseract.image_to_string(crop_image_20_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_servicos_2)
                sheet.write('A408', result_20_servicos_2)
            # Caixas_1_20
            crop_image_20_caixas = crop_image_20[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_20_caixas = cv.cvtColor(crop_image_20_caixas, cv.COLOR_BGR2GRAY)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_caixas = cv.morphologyEx(crop_image_20_caixas, cv.MORPH_CLOSE, kernel_20)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_caixas = pytesseract.image_to_string(crop_image_20_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_caixas)
                sheet.write('A409', result_20_caixas)
            # Total_20
            crop_image_20_total = crop_image_20[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_20_total = cv.cvtColor(crop_image_20_total, cv.COLOR_BGR2GRAY)
            crop_image_20_total = cv.threshold(crop_image_20_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_total = cv.morphologyEx(crop_image_20_total, cv.MORPH_CLOSE, kernel_20)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_total = pytesseract.image_to_string(crop_image_20_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_total)
                sheet.write('A410', result_20_total)
                if result_20_total[0:1] == str(9):
                    crop_image_20_total = crop_image_20[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_20_total = cv.cvtColor(crop_image_20_total, cv.COLOR_BGR2GRAY)
                    kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_20_total = cv.morphologyEx(crop_image_20_total, cv.MORPH_CLOSE, kernel_20)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_20_total = pytesseract.image_to_string(crop_image_20_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_20_total)
                        sheet.write('A410', result_20_total)
            # Espessura_20
            crop_image_20_espessura = crop_image_20[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_espessura = pytesseract.image_to_string(crop_image_20_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_espessura)
                sheet.write('A411', result_20_espessura)
            # Cor_1_20
            crop_image_20_1_cor = crop_image_20[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_20_1_cor = cv.fastNlMeansDenoisingColored(crop_image_20_1_cor, None, 10, 10, 7, 21)
            crop_image_20_1_cor = cv.cvtColor(crop_image_20_1_cor, cv.COLOR_BGR2GRAY)
            kernel_20_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_1_cor = cv.morphologyEx(crop_image_20_1_cor, cv.MORPH_CLOSE, kernel_20_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_1_cor = pytesseract.image_to_string(
                crop_image_20_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_1_cor)
                sheet.write('B412', result_20_1_cor)
            # Cor_2_20
            crop_image_20_2_cor = crop_image_20[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_20_2_cor = cv.fastNlMeansDenoisingColored(crop_image_20_2_cor, None, 10, 10, 7, 21)
            crop_image_20_2_cor = cv.cvtColor(crop_image_20_2_cor, cv.COLOR_BGR2GRAY)
            kernel_20_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_2_cor = cv.morphologyEx(crop_image_20_2_cor, cv.MORPH_CLOSE, kernel_20_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_2_cor = pytesseract.image_to_string(
                crop_image_20_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_2_cor)
                sheet.write('C412', result_20_2_cor)
            # Cor_3_20
            crop_image_20_3_cor = crop_image_20[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_20_3_cor = cv.fastNlMeansDenoisingColored(crop_image_20_3_cor, None, 10, 10, 7, 21)
            crop_image_20_3_cor = cv.cvtColor(crop_image_20_3_cor, cv.COLOR_BGR2GRAY)
            kernel_20_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_3_cor = cv.morphologyEx(crop_image_20_3_cor, cv.MORPH_CLOSE, kernel_20_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_3_cor = pytesseract.image_to_string(
                crop_image_20_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_3_cor)
                sheet.write('D412', result_20_3_cor)
            # Cor_4_20
            crop_image_20_4_cor = crop_image_20[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_20_4_cor = cv.fastNlMeansDenoisingColored(crop_image_20_4_cor, None, 10, 10, 7, 21)
            crop_image_20_4_cor = cv.cvtColor(crop_image_20_4_cor, cv.COLOR_BGR2GRAY)
            kernel_20_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_4_cor = cv.morphologyEx(crop_image_20_4_cor, cv.MORPH_CLOSE, kernel_20_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_4_cor = pytesseract.image_to_string(
                crop_image_20_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_4_cor)
                sheet.write('E412', result_20_4_cor)
            # Cor_5_20
            crop_image_20_5_cor = crop_image_20[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_20_5_cor = cv.fastNlMeansDenoisingColored(crop_image_20_5_cor, None, 10, 10, 7, 21)
            crop_image_20_5_cor = cv.cvtColor(crop_image_20_5_cor, cv.COLOR_BGR2GRAY)
            kernel_20_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_5_cor = cv.morphologyEx(crop_image_20_5_cor, cv.MORPH_CLOSE, kernel_20_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_5_cor = pytesseract.image_to_string(
                crop_image_20_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_5_cor)
                sheet.write('F412', result_20_5_cor)
            # Cor_6_20
            crop_image_20_6_cor = crop_image_20[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_20_6_cor = cv.fastNlMeansDenoisingColored(crop_image_20_6_cor, None, 10, 10, 7, 21)
            crop_image_20_6_cor = cv.cvtColor(crop_image_20_6_cor, cv.COLOR_BGR2GRAY)
            kernel_20_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_6_cor = cv.morphologyEx(crop_image_20_6_cor, cv.MORPH_CLOSE, kernel_20_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_6_cor = pytesseract.image_to_string(
                crop_image_20_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_6_cor)
                sheet.write('G412', result_20_6_cor)
            # Cor_fabricada_20
            crop_image_20_fabricada_cor = crop_image_20[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_20_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_20_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_20_fabricada_cor = cv.cvtColor(crop_image_20_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_20_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_fabricada_cor = cv.morphologyEx(crop_image_20_fabricada_cor, cv.MORPH_CLOSE, kernel_20_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_20_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H412', result_fabricada_cor)
        if 21 <= numero_quadros:
            crop_image_21 = img1[novo_y_1 * 20:novo_y_1 * 21]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_21
            crop_image_21_dimensoes = crop_image_21[q + 60:a - 20, z:p]
            crop_image_21_dimensoes = cv.cvtColor(crop_image_21_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_dimensoes = pytesseract.image_to_string(crop_image_21_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A421', result_21_dimensoes)
            # Unidades_21
            crop_image_21_unidades = crop_image_21[(q + (421 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_21_unidades = cv.fastNlMeansDenoisingColored(crop_image_21_unidades, None, 10, 10, 7, 21)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_unidades = cv.morphologyEx(crop_image_21_unidades, cv.MORPH_CLOSE, kernel_21)
            crop_image_21_unidades = cv.cvtColor(crop_image_21_unidades, cv.COLOR_BGR2GRAY)
            crop_image_21_unidades = cv.threshold(crop_image_21_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_unidades = pytesseract.image_to_string(
                crop_image_21_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_21_unidades == "" or result_21_unidades[0] == str(4) \
                    or result_21_unidades[0:2] == str(28) or result_21_unidades[0:2] == str(29) or result_21_unidades[0:1] == str(0):
                crop_image_21_unidades = crop_image_21[(q + (421 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_21_unidades = cv.fastNlMeansDenoisingColored(crop_image_21_unidades, None, 10, 10, 7, 21)
                kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_21_unidades = cv.morphologyEx(crop_image_21_unidades, cv.MORPH_CLOSE, kernel_21)
                crop_image_21_unidades = cv.cvtColor(crop_image_21_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_21_unidades = pytesseract.image_to_string(
                    crop_image_21_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_21_unidades[0:1] == str(0):
                    crop_image_21_unidades = crop_image_21[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_21_unidades = cv.fastNlMeansDenoisingColored(crop_image_21_unidades, None, 10, 10, 7, 21)
                    kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_21_unidades = cv.morphologyEx(crop_image_21_unidades, cv.MORPH_CLOSE, kernel_21)
                    crop_image_21_unidades = cv.cvtColor(crop_image_21_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_21_unidades = pytesseract.image_to_string(
                        crop_image_21_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            with open('abc.txt', mode='w') as file:
                file.write(result_21_unidades)
                sheet.write('A422', result_21_unidades)
            # cliche_21
            crop_image_21_cliche = crop_image_21[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_21_cliche = cv.cvtColor(crop_image_21_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_cliche = pytesseract.image_to_string(
                crop_image_21_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_cliche)
                sheet.write('A423', result_21_cliche)
            # Tinta_21
            crop_image_21_tinta = crop_image_21[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_21_tinta = cv.fastNlMeansDenoisingColored(crop_image_21_tinta, None, 10, 10, 7, 21)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_tinta = cv.morphologyEx(crop_image_21_tinta, cv.MORPH_CLOSE, kernel_21)
            crop_image_21_tinta = cv.cvtColor(crop_image_21_tinta, cv.COLOR_BGR2GRAY)
            crop_image_21_tinta = cv.threshold(crop_image_21_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_tinta = pytesseract.image_to_string(
                crop_image_21_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_tinta)
                sheet.write('A424', result_21_tinta)
            # n_cores_21
            crop_image_21_n_cores = crop_image_21[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_21_n_cores = cv.fastNlMeansDenoisingColored(crop_image_21_n_cores, None, 10, 10, 7, 21)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_n_cores = cv.morphologyEx(crop_image_21_n_cores, cv.MORPH_CLOSE, kernel_21)
            crop_image_21_n_cores = cv.cvtColor(crop_image_21_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_21_n_cores = cv.threshold(crop_image_21_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_n_cores = pytesseract.image_to_string(
                crop_image_21_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_n_cores)
                sheet.write('A425', result_21_n_cores)
            # n_caixas_21
            crop_image_21_n_caixas = crop_image_21[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_n_caixas = pytesseract.image_to_string(crop_image_21_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_n_caixas)
                sheet.write('A426', result_21_n_caixas)
            # tipo_clientes_21
            crop_image_21_tipo_clientes = crop_image_21[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_21_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_21_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_tipo_clientes = cv.morphologyEx(crop_image_21_tipo_clientes, cv.MORPH_CLOSE, kernel_21)
            crop_image_21_tipo_clientes = cv.cvtColor(crop_image_21_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_tipo_clientes = pytesseract.image_to_string(
                crop_image_21_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_tipo_clientes)
                sheet.write('A427', result_21_tipo_clientes)
            # Servicos_21
            crop_image_21_servicos_1 = crop_image_21[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_servicos_1 = pytesseract.image_to_string(crop_image_21_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_servicos_1)
                sheet.write('A428', result_21_servicos_1)
            # Servicos_2_21
            crop_image_21_servicos_2 = crop_image_21[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_servicos_2 = pytesseract.image_to_string(crop_image_21_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_servicos_2)
                sheet.write('A429', result_21_servicos_2)
            # Caixas_1_21
            crop_image_21_caixas = crop_image_21[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_21_caixas = cv.cvtColor(crop_image_21_caixas, cv.COLOR_BGR2GRAY)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_caixas = cv.morphologyEx(crop_image_21_caixas, cv.MORPH_CLOSE, kernel_21)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_caixas = pytesseract.image_to_string(crop_image_21_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_caixas)
                sheet.write('A430', result_21_caixas)
            # Total_21
            crop_image_21_total = crop_image_21[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_21_total = cv.cvtColor(crop_image_21_total, cv.COLOR_BGR2GRAY)
            crop_image_21_total = cv.threshold(crop_image_21_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_total = cv.morphologyEx(crop_image_21_total, cv.MORPH_CLOSE, kernel_21)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_total = pytesseract.image_to_string(crop_image_21_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_total)
                sheet.write('A431', result_21_total)
                if result_21_total[0:1] == str(9):
                    crop_image_21_total = crop_image_21[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_21_total = cv.cvtColor(crop_image_21_total, cv.COLOR_BGR2GRAY)
                    kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_21_total = cv.morphologyEx(crop_image_21_total, cv.MORPH_CLOSE, kernel_21)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_21_total = pytesseract.image_to_string(crop_image_21_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_21_total)
                        sheet.write('A431', result_21_total)
            # Espessura_21
            crop_image_21_espessura = crop_image_21[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_espessura = pytesseract.image_to_string(crop_image_21_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_espessura)
                sheet.write('A432', result_21_espessura)
            # Cor_1_21
            crop_image_21_1_cor = crop_image_21[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_21_1_cor = cv.fastNlMeansDenoisingColored(crop_image_21_1_cor, None, 10, 10, 7, 21)
            crop_image_21_1_cor = cv.cvtColor(crop_image_21_1_cor, cv.COLOR_BGR2GRAY)
            kernel_21_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_1_cor = cv.morphologyEx(crop_image_21_1_cor, cv.MORPH_CLOSE, kernel_21_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_1_cor = pytesseract.image_to_string(
                crop_image_21_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_1_cor)
                sheet.write('B433', result_21_1_cor)
            # Cor_2_21
            crop_image_21_2_cor = crop_image_21[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_21_2_cor = cv.fastNlMeansDenoisingColored(crop_image_21_2_cor, None, 10, 10, 7, 21)
            crop_image_21_2_cor = cv.cvtColor(crop_image_21_2_cor, cv.COLOR_BGR2GRAY)
            kernel_21_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_2_cor = cv.morphologyEx(crop_image_21_2_cor, cv.MORPH_CLOSE, kernel_21_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_2_cor = pytesseract.image_to_string(
                crop_image_21_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_2_cor)
                sheet.write('C433', result_21_2_cor)
            # Cor_3_21
            crop_image_21_3_cor = crop_image_21[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_21_3_cor = cv.fastNlMeansDenoisingColored(crop_image_21_3_cor, None, 10, 10, 7, 21)
            crop_image_21_3_cor = cv.cvtColor(crop_image_21_3_cor, cv.COLOR_BGR2GRAY)
            kernel_21_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_3_cor = cv.morphologyEx(crop_image_21_3_cor, cv.MORPH_CLOSE, kernel_21_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_3_cor = pytesseract.image_to_string(
                crop_image_21_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_3_cor)
                sheet.write('D433', result_21_3_cor)
            # Cor_4_21
            crop_image_21_4_cor = crop_image_21[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_21_4_cor = cv.fastNlMeansDenoisingColored(crop_image_21_4_cor, None, 10, 10, 7, 21)
            crop_image_21_4_cor = cv.cvtColor(crop_image_21_4_cor, cv.COLOR_BGR2GRAY)
            kernel_21_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_4_cor = cv.morphologyEx(crop_image_21_4_cor, cv.MORPH_CLOSE, kernel_21_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_4_cor = pytesseract.image_to_string(
                crop_image_21_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_4_cor)
                sheet.write('E433', result_21_4_cor)
            # Cor_5_21
            crop_image_21_5_cor = crop_image_21[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_21_5_cor = cv.fastNlMeansDenoisingColored(crop_image_21_5_cor, None, 10, 10, 7, 21)
            crop_image_21_5_cor = cv.cvtColor(crop_image_21_5_cor, cv.COLOR_BGR2GRAY)
            kernel_21_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_5_cor = cv.morphologyEx(crop_image_21_5_cor, cv.MORPH_CLOSE, kernel_21_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_5_cor = pytesseract.image_to_string(
                crop_image_21_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_5_cor)
                sheet.write('F433', result_21_5_cor)
            # Cor_6_21
            crop_image_21_6_cor = crop_image_21[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_21_6_cor = cv.fastNlMeansDenoisingColored(crop_image_21_6_cor, None, 10, 10, 7, 21)
            crop_image_21_6_cor = cv.cvtColor(crop_image_21_6_cor, cv.COLOR_BGR2GRAY)
            kernel_21_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_6_cor = cv.morphologyEx(crop_image_21_6_cor, cv.MORPH_CLOSE, kernel_21_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_6_cor = pytesseract.image_to_string(
                crop_image_21_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_6_cor)
                sheet.write('G433', result_21_6_cor)
            # Cor_fabricada_21
            crop_image_21_fabricada_cor = crop_image_21[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_21_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_21_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_21_fabricada_cor = cv.cvtColor(crop_image_21_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_21_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_fabricada_cor = cv.morphologyEx(crop_image_21_fabricada_cor, cv.MORPH_CLOSE, kernel_21_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_21_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H433', result_fabricada_cor)
        if 22 <= numero_quadros:
            crop_image_22 = img1[novo_y_1 * 21:novo_y_1 * 22]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_22
            crop_image_22_dimensoes = crop_image_22[q + 60:a - 20, z:p]
            crop_image_22_dimensoes = cv.cvtColor(crop_image_22_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_dimensoes = pytesseract.image_to_string(crop_image_22_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_dimensoes)
                sheet.write('A442', result_22_dimensoes)
            # Unidades_22
            crop_image_22_unidades = crop_image_22[(q + (422 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_22_unidades = cv.fastNlMeansDenoisingColored(crop_image_22_unidades, None, 10, 10, 7, 21)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_unidades = cv.morphologyEx(crop_image_22_unidades, cv.MORPH_CLOSE, kernel_22)
            crop_image_22_unidades = cv.cvtColor(crop_image_22_unidades, cv.COLOR_BGR2GRAY)
            crop_image_22_unidades = cv.threshold(crop_image_22_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_unidades = pytesseract.image_to_string(
                crop_image_22_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_22_unidades == "" or result_22_unidades[0] == str(4) \
                    or result_22_unidades[0:2] == str(28) or result_22_unidades[0:2] == str(29) or result_22_unidades[0:1] == str(0):
                crop_image_22_unidades = crop_image_22[(q + (422 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_22_unidades = cv.fastNlMeansDenoisingColored(crop_image_22_unidades, None, 10, 10, 7, 21)
                kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_22_unidades = cv.morphologyEx(crop_image_22_unidades, cv.MORPH_CLOSE, kernel_22)
                crop_image_22_unidades = cv.cvtColor(crop_image_22_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_22_unidades = pytesseract.image_to_string(
                    crop_image_22_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_22_unidades[0:1] == str(0):
                    crop_image_22_unidades = crop_image_22[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_22_unidades = cv.fastNlMeansDenoisingColored(crop_image_22_unidades, None, 10, 10, 7, 21)
                    kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_22_unidades = cv.morphologyEx(crop_image_22_unidades, cv.MORPH_CLOSE, kernel_22)
                    crop_image_22_unidades = cv.cvtColor(crop_image_22_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_22_unidades = pytesseract.image_to_string(
                        crop_image_22_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_22_unidades)
                sheet.write('A443', result_22_unidades)
            # cliche_22
            crop_image_22_cliche = crop_image_22[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_22_cliche = cv.cvtColor(crop_image_22_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_cliche = pytesseract.image_to_string(
                crop_image_22_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_cliche)
                sheet.write('A444', result_22_cliche)
            # Tinta_22
            crop_image_22_tinta = crop_image_22[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_22_tinta = cv.fastNlMeansDenoisingColored(crop_image_22_tinta, None, 10, 10, 7, 21)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_tinta = cv.morphologyEx(crop_image_22_tinta, cv.MORPH_CLOSE, kernel_22)
            crop_image_22_tinta = cv.cvtColor(crop_image_22_tinta, cv.COLOR_BGR2GRAY)
            crop_image_22_tinta = cv.threshold(crop_image_22_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_tinta = pytesseract.image_to_string(
                crop_image_22_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_tinta)
                sheet.write('A445', result_22_tinta)
            # n_cores_22
            crop_image_22_n_cores = crop_image_22[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_22_n_cores = cv.fastNlMeansDenoisingColored(crop_image_22_n_cores, None, 10, 10, 7, 21)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_n_cores = cv.morphologyEx(crop_image_22_n_cores, cv.MORPH_CLOSE, kernel_22)
            crop_image_22_n_cores = cv.cvtColor(crop_image_22_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_22_n_cores = cv.threshold(crop_image_22_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_n_cores = pytesseract.image_to_string(
                crop_image_22_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_n_cores)
                sheet.write('A446', result_22_n_cores)
            # n_caixas_22
            crop_image_22_n_caixas = crop_image_22[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_n_caixas = pytesseract.image_to_string(crop_image_22_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_n_caixas)
                sheet.write('A447', result_22_n_caixas)
            # tipo_clientes_22
            crop_image_22_tipo_clientes = crop_image_22[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_22_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_22_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_tipo_clientes = cv.morphologyEx(crop_image_22_tipo_clientes, cv.MORPH_CLOSE, kernel_22)
            crop_image_22_tipo_clientes = cv.cvtColor(crop_image_22_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_tipo_clientes = pytesseract.image_to_string(
                crop_image_22_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_tipo_clientes)
                sheet.write('A448', result_22_tipo_clientes)
            # Servicos_22
            crop_image_22_servicos_1 = crop_image_22[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_servicos_1 = pytesseract.image_to_string(crop_image_22_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_servicos_1)
                sheet.write('A449', result_22_servicos_1)
            # Servicos_2_22
            crop_image_22_servicos_2 = crop_image_22[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_servicos_2 = pytesseract.image_to_string(crop_image_22_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_servicos_2)
                sheet.write('A450', result_22_servicos_2)
            # Caixas_1_22
            crop_image_22_caixas = crop_image_22[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_22_caixas = cv.cvtColor(crop_image_22_caixas, cv.COLOR_BGR2GRAY)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_caixas = cv.morphologyEx(crop_image_22_caixas, cv.MORPH_CLOSE, kernel_22)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_caixas = pytesseract.image_to_string(crop_image_22_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_caixas)
                sheet.write('A451', result_22_caixas)
            # Total_22
            crop_image_22_total = crop_image_22[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_22_total = cv.cvtColor(crop_image_22_total, cv.COLOR_BGR2GRAY)
            crop_image_22_total = cv.threshold(crop_image_22_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_total = cv.morphologyEx(crop_image_22_total, cv.MORPH_CLOSE, kernel_22)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_total = pytesseract.image_to_string(crop_image_22_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_total)
                sheet.write('A452', result_22_total)
                if result_22_total[0:1] == str(9):
                    crop_image_22_total = crop_image_22[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_22_total = cv.cvtColor(crop_image_22_total, cv.COLOR_BGR2GRAY)
                    kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_22_total = cv.morphologyEx(crop_image_22_total, cv.MORPH_CLOSE, kernel_22)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_22_total = pytesseract.image_to_string(crop_image_22_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_22_total)
                        sheet.write('A452', result_22_total)
            # Espessura_22
            crop_image_22_espessura = crop_image_22[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_espessura = pytesseract.image_to_string(crop_image_22_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_espessura)
                sheet.write('A453', result_22_espessura)
            # Cor_1_22
            crop_image_22_1_cor = crop_image_22[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_22_1_cor = cv.fastNlMeansDenoisingColored(crop_image_22_1_cor, None, 10, 10, 7, 21)
            crop_image_22_1_cor = cv.cvtColor(crop_image_22_1_cor, cv.COLOR_BGR2GRAY)
            kernel_22_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_1_cor = cv.morphologyEx(crop_image_22_1_cor, cv.MORPH_CLOSE, kernel_22_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_1_cor = pytesseract.image_to_string(
                crop_image_22_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_1_cor)
                sheet.write('B454', result_22_1_cor)
            # Cor_2_22
            crop_image_22_2_cor = crop_image_22[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_22_2_cor = cv.fastNlMeansDenoisingColored(crop_image_22_2_cor, None, 10, 10, 7, 21)
            crop_image_22_2_cor = cv.cvtColor(crop_image_22_2_cor, cv.COLOR_BGR2GRAY)
            kernel_22_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_2_cor = cv.morphologyEx(crop_image_22_2_cor, cv.MORPH_CLOSE, kernel_22_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_2_cor = pytesseract.image_to_string(
                crop_image_22_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_2_cor)
                sheet.write('C454', result_22_2_cor)
            # Cor_3_22
            crop_image_22_3_cor = crop_image_22[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_22_3_cor = cv.fastNlMeansDenoisingColored(crop_image_22_3_cor, None, 10, 10, 7, 21)
            crop_image_22_3_cor = cv.cvtColor(crop_image_22_3_cor, cv.COLOR_BGR2GRAY)
            kernel_22_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_3_cor = cv.morphologyEx(crop_image_22_3_cor, cv.MORPH_CLOSE, kernel_22_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_3_cor = pytesseract.image_to_string(
                crop_image_22_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_3_cor)
                sheet.write('D454', result_22_3_cor)
            # Cor_4_22
            crop_image_22_4_cor = crop_image_22[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_22_4_cor = cv.fastNlMeansDenoisingColored(crop_image_22_4_cor, None, 10, 10, 7, 21)
            crop_image_22_4_cor = cv.cvtColor(crop_image_22_4_cor, cv.COLOR_BGR2GRAY)
            kernel_22_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_4_cor = cv.morphologyEx(crop_image_22_4_cor, cv.MORPH_CLOSE, kernel_22_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_4_cor = pytesseract.image_to_string(
                crop_image_22_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_4_cor)
                sheet.write('E454', result_22_4_cor)
            # Cor_5_22
            crop_image_22_5_cor = crop_image_22[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_22_5_cor = cv.fastNlMeansDenoisingColored(crop_image_22_5_cor, None, 10, 10, 7, 21)
            crop_image_22_5_cor = cv.cvtColor(crop_image_22_5_cor, cv.COLOR_BGR2GRAY)
            kernel_22_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_5_cor = cv.morphologyEx(crop_image_22_5_cor, cv.MORPH_CLOSE, kernel_22_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_5_cor = pytesseract.image_to_string(
                crop_image_22_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_5_cor)
                sheet.write('F454', result_22_5_cor)
            # Cor_6_22
            crop_image_22_6_cor = crop_image_22[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_22_6_cor = cv.fastNlMeansDenoisingColored(crop_image_22_6_cor, None, 10, 10, 7, 21)
            crop_image_22_6_cor = cv.cvtColor(crop_image_22_6_cor, cv.COLOR_BGR2GRAY)
            kernel_22_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_6_cor = cv.morphologyEx(crop_image_22_6_cor, cv.MORPH_CLOSE, kernel_22_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_6_cor = pytesseract.image_to_string(
                crop_image_22_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_6_cor)
                sheet.write('G454', result_22_6_cor)
            # Cor_fabricada_22
            crop_image_22_fabricada_cor = crop_image_22[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_22_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_22_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_22_fabricada_cor = cv.cvtColor(crop_image_22_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_22_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_fabricada_cor = cv.morphologyEx(crop_image_22_fabricada_cor, cv.MORPH_CLOSE, kernel_22_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_22_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H454', result_fabricada_cor)
        if 23 <= numero_quadros:
            crop_image_23 = img1[novo_y_1 * 22:novo_y_1 * 23]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_23
            crop_image_23_dimensoes = crop_image_23[q + 60:a - 20, z:p]
            crop_image_23_dimensoes = cv.cvtColor(crop_image_23_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_dimensoes = pytesseract.image_to_string(crop_image_23_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_dimensoes)
                # Escrever infomação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A463', result_23_dimensoes)
            # Unidades_23
            crop_image_23_unidades = crop_image_23[(q + (422 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_23_unidades = cv.fastNlMeansDenoisingColored(crop_image_23_unidades, None, 10, 10, 7, 21)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_unidades = cv.morphologyEx(crop_image_23_unidades, cv.MORPH_CLOSE, kernel_23)
            crop_image_23_unidades = cv.cvtColor(crop_image_23_unidades, cv.COLOR_BGR2GRAY)
            crop_image_23_unidades = cv.threshold(crop_image_23_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_unidades = pytesseract.image_to_string(
                crop_image_23_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_23_unidades == "" or result_23_unidades[0] == str(4) \
                    or result_23_unidades[0:2] == str(28) or result_23_unidades[0:2] == str(29) or result_23_unidades[0:1] == str(0):
                crop_image_23_unidades = crop_image_23[(q + (422 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_23_unidades = cv.fastNlMeansDenoisingColored(crop_image_23_unidades, None, 10, 10, 7, 21)
                kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_23_unidades = cv.morphologyEx(crop_image_23_unidades, cv.MORPH_CLOSE, kernel_23)
                crop_image_23_unidades = cv.cvtColor(crop_image_23_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_23_unidades = pytesseract.image_to_string(
                    crop_image_23_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_23_unidades[0:1] == str(0):
                    crop_image_23_unidades = crop_image_23[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_23_unidades = cv.fastNlMeansDenoisingColored(crop_image_23_unidades, None, 10, 10, 7, 21)
                    kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_23_unidades = cv.morphologyEx(crop_image_23_unidades, cv.MORPH_CLOSE, kernel_23)
                    crop_image_23_unidades = cv.cvtColor(crop_image_23_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_23_unidades = pytesseract.image_to_string(
                        crop_image_23_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_23_unidades)
                sheet.write('A464', result_23_unidades)
            # cliche_23
            crop_image_23_cliche = crop_image_23[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_23_cliche = cv.cvtColor(crop_image_23_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_cliche = pytesseract.image_to_string(
                crop_image_23_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_cliche)
                sheet.write('A465', result_23_cliche)
            # Tinta_23
            crop_image_23_tinta = crop_image_23[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_23_tinta = cv.fastNlMeansDenoisingColored(crop_image_23_tinta, None, 10, 10, 7, 21)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_tinta = cv.morphologyEx(crop_image_23_tinta, cv.MORPH_CLOSE, kernel_23)
            crop_image_23_tinta = cv.cvtColor(crop_image_23_tinta, cv.COLOR_BGR2GRAY)
            crop_image_23_tinta = cv.threshold(crop_image_23_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_tinta = pytesseract.image_to_string(
                crop_image_23_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_tinta)
                sheet.write('A466', result_23_tinta)
            # n_cores_23
            crop_image_23_n_cores = crop_image_23[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_23_n_cores = cv.fastNlMeansDenoisingColored(crop_image_23_n_cores, None, 10, 10, 7, 21)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_n_cores = cv.morphologyEx(crop_image_23_n_cores, cv.MORPH_CLOSE, kernel_23)
            crop_image_23_n_cores = cv.cvtColor(crop_image_23_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_23_n_cores = cv.threshold(crop_image_23_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_n_cores = pytesseract.image_to_string(
                crop_image_23_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_n_cores)
                sheet.write('A467', result_23_n_cores)
            # n_caixas_23
            crop_image_23_n_caixas = crop_image_23[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_n_caixas = pytesseract.image_to_string(crop_image_23_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_n_caixas)
                sheet.write('A468', result_23_n_caixas)
            # tipo_clientes_23
            crop_image_23_tipo_clientes = crop_image_23[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_23_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_23_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_tipo_clientes = cv.morphologyEx(crop_image_23_tipo_clientes, cv.MORPH_CLOSE, kernel_23)
            crop_image_23_tipo_clientes = cv.cvtColor(crop_image_23_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_tipo_clientes = pytesseract.image_to_string(
                crop_image_23_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_tipo_clientes)
                sheet.write('A469', result_23_tipo_clientes)
            # Servicos_23
            crop_image_23_servicos_1 = crop_image_23[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_servicos_1 = pytesseract.image_to_string(crop_image_23_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_servicos_1)
                sheet.write('A470', result_23_servicos_1)
            # Servicos_2_23
            crop_image_23_servicos_2 = crop_image_23[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_servicos_2 = pytesseract.image_to_string(crop_image_23_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_servicos_2)
                sheet.write('A471', result_23_servicos_2)
            # Caixas_1_23
            crop_image_23_caixas = crop_image_23[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_23_caixas = cv.cvtColor(crop_image_23_caixas, cv.COLOR_BGR2GRAY)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_caixas = cv.morphologyEx(crop_image_23_caixas, cv.MORPH_CLOSE, kernel_23)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_caixas = pytesseract.image_to_string(crop_image_23_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_caixas)
                sheet.write('A472', result_23_caixas)
            # Total_23
            crop_image_23_total = crop_image_23[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_23_total = cv.cvtColor(crop_image_23_total, cv.COLOR_BGR2GRAY)
            crop_image_23_total = cv.threshold(crop_image_23_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_total = cv.morphologyEx(crop_image_23_total, cv.MORPH_CLOSE, kernel_23)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_total = pytesseract.image_to_string(crop_image_23_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_total)
                sheet.write('A473', result_23_total)
                if result_23_total[0:1] == str(9):
                    crop_image_23_total = crop_image_23[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_23_total = cv.cvtColor(crop_image_23_total, cv.COLOR_BGR2GRAY)
                    kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_23_total = cv.morphologyEx(crop_image_23_total, cv.MORPH_CLOSE, kernel_23)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_23_total = pytesseract.image_to_string(crop_image_23_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_23_total)
                        sheet.write('A473', result_23_total)
            # Espessura_23
            crop_image_23_espessura = crop_image_23[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_espessura = pytesseract.image_to_string(crop_image_23_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_espessura)
                sheet.write('A474', result_23_espessura)
            # Cor_1_23
            crop_image_23_1_cor = crop_image_23[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_23_1_cor = cv.fastNlMeansDenoisingColored(crop_image_23_1_cor, None, 10, 10, 7, 21)
            crop_image_23_1_cor = cv.cvtColor(crop_image_23_1_cor, cv.COLOR_BGR2GRAY)
            kernel_23_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_1_cor = cv.morphologyEx(crop_image_23_1_cor, cv.MORPH_CLOSE, kernel_23_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_1_cor = pytesseract.image_to_string(
                crop_image_23_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_1_cor)
                sheet.write('B475', result_23_1_cor)
            # Cor_2_23
            crop_image_23_2_cor = crop_image_23[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_23_2_cor = cv.fastNlMeansDenoisingColored(crop_image_23_2_cor, None, 10, 10, 7, 21)
            crop_image_23_2_cor = cv.cvtColor(crop_image_23_2_cor, cv.COLOR_BGR2GRAY)
            kernel_23_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_2_cor = cv.morphologyEx(crop_image_23_2_cor, cv.MORPH_CLOSE, kernel_23_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_2_cor = pytesseract.image_to_string(
                crop_image_23_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_2_cor)
                sheet.write('C475', result_23_2_cor)
            # Cor_3_23
            crop_image_23_3_cor = crop_image_23[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_23_3_cor = cv.fastNlMeansDenoisingColored(crop_image_23_3_cor, None, 10, 10, 7, 21)
            crop_image_23_3_cor = cv.cvtColor(crop_image_23_3_cor, cv.COLOR_BGR2GRAY)
            kernel_23_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_3_cor = cv.morphologyEx(crop_image_23_3_cor, cv.MORPH_CLOSE, kernel_23_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_3_cor = pytesseract.image_to_string(
                crop_image_23_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_3_cor)
                sheet.write('D475', result_23_3_cor)
            # Cor_4_23
            crop_image_23_4_cor = crop_image_23[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_23_4_cor = cv.fastNlMeansDenoisingColored(crop_image_23_4_cor, None, 10, 10, 7, 21)
            crop_image_23_4_cor = cv.cvtColor(crop_image_23_4_cor, cv.COLOR_BGR2GRAY)
            kernel_23_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_4_cor = cv.morphologyEx(crop_image_23_4_cor, cv.MORPH_CLOSE, kernel_23_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_4_cor = pytesseract.image_to_string(
                crop_image_23_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_4_cor)
                sheet.write('E475', result_23_4_cor)
            # Cor_5_23
            crop_image_23_5_cor = crop_image_23[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_23_5_cor = cv.fastNlMeansDenoisingColored(crop_image_23_5_cor, None, 10, 10, 7, 21)
            crop_image_23_5_cor = cv.cvtColor(crop_image_23_5_cor, cv.COLOR_BGR2GRAY)
            kernel_23_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_5_cor = cv.morphologyEx(crop_image_23_5_cor, cv.MORPH_CLOSE, kernel_23_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_5_cor = pytesseract.image_to_string(
                crop_image_23_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_5_cor)
                sheet.write('F475', result_23_5_cor)
            # Cor_6_23
            crop_image_23_6_cor = crop_image_23[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_23_6_cor = cv.fastNlMeansDenoisingColored(crop_image_23_6_cor, None, 10, 10, 7, 21)
            crop_image_23_6_cor = cv.cvtColor(crop_image_23_6_cor, cv.COLOR_BGR2GRAY)
            kernel_23_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_6_cor = cv.morphologyEx(crop_image_23_6_cor, cv.MORPH_CLOSE, kernel_23_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_6_cor = pytesseract.image_to_string(
                crop_image_23_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_6_cor)
                sheet.write('G475', result_23_6_cor)
            # Cor_fabricada_23
            crop_image_23_fabricada_cor = crop_image_23[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_23_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_23_fabricada_cor,
                                                                         None, 10, 10, 7, 21)
            crop_image_23_fabricada_cor = cv.cvtColor(crop_image_23_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_23_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_fabricada_cor = cv.morphologyEx(crop_image_23_fabricada_cor, cv.MORPH_CLOSE, kernel_23_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_23_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H475', result_fabricada_cor)
        if 24 <= numero_quadros:
            crop_image_24 = img1[novo_y_1 * 23:novo_y_1 * 24]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_24
            crop_image_24_dimensoes = crop_image_24[q + 60:a - 20, z:p]
            crop_image_24_dimensoes = cv.cvtColor(crop_image_24_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_dimensoes = pytesseract.image_to_string(crop_image_24_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A484', result_24_dimensoes)
            # Unidades_24
            crop_image_24_unidades = crop_image_24[(q + (422 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_24_unidades = cv.fastNlMeansDenoisingColored(crop_image_24_unidades, None, 10, 10, 7, 21)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_unidades = cv.morphologyEx(crop_image_24_unidades, cv.MORPH_CLOSE, kernel_24)
            crop_image_24_unidades = cv.cvtColor(crop_image_24_unidades, cv.COLOR_BGR2GRAY)
            crop_image_24_unidades = cv.threshold(crop_image_24_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_unidades = pytesseract.image_to_string(
                crop_image_24_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_24_unidades == "" or result_24_unidades[0] == str(4) \
                    or result_24_unidades[0:2] == str(28) or result_24_unidades[0:2] == str(29) or result_24_unidades[0:1] == str(0):
                crop_image_24_unidades = crop_image_24[(q + (422 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_24_unidades = cv.fastNlMeansDenoisingColored(crop_image_24_unidades, None, 10, 10, 7, 21)
                kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_24_unidades = cv.morphologyEx(crop_image_24_unidades, cv.MORPH_CLOSE, kernel_24)
                crop_image_24_unidades = cv.cvtColor(crop_image_24_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_24_unidades = pytesseract.image_to_string(
                    crop_image_24_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
                if result_24_unidades[0:1] == str(0):
                    crop_image_24_unidades = crop_image_24[(q + (412 - numero_quadros + 3)):(a + 340),
                                            (z + 850):(p + 402)]
                    crop_image_24_unidades = cv.fastNlMeansDenoisingColored(crop_image_24_unidades, None, 10, 10, 7, 21)
                    kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_24_unidades = cv.morphologyEx(crop_image_24_unidades, cv.MORPH_CLOSE, kernel_24)
                    crop_image_24_unidades = cv.cvtColor(crop_image_24_unidades, cv.COLOR_BGR2GRAY)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_24_unidades = pytesseract.image_to_string(
                        crop_image_24_unidades, config='--psm 6 digits -c tessedit_char_whitelist=1234567890')
                else:
                    pass
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_24_unidades)
                sheet.write('A485', result_24_unidades)
            # cliche_24
            crop_image_24_cliche = crop_image_24[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_24_cliche = cv.cvtColor(crop_image_24_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_cliche = pytesseract.image_to_string(
                crop_image_24_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_cliche)
                sheet.write('A486', result_24_cliche)
            # Tinta_24
            crop_image_24_tinta = crop_image_24[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_24_tinta = cv.fastNlMeansDenoisingColored(crop_image_24_tinta, None, 10, 10, 7, 21)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_tinta = cv.morphologyEx(crop_image_24_tinta, cv.MORPH_CLOSE, kernel_24)
            crop_image_24_tinta = cv.cvtColor(crop_image_24_tinta, cv.COLOR_BGR2GRAY)
            crop_image_24_tinta = cv.threshold(crop_image_24_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_tinta = pytesseract.image_to_string(
                crop_image_24_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_tinta)
                sheet.write('A487', result_24_tinta)
            # n_cores_24
            crop_image_24_n_cores = crop_image_24[(q - 2500):(a - 250), (z + 5480):(p + 4920)]
            crop_image_24_n_cores = cv.fastNlMeansDenoisingColored(crop_image_24_n_cores, None, 10, 10, 7, 21)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_n_cores = cv.morphologyEx(crop_image_24_n_cores, cv.MORPH_CLOSE, kernel_24)
            crop_image_24_n_cores = cv.cvtColor(crop_image_24_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_24_n_cores = cv.threshold(crop_image_24_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_n_cores = pytesseract.image_to_string(
                crop_image_24_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_n_cores)
                sheet.write('A488', result_24_n_cores)
            # n_caixas_24
            crop_image_24_n_caixas = crop_image_24[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_n_caixas = pytesseract.image_to_string(crop_image_24_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_n_caixas)
                sheet.write('A489', result_24_n_caixas)
            # tipo_clientes_24
            crop_image_24_tipo_clientes = crop_image_24[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_24_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_24_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_tipo_clientes = cv.morphologyEx(crop_image_24_tipo_clientes, cv.MORPH_CLOSE, kernel_24)
            crop_image_24_tipo_clientes = cv.cvtColor(crop_image_24_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_tipo_clientes = pytesseract.image_to_string(
                crop_image_24_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_tipo_clientes)
                sheet.write('A490', result_24_tipo_clientes)
            # Servicos_24
            crop_image_24_servicos_1 = crop_image_24[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_servicos_1 = pytesseract.image_to_string(crop_image_24_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_servicos_1)
                sheet.write('A491', result_24_servicos_1)
            # Servicos_2_24
            crop_image_24_servicos_2 = crop_image_24[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_servicos_2 = pytesseract.image_to_string(crop_image_24_servicos_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_servicos_2)
                sheet.write('A492', result_24_servicos_2)
            # Caixas_1_24
            crop_image_24_caixas = crop_image_24[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_24_caixas = cv.cvtColor(crop_image_24_caixas, cv.COLOR_BGR2GRAY)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_caixas = cv.morphologyEx(crop_image_24_caixas, cv.MORPH_CLOSE, kernel_24)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_caixas = pytesseract.image_to_string(crop_image_24_caixas,
                                                            config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_caixas)
                sheet.write('A493', result_24_caixas)
            # Total_24
            crop_image_24_total = crop_image_24[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
            crop_image_24_total = cv.cvtColor(crop_image_24_total, cv.COLOR_BGR2GRAY)
            crop_image_24_total = cv.threshold(crop_image_24_total, 220, 255, cv.THRESH_BINARY)[1]
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_total = cv.morphologyEx(crop_image_24_total, cv.MORPH_CLOSE, kernel_24)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_total = pytesseract.image_to_string(crop_image_24_total, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_total)
                sheet.write('A494', result_24_total)
                if result_24_total[0:1] == str(9):
                    crop_image_24_total = crop_image_24[(q + 1000):(a + 1120), (z + 2700):(p + 2620)]
                    crop_image_24_total = cv.cvtColor(crop_image_24_total, cv.COLOR_BGR2GRAY)
                    kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                    crop_image_24_total = cv.morphologyEx(crop_image_24_total, cv.MORPH_CLOSE, kernel_24)
                    pytesseract.pytesseract.tesseract_cmd = Path(j)
                    result_24_total = pytesseract.image_to_string(crop_image_24_total, config='--psm 6')
                    with open('abc.txt', mode='w') as file:
                        file.write(result_24_total)
                        sheet.write('A494', result_24_total)
            # Espessura_24
            crop_image_24_espessura = crop_image_24[(q + 60):(a + 100), (z + 5250):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_espessura = pytesseract.image_to_string(crop_image_24_espessura,
                                                              config='--psm 7 -c tessedit_char_whitelist=0123456789')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_espessura)
                sheet.write('A495', result_24_espessura)
            # Cor_1_24
            crop_image_24_1_cor = crop_image_24[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_24_1_cor = cv.fastNlMeansDenoisingColored(crop_image_24_1_cor, None, 10, 10, 7, 21)
            crop_image_24_1_cor = cv.cvtColor(crop_image_24_1_cor, cv.COLOR_BGR2GRAY)
            kernel_24_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_1_cor = cv.morphologyEx(crop_image_24_1_cor, cv.MORPH_CLOSE, kernel_24_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_1_cor = pytesseract.image_to_string(
                crop_image_24_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_1_cor)
                sheet.write('B496', result_24_1_cor)
            # Cor_2_24
            crop_image_24_2_cor = crop_image_24[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_24_2_cor = cv.fastNlMeansDenoisingColored(crop_image_24_2_cor, None, 10, 10, 7, 21)
            crop_image_24_2_cor = cv.cvtColor(crop_image_24_2_cor, cv.COLOR_BGR2GRAY)
            kernel_24_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_2_cor = cv.morphologyEx(crop_image_24_2_cor, cv.MORPH_CLOSE, kernel_24_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_2_cor = pytesseract.image_to_string(
                crop_image_24_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_2_cor)
                sheet.write('C496', result_24_2_cor)
            # Cor_3_24
            crop_image_24_3_cor = crop_image_24[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_24_3_cor = cv.fastNlMeansDenoisingColored(crop_image_24_3_cor, None, 10, 10, 7, 21)
            crop_image_24_3_cor = cv.cvtColor(crop_image_24_3_cor, cv.COLOR_BGR2GRAY)
            kernel_24_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_3_cor = cv.morphologyEx(crop_image_24_3_cor, cv.MORPH_CLOSE, kernel_24_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_3_cor = pytesseract.image_to_string(
                crop_image_24_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_3_cor)
                sheet.write('D496', result_24_3_cor)
            # Cor_4_24
            crop_image_24_4_cor = crop_image_24[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_24_4_cor = cv.fastNlMeansDenoisingColored(crop_image_24_4_cor, None, 10, 10, 7, 21)
            crop_image_24_4_cor = cv.cvtColor(crop_image_24_4_cor, cv.COLOR_BGR2GRAY)
            kernel_24_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_4_cor = cv.morphologyEx(crop_image_24_4_cor, cv.MORPH_CLOSE, kernel_24_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_4_cor = pytesseract.image_to_string(
                crop_image_24_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_4_cor)
                sheet.write('E496', result_24_4_cor)
            # Cor_5_24
            crop_image_24_5_cor = crop_image_24[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_24_5_cor = cv.fastNlMeansDenoisingColored(crop_image_24_5_cor, None, 10, 10, 7, 21)
            crop_image_24_5_cor = cv.cvtColor(crop_image_24_5_cor, cv.COLOR_BGR2GRAY)
            kernel_24_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_5_cor = cv.morphologyEx(crop_image_24_5_cor, cv.MORPH_CLOSE, kernel_24_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_5_cor = pytesseract.image_to_string(
                crop_image_24_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_5_cor)
                sheet.write('F496', result_24_5_cor)
            # Cor_6_24
            crop_image_24_6_cor = crop_image_24[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_24_6_cor = cv.fastNlMeansDenoisingColored(crop_image_24_6_cor, None, 10, 10, 7, 21)
            crop_image_24_6_cor = cv.cvtColor(crop_image_24_6_cor, cv.COLOR_BGR2GRAY)
            kernel_24_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_6_cor = cv.morphologyEx(crop_image_24_6_cor, cv.MORPH_CLOSE, kernel_24_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_6_cor = pytesseract.image_to_string(
                crop_image_24_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_6_cor)
                sheet.write('G496', result_24_6_cor)
            # Cor_fabricada_24
            crop_image_24_fabricada_cor = crop_image_24[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_24_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_24_fabricada_cor, None, 10, 10,
                                                                         7, 21)
            crop_image_24_fabricada_cor = cv.cvtColor(crop_image_24_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_24_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_fabricada_cor = cv.morphologyEx(crop_image_24_fabricada_cor, cv.MORPH_CLOSE, kernel_24_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_24_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H496', result_fabricada_cor)
        else:
            pass
        workbook.close()
        x = str(Path('C:', '/', 'Users'))
        y = str(Path(gt.getuser(), '/', gt.getuser()))
        z = "\Desktop\AUTO_ORC\Caracteristricas_ORC.xlsx"
        a = x + y + z
        absolutepath = Path(a).resolve()
        os.system(f'start excel.exe "{absolutepath}"')

    if cb_tipos_artigo.get() == '90':
        # Preço de compra para o Excel
        # Alterar todos
        # Preços de Compra:
        texto_precocompra = preco_compra.get()
        sheet.write('A36', texto_precocompra)




        # Espessuras
        texto_espessura = espessura.get()
        sheet.write('A39', texto_espessura)
        novo_y_1 = int(num_novos_y)
        if 1 <= numero_quadros:
            crop_image_1 = img1[0:novo_y_1]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_1
            crop_image_1_dimensoes = crop_image_1[q + 60:a - 20, z:p]
            crop_image_1_dimensoes = cv.cvtColor(crop_image_1_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_dimensoes = pytesseract.image_to_string(crop_image_1_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A1', result_1_dimensoes)
            # Unidades_1
            crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
            crop_image_1_unidades = cv.threshold(crop_image_1_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_unidades = pytesseract.image_to_string(
                crop_image_1_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_1_unidades == "" or result_1_unidades[0] == str(4) \
                    or result_1_unidades[0:2] == str(28) or result_1_unidades[0:2] == str(29):
                crop_image_1_unidades = crop_image_1[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_1_unidades = cv.fastNlMeansDenoisingColored(crop_image_1_unidades, None, 10, 10, 7, 21)
                kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_1_unidades = cv.morphologyEx(crop_image_1_unidades, cv.MORPH_CLOSE, kernel_1)
                crop_image_1_unidades = cv.cvtColor(crop_image_1_unidades, cv.COLOR_BGR2GRAY)
                crop_image_1_unidades = cv.threshold(crop_image_1_unidades, 220, 255, cv.THRESH_BINARY)[1]
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_1_unidades = pytesseract.image_to_string(
                    crop_image_1_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_1_unidades)
                sheet.write('A2', result_1_unidades)
            # cliche_1
            crop_image_1_cliche = crop_image_1[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_1_cliche = cv.cvtColor(crop_image_1_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_cliche = pytesseract.image_to_string(
                crop_image_1_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_cliche)
                sheet.write('A3', result_1_cliche)
            # Tinta_1
            crop_image_1_tinta = crop_image_1[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_1_tinta = cv.fastNlMeansDenoisingColored(crop_image_1_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_tinta = cv.morphologyEx(crop_image_1_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_tinta = cv.cvtColor(crop_image_1_tinta, cv.COLOR_BGR2GRAY)
            crop_image_1_tinta = cv.threshold(crop_image_1_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_tinta = pytesseract.image_to_string(
                crop_image_1_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_tinta)
                sheet.write('A4', result_1_tinta)
            # n_cores_1
            crop_image_1_n_cores = crop_image_1[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_1_n_cores = cv.fastNlMeansDenoisingColored(crop_image_1_n_cores, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_n_cores = cv.morphologyEx(crop_image_1_n_cores, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_n_cores = cv.cvtColor(crop_image_1_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_1_n_cores = cv.threshold(crop_image_1_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_n_cores = pytesseract.image_to_string(
                crop_image_1_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_n_cores)
                sheet.write('A5', result_1_n_cores)
            # n_caixas_1
            crop_image_1_n_caixas = crop_image_1[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_n_caixas = pytesseract.image_to_string(crop_image_1_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_n_caixas)
                sheet.write('A6', result_1_n_caixas)
            # tipo_clientes_1
            crop_image_1_tipo_clientes = crop_image_1[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_1_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_1_tipo_clientes, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_tipo_clientes = cv.morphologyEx(crop_image_1_tipo_clientes, cv.MORPH_CLOSE, kernel_1)
            crop_image_1_tipo_clientes = cv.cvtColor(crop_image_1_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_tipo_clientes = pytesseract.image_to_string(
                crop_image_1_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_tipo_clientes)
                sheet.write('A7', result_1_tipo_clientes)
            # Servicos_1
            crop_image_1_servicos_1 = crop_image_1[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = r'' \
                                                    r'tesseract.exe'
            result_1_servicos_1 = pytesseract.image_to_string(crop_image_1_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_servicos_1)
                sheet.write('A8', result_1_servicos_1)
            # Servicos_2_1
            crop_image_1_servicos_2 = crop_image_1[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_servicos_2 = pytesseract.image_to_string(crop_image_1_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_servicos_2)
                sheet.write('A9', result_1_servicos_2)
            # Caixas_1_1
            crop_image_1_caixas = crop_image_1[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_1_caixas = cv.cvtColor(crop_image_1_caixas, cv.COLOR_BGR2GRAY)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_caixas = cv.morphologyEx(crop_image_1_caixas, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_caixas = pytesseract.image_to_string(crop_image_1_caixas,
                                                          config='--psm 6 -c tessedit_char_whitelist=0123456789,€')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_caixas)
                sheet.write('A30', result_1_caixas)
            # Cor_1_1
            crop_image_1_1_cor = crop_image_1[(q - 230):(a - 260), (z + 6575):(p + 6225)]
            crop_image_1_1_cor = cv.fastNlMeansDenoisingColored(crop_image_1_1_cor, None, 10, 10, 7, 21)
            crop_image_1_1_cor = cv.cvtColor(crop_image_1_1_cor, cv.COLOR_BGR2GRAY)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_1_cor = cv.morphologyEx(crop_image_1_1_cor, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_1_cor = pytesseract.image_to_string(
                crop_image_1_1_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_1_cor)
                sheet.write('B13', result_1_1_cor)
            # Cor_2_1
            crop_image_1_2_cor = crop_image_1[(q + 90):(a + 60), (z + 6575):(p + 6225)]
            crop_image_1_2_cor = cv.fastNlMeansDenoisingColored(crop_image_1_2_cor, None, 10, 10, 7, 21)
            crop_image_1_2_cor = cv.cvtColor(crop_image_1_2_cor, cv.COLOR_BGR2GRAY)
            kernel_1_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_2_cor = cv.morphologyEx(crop_image_1_2_cor, cv.MORPH_CLOSE, kernel_1_2)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_2_cor = pytesseract.image_to_string(
                crop_image_1_2_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_2_cor)
                sheet.write('C13', result_1_2_cor)
            # Cor_3_1
            crop_image_1_3_cor = crop_image_1[(q + 400):(a + 380), (z + 6575):(p + 6225)]
            crop_image_1_3_cor = cv.fastNlMeansDenoisingColored(crop_image_1_3_cor, None, 10, 10, 7, 21)
            crop_image_1_3_cor = cv.cvtColor(crop_image_1_3_cor, cv.COLOR_BGR2GRAY)
            kernel_1_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_3_cor = cv.morphologyEx(crop_image_1_3_cor, cv.MORPH_CLOSE, kernel_1_3)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_3_cor = pytesseract.image_to_string(
                crop_image_1_3_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_3_cor)
                sheet.write('D13', result_1_3_cor)

            # Cor_4_1
            crop_image_1_4_cor = crop_image_1[(q + 740):(a + 690), (z + 6585):(p + 6215)]
            crop_image_1_4_cor = cv.fastNlMeansDenoisingColored(crop_image_1_4_cor, None, 10, 10, 7, 21)
            crop_image_1_4_cor = cv.cvtColor(crop_image_1_4_cor, cv.COLOR_BGR2GRAY)
            kernel_1_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_4_cor = cv.morphologyEx(crop_image_1_4_cor, cv.MORPH_CLOSE, kernel_1_4)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_4_cor = pytesseract.image_to_string(
                crop_image_1_4_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_4_cor)
                sheet.write('E13', result_1_4_cor)
            # Cor_5_1
            crop_image_1_5_cor = crop_image_1[(q + 1010):(a + 970), (z + 6575):(p + 6225)]
            crop_image_1_5_cor = cv.fastNlMeansDenoisingColored(crop_image_1_5_cor, None, 10, 10, 7, 21)
            crop_image_1_5_cor = cv.cvtColor(crop_image_1_5_cor, cv.COLOR_BGR2GRAY)
            kernel_1_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_5_cor = cv.morphologyEx(crop_image_1_5_cor, cv.MORPH_CLOSE, kernel_1_5)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_5_cor = pytesseract.image_to_string(
                crop_image_1_5_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_5_cor)
                sheet.write('F13', result_1_5_cor)
            # Cor_6_1
            crop_image_1_6_cor = crop_image_1[(q + 1290):(a + 1240), (z + 6575):(p + 6205)]
            crop_image_1_6_cor = cv.fastNlMeansDenoisingColored(crop_image_1_6_cor, None, 10, 10, 7, 21)
            crop_image_1_6_cor = cv.cvtColor(crop_image_1_6_cor, cv.COLOR_BGR2GRAY)
            kernel_1_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_1_6_cor = cv.morphologyEx(crop_image_1_6_cor, cv.MORPH_CLOSE, kernel_1_6)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_1_6_cor = pytesseract.image_to_string(
                crop_image_1_6_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_1_6_cor)
                sheet.write('G13', result_1_6_cor)
            # Cor_fabricada_1
            crop_image_fabricada_cor = crop_image_1[(q + 1535):(a + 1680), (z + 6575):(p + 6225)]
            crop_image_fabricada_cor = cv.fastNlMeansDenoisingColored(crop_image_fabricada_cor, None, 10, 10, 7,
                                                                      21)
            crop_image_fabricada_cor = cv.cvtColor(crop_image_fabricada_cor, cv.COLOR_BGR2GRAY)
            kernel_1_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_fabricada_cor = cv.morphologyEx(crop_image_fabricada_cor, cv.MORPH_CLOSE, kernel_1_7)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_fabricada_cor = pytesseract.image_to_string(
                crop_image_fabricada_cor, config='custom_config --psm 8')
            with open('abc.txt', mode='w') as file:
                file.write(result_fabricada_cor)
                sheet.write('H13', result_fabricada_cor)

        if 2 <= numero_quadros:

            crop_image_2 = img1[novo_y_1:novo_y_1*2]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_2
            crop_image_2_dimensoes = crop_image_2[q + 60:a - 20, z:p]
            crop_image_2_dimensoes = cv.cvtColor(crop_image_2_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_dimensoes = pytesseract.image_to_string(crop_image_2_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_dimensoes)

                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A22', result_2_dimensoes)
            # Unidades_2
            crop_image_2_unidades = crop_image_2[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_2_unidades = cv.fastNlMeansDenoisingColored(crop_image_2_unidades, None, 10, 10, 7, 21)
            kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_unidades = cv.morphologyEx(crop_image_2_unidades, cv.MORPH_CLOSE, kernel_2)
            crop_image_2_unidades = cv.cvtColor(crop_image_2_unidades, cv.COLOR_BGR2GRAY)
            crop_image_2_unidades = cv.threshold(crop_image_2_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_unidades = pytesseract.image_to_string(
                crop_image_2_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_2_unidades == "" or result_2_unidades[0] == str(4) \
                    or result_2_unidades[0:2] == str(28) or result_2_unidades[0:2] == str(29):
                crop_image_2_unidades = crop_image_2[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_2_unidades = cv.fastNlMeansDenoisingColored(crop_image_2_unidades, None, 10, 10, 7, 21)
                kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_2_unidades = cv.morphologyEx(crop_image_2_unidades, cv.MORPH_CLOSE, kernel_2)
                crop_image_2_unidades = cv.cvtColor(crop_image_2_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_2_unidades = pytesseract.image_to_string(
                    crop_image_2_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_2_unidades)
                sheet.write('A23', result_2_unidades)
            # cliche_2
            crop_image_2_cliche = crop_image_2[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_2_cliche = cv.cvtColor(crop_image_2_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_cliche = pytesseract.image_to_string(
                crop_image_2_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_cliche)
                sheet.write('A24', result_2_cliche)
            # Tinta_2
            crop_image_2_tinta = crop_image_2[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_2_tinta = cv.fastNlMeansDenoisingColored(crop_image_2_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_tinta = cv.morphologyEx(crop_image_2_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_2_tinta = cv.cvtColor(crop_image_2_tinta, cv.COLOR_BGR2GRAY)
            crop_image_2_tinta = cv.threshold(crop_image_2_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_tinta = pytesseract.image_to_string(
                crop_image_2_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_tinta)
                sheet.write('A25', result_2_tinta)
            # n_cores_2
            crop_image_2_n_cores = crop_image_2[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_2_n_cores = cv.fastNlMeansDenoisingColored(crop_image_2_n_cores, None, 10, 10, 7, 21)
            kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_n_cores = cv.morphologyEx(crop_image_2_n_cores, cv.MORPH_CLOSE, kernel_2)
            crop_image_2_n_cores = cv.cvtColor(crop_image_2_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_2_n_cores = cv.threshold(crop_image_2_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_n_cores = pytesseract.image_to_string(
                crop_image_2_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_n_cores)
                sheet.write('A26', result_2_n_cores)
            # n_caixas_2
            crop_image_2_n_caixas = crop_image_2[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_n_caixas = pytesseract.image_to_string(crop_image_2_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_n_caixas)
                sheet.write('A27', result_2_n_caixas)
            # tipo_clientes_2
            crop_image_2_tipo_clientes = crop_image_2[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_2_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_2_tipo_clientes, None, 10, 10, 7, 21)
            kernel_2 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_2_tipo_clientes = cv.morphologyEx(crop_image_2_tipo_clientes, cv.MORPH_CLOSE, kernel_2)
            crop_image_2_tipo_clientes = cv.cvtColor(crop_image_2_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_tipo_clientes = pytesseract.image_to_string(
                crop_image_2_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_tipo_clientes)
                sheet.write('A28', result_2_tipo_clientes)
            # Servicos_1_2
            crop_image_2_servicos_1 = crop_image_2[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_servicos_1 = pytesseract.image_to_string(crop_image_2_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_servicos_1)
                sheet.write('A29', result_2_servicos_1)
            # Servicos_2
            crop_image_2_servicos_1 = crop_image_2[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_2_servicos_1 = pytesseract.image_to_string(crop_image_2_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_2_servicos_1)
                sheet.write('A30', result_2_servicos_1)

        if 3 <= numero_quadros:
            crop_image_3 = img1[novo_y_1 * 2:novo_y_1 * 3]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_3
            crop_image_3_dimensoes = crop_image_3[q + 60:a - 20, z:p]
            crop_image_3_dimensoes = cv.cvtColor(crop_image_3_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_dimensoes = pytesseract.image_to_string(crop_image_3_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_dimensoes)
                # Escrever informação extraida(Celula A1 do documento Excel) no documento Excel
                sheet.write('A43', result_3_dimensoes)
            # Unidades_3
            crop_image_3_unidades = crop_image_3[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_3_unidades = cv.fastNlMeansDenoisingColored(crop_image_3_unidades, None, 10, 10, 7, 21)
            kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_unidades = cv.morphologyEx(crop_image_3_unidades, cv.MORPH_CLOSE, kernel_3)
            crop_image_3_unidades = cv.cvtColor(crop_image_3_unidades, cv.COLOR_BGR2GRAY)
            crop_image_3_unidades = cv.threshold(crop_image_3_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_unidades = pytesseract.image_to_string(
                crop_image_3_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_3_unidades == "" or result_3_unidades[0] == str(4) \
                    or result_3_unidades[0:2] == str(28) or result_3_unidades[0:2] == str(29):
                crop_image_3_unidades = crop_image_3[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_3_unidades = cv.fastNlMeansDenoisingColored(crop_image_3_unidades, None, 10, 10, 7, 21)
                kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_3_unidades = cv.morphologyEx(crop_image_3_unidades, cv.MORPH_CLOSE, kernel_3)
                crop_image_3_unidades = cv.cvtColor(crop_image_3_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_3_unidades = pytesseract.image_to_string(
                    crop_image_3_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_unidades)
                sheet.write('A44', result_3_unidades)
            # cliche_3
            crop_image_3_cliche = crop_image_3[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_3_cliche = cv.cvtColor(crop_image_3_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_cliche = pytesseract.image_to_string(
                crop_image_3_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_cliche)
                sheet.write('A45', result_3_cliche)
            # Tinta_3
            crop_image_3_tinta = crop_image_3[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_3_tinta = cv.fastNlMeansDenoisingColored(crop_image_3_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_tinta = cv.morphologyEx(crop_image_3_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_3_tinta = cv.cvtColor(crop_image_3_tinta, cv.COLOR_BGR2GRAY)
            crop_image_3_tinta = cv.threshold(crop_image_3_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_tinta = pytesseract.image_to_string(
                crop_image_3_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_tinta)
                sheet.write('A46', result_3_tinta)
            # n_cores_3
            crop_image_3_n_cores = crop_image_3[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_3_n_cores = cv.fastNlMeansDenoisingColored(crop_image_3_n_cores, None, 10, 10, 7, 21)
            kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_n_cores = cv.morphologyEx(crop_image_3_n_cores, cv.MORPH_CLOSE, kernel_3)
            crop_image_3_n_cores = cv.cvtColor(crop_image_3_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_3_n_cores = cv.threshold(crop_image_3_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_n_cores = pytesseract.image_to_string(
                crop_image_3_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_n_cores)
                sheet.write('A47', result_3_n_cores)
            # n_caixas_3
            crop_image_3_n_caixas = crop_image_3[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_n_caixas = pytesseract.image_to_string(crop_image_3_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_n_caixas)
                sheet.write('A48', result_3_n_caixas)
            # tipo_clientes_3
            crop_image_3_tipo_clientes = crop_image_3[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_3_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_3_tipo_clientes, None, 10, 10, 7, 21)
            kernel_3 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_tipo_clientes = cv.morphologyEx(crop_image_3_tipo_clientes, cv.MORPH_CLOSE, kernel_3)
            crop_image_3_tipo_clientes = cv.cvtColor(crop_image_3_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_tipo_clientes = pytesseract.image_to_string(
                crop_image_3_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_tipo_clientes)
                sheet.write('A49', result_3_tipo_clientes)
            # Servicos_3
            crop_image_3_servicos_1 = crop_image_3[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_servicos_1 = pytesseract.image_to_string(crop_image_3_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_servicos_1)
                sheet.write('A50', result_3_servicos_1)
            # Servicos_2_3
            crop_image_3_servicos_2 = crop_image_3[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_servicos_2 = pytesseract.image_to_string(crop_image_3_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_servicos_2)
                sheet.write('A51', result_3_servicos_2)
            # Caixas_2_3
            crop_image_3_caixas_2 = crop_image_3[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_3_caixas_2 = cv.cvtColor(crop_image_3_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_3_caixas_2 = cv.threshold(crop_image_3_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_3_caixas_2 = cv.morphologyEx(crop_image_3_caixas_2, cv.MORPH_CLOSE, kernel_1)

            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_3_caixas_2 = pytesseract.image_to_string(crop_image_3_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_3_caixas_2)
                sheet.write('A52', result_3_caixas_2)

        if 4 <= numero_quadros:
            crop_image_4 = img1[novo_y_1 * 3:novo_y_1 * 4]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_4
            crop_image_4_dimensoes = crop_image_4[q + 60:a - 20, z:p]
            crop_image_4_dimensoes = cv.cvtColor(crop_image_4_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_dimensoes = pytesseract.image_to_string(crop_image_4_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_dimensoes)
                sheet.write('A64', result_4_dimensoes)
            # Unidades_4
            crop_image_4_unidades = crop_image_4[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_4_unidades = cv.fastNlMeansDenoisingColored(crop_image_4_unidades, None, 10, 10, 7, 21)
            kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_unidades = cv.morphologyEx(crop_image_4_unidades, cv.MORPH_CLOSE, kernel_4)
            crop_image_4_unidades = cv.cvtColor(crop_image_4_unidades, cv.COLOR_BGR2GRAY)
            crop_image_4_unidades = cv.threshold(crop_image_4_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_unidades = pytesseract.image_to_string(
                crop_image_4_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_4_unidades == "" or result_4_unidades[0] == str(4) \
                    or result_4_unidades[0:2] == str(28) or result_4_unidades[0:2] == str(29):
                crop_image_4_unidades = crop_image_4[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_4_unidades = cv.fastNlMeansDenoisingColored(crop_image_4_unidades, None, 10, 10, 7, 21)
                kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_4_unidades = cv.morphologyEx(crop_image_4_unidades, cv.MORPH_CLOSE, kernel_4)
                crop_image_4_unidades = cv.cvtColor(crop_image_4_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_4_unidades = pytesseract.image_to_string(
                    crop_image_4_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_4_unidades)
                sheet.write('A65', result_4_unidades)
            # cliche_4
            crop_image_4_cliche = crop_image_4[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_4_cliche = cv.cvtColor(crop_image_4_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_cliche = pytesseract.image_to_string(
                crop_image_4_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_cliche)
                sheet.write('A66', result_4_cliche)
            # Tinta_4
            crop_image_4_tinta = crop_image_4[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_4_tinta = cv.fastNlMeansDenoisingColored(crop_image_4_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_tinta = cv.morphologyEx(crop_image_4_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_4_tinta = cv.cvtColor(crop_image_4_tinta, cv.COLOR_BGR2GRAY)
            crop_image_4_tinta = cv.threshold(crop_image_4_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_tinta = pytesseract.image_to_string(
                crop_image_4_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_tinta)
                sheet.write('A67', result_4_tinta)
            # n_cores_4
            crop_image_4_n_cores = crop_image_4[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_4_n_cores = cv.fastNlMeansDenoisingColored(crop_image_4_n_cores, None, 10, 10, 7, 21)
            kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_n_cores = cv.morphologyEx(crop_image_4_n_cores, cv.MORPH_CLOSE, kernel_4)
            crop_image_4_n_cores = cv.cvtColor(crop_image_4_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_4_n_cores = cv.threshold(crop_image_4_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_n_cores = pytesseract.image_to_string(
                crop_image_4_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_n_cores)
                sheet.write('A68', result_4_n_cores)
            # n_caixas_4
            crop_image_4_n_caixas = crop_image_4[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_n_caixas = pytesseract.image_to_string(crop_image_4_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_n_caixas)
                sheet.write('A69', result_4_n_caixas)
            # tipo_clientes_4
            crop_image_4_tipo_clientes = crop_image_4[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_4_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_4_tipo_clientes, None, 10, 10, 7, 21)
            kernel_4 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_tipo_clientes = cv.morphologyEx(crop_image_4_tipo_clientes, cv.MORPH_CLOSE, kernel_4)
            crop_image_4_tipo_clientes = cv.cvtColor(crop_image_4_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_tipo_clientes = pytesseract.image_to_string(
                crop_image_4_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_tipo_clientes)
                sheet.write('A70', result_4_tipo_clientes)
            # Servicos_4
            crop_image_4_servicos_1 = crop_image_4[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_servicos_1 = pytesseract.image_to_string(crop_image_4_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_servicos_1)
                sheet.write('A71', result_4_servicos_1)
            # Servicos_2_4
            crop_image_4_servicos_2 = crop_image_4[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_servicos_2 = pytesseract.image_to_string(crop_image_4_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_servicos_2)
                sheet.write('A72', result_4_servicos_2)
            # Caixas_1_4
            crop_image_4_caixas_1 = crop_image_4[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_4_caixas_1 = cv.cvtColor(crop_image_4_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_4_caixas_1 = cv.threshold(crop_image_4_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_caixas_1 = cv.morphologyEx(crop_image_4_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_caixas_1 = pytesseract.image_to_string(crop_image_4_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_caixas_1)
                sheet.write('A73', result_4_caixas_1)
            # Caixas_2_4
            crop_image_4_caixas_2 = crop_image_4[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_4_caixas_2 = cv.cvtColor(crop_image_4_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_4_caixas_2 = cv.threshold(crop_image_4_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_4_caixas_2 = cv.morphologyEx(crop_image_4_caixas_2, cv.MORPH_CLOSE, kernel_1)

            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_4_caixas_2 = pytesseract.image_to_string(crop_image_4_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_4_caixas_2)
                sheet.write('A74', result_4_caixas_2)
        if 5 <= numero_quadros:
            crop_image_5 = img1[novo_y_1 * 4:novo_y_1 * 5]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_5
            crop_image_5_dimensoes = crop_image_5[q + 60:a - 20, z:p]
            crop_image_5_dimensoes = cv.cvtColor(crop_image_5_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_dimensoes = pytesseract.image_to_string(crop_image_5_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_dimensoes)
                sheet.write('A85', result_5_dimensoes)
            # Unidades_5
            crop_image_5_unidades = crop_image_5[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_5_unidades = cv.fastNlMeansDenoisingColored(crop_image_5_unidades, None, 10, 10, 7, 21)
            kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_unidades = cv.morphologyEx(crop_image_5_unidades, cv.MORPH_CLOSE, kernel_5)
            crop_image_5_unidades = cv.cvtColor(crop_image_5_unidades, cv.COLOR_BGR2GRAY)
            crop_image_5_unidades = cv.threshold(crop_image_5_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_unidades = pytesseract.image_to_string(
                crop_image_5_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_5_unidades == "" or result_5_unidades[0] == str(4) \
                    or result_5_unidades[0:2] == str(28) or result_5_unidades[0:2] == str(29):
                crop_image_5_unidades = crop_image_5[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_5_unidades = cv.fastNlMeansDenoisingColored(crop_image_5_unidades, None, 10, 10, 7, 21)
                kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_5_unidades = cv.morphologyEx(crop_image_5_unidades, cv.MORPH_CLOSE, kernel_5)
                crop_image_5_unidades = cv.cvtColor(crop_image_5_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_5_unidades = pytesseract.image_to_string(
                    crop_image_5_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass

            with open('abc.txt', mode='w') as file:
                file.write(result_5_unidades)
                sheet.write('A86', result_5_unidades)
            # cliche_5
            crop_image_5_cliche = crop_image_5[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_5_cliche = cv.cvtColor(crop_image_5_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_cliche = pytesseract.image_to_string(
                crop_image_5_cliche,
                config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_cliche)
                sheet.write('A87', result_5_cliche)
            # Tinta_5
            crop_image_5_tinta = crop_image_5[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_5_tinta = cv.fastNlMeansDenoisingColored(crop_image_5_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_tinta = cv.morphologyEx(crop_image_5_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_5_tinta = cv.cvtColor(crop_image_5_tinta, cv.COLOR_BGR2GRAY)
            crop_image_5_tinta = cv.threshold(crop_image_5_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_tinta = pytesseract.image_to_string(
                crop_image_5_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_tinta)
                sheet.write('A88', result_5_tinta)
            # n_cores_5
            crop_image_5_n_cores = crop_image_5[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_5_n_cores = cv.fastNlMeansDenoisingColored(crop_image_5_n_cores, None, 10, 10, 7, 21)
            kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_n_cores = cv.morphologyEx(crop_image_5_n_cores, cv.MORPH_CLOSE, kernel_5)
            crop_image_5_n_cores = cv.cvtColor(crop_image_5_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_5_n_cores = cv.threshold(crop_image_5_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_n_cores = pytesseract.image_to_string(
                crop_image_5_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_n_cores)
                sheet.write('A89', result_5_n_cores)
            # n_caixas_5
            crop_image_5_n_caixas = crop_image_5[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_n_caixas = pytesseract.image_to_string(crop_image_5_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_n_caixas)
                sheet.write('A90', result_5_n_caixas)
            # tipo_clientes_5
            crop_image_5_tipo_clientes = crop_image_5[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_5_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_5_tipo_clientes, None, 10, 10, 7, 21)
            kernel_5 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_tipo_clientes = cv.morphologyEx(crop_image_5_tipo_clientes, cv.MORPH_CLOSE, kernel_5)
            crop_image_5_tipo_clientes = cv.cvtColor(crop_image_5_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_tipo_clientes = pytesseract.image_to_string(
                crop_image_5_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_tipo_clientes)
                sheet.write('A91', result_5_tipo_clientes)
            # Servicos_5
            crop_image_5_servicos_1 = crop_image_5[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_servicos_1 = pytesseract.image_to_string(
                crop_image_5_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_servicos_1)
                sheet.write('A92', result_5_servicos_1)
            # Servicos_2_5
            crop_image_5_servicos_2 = crop_image_5[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_servicos_2 = pytesseract.image_to_string(crop_image_5_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_servicos_2)
                sheet.write('A93', result_5_servicos_2)
            # Caixas_1_5
            crop_image_5_caixas_1 = crop_image_5[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_5_caixas_1 = cv.cvtColor(crop_image_5_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_5_caixas_1 = cv.threshold(crop_image_5_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_caixas_1 = cv.morphologyEx(crop_image_5_caixas_1, cv.MORPH_CLOSE, kernel_1)

            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_caixas_1 = pytesseract.image_to_string(crop_image_5_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_caixas_1)
                sheet.write('A94', result_5_caixas_1)
            # Caixas_2_5
            crop_image_5_caixas_2 = crop_image_5[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_5_caixas_2 = cv.cvtColor(crop_image_5_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_5_caixas_2 = cv.threshold(crop_image_5_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_5_caixas_2 = cv.morphologyEx(crop_image_5_caixas_2, cv.MORPH_CLOSE, kernel_1)

            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_5_caixas_2 = pytesseract.image_to_string(crop_image_5_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_5_caixas_2)
                sheet.write('A95', result_5_caixas_2)
        if 6 <= numero_quadros:
            crop_image_6 = img1[novo_y_1 * 5:novo_y_1 * 6]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_6
            crop_image_6_dimensoes = crop_image_6[q + 60:a - 20, z:p]
            crop_image_6_dimensoes = cv.cvtColor(crop_image_6_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_dimensoes = pytesseract.image_to_string(crop_image_6_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_dimensoes)
                sheet.write('A106', result_6_dimensoes)
            # Unidades_6
            crop_image_6_unidades = crop_image_6[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_6_unidades = cv.fastNlMeansDenoisingColored(crop_image_6_unidades, None, 10, 10, 7, 21)
            kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_unidades = cv.morphologyEx(crop_image_6_unidades, cv.MORPH_CLOSE, kernel_6)
            crop_image_6_unidades = cv.cvtColor(crop_image_6_unidades, cv.COLOR_BGR2GRAY)
            crop_image_6_unidades = cv.threshold(crop_image_6_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_unidades = pytesseract.image_to_string(
                crop_image_6_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_6_unidades == "" or result_6_unidades[0] == str(4) \
                    or result_6_unidades[0:2] == str(28) or result_6_unidades[0:2] == str(29):
                crop_image_6_unidades = crop_image_6[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_6_unidades = cv.fastNlMeansDenoisingColored(crop_image_6_unidades, None, 10, 10, 7, 21)
                kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_6_unidades = cv.morphologyEx(crop_image_6_unidades, cv.MORPH_CLOSE, kernel_6)
                crop_image_6_unidades = cv.cvtColor(crop_image_6_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_6_unidades = pytesseract.image_to_string(
                    crop_image_6_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_6_unidades)
                sheet.write('A107', result_6_unidades)
            # cliche_6
            crop_image_6_cliche = crop_image_6[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_6_cliche = cv.cvtColor(crop_image_6_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_cliche = pytesseract.image_to_string(
                crop_image_6_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_cliche)
                sheet.write('A108', result_6_cliche)
            # Tinta_6
            crop_image_6_tinta = crop_image_6[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_6_tinta = cv.fastNlMeansDenoisingColored(crop_image_6_tinta, None, 10, 10, 7, 21)
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_tinta = cv.morphologyEx(crop_image_6_tinta, cv.MORPH_CLOSE, kernel_1)
            crop_image_6_tinta = cv.cvtColor(crop_image_6_tinta, cv.COLOR_BGR2GRAY)
            crop_image_6_tinta = cv.threshold(crop_image_6_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_tinta = pytesseract.image_to_string(
                crop_image_6_tinta,
                config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_tinta)
                sheet.write('A109', result_6_tinta)
            # n_cores_6
            crop_image_6_n_cores = crop_image_6[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_6_n_cores = cv.fastNlMeansDenoisingColored(crop_image_6_n_cores, None, 10, 10, 7, 21)
            kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_n_cores = cv.morphologyEx(crop_image_6_n_cores, cv.MORPH_CLOSE, kernel_6)
            crop_image_6_n_cores = cv.cvtColor(crop_image_6_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_6_n_cores = cv.threshold(crop_image_6_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_n_cores = pytesseract.image_to_string(
                crop_image_6_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_n_cores)
                sheet.write('A110', result_6_n_cores)
            # n_caixas_6
            crop_image_6_n_caixas = crop_image_6[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_n_caixas = pytesseract.image_to_string(crop_image_6_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_n_caixas)
                sheet.write('A111', result_6_n_caixas)
            # tipo_clientes_6
            crop_image_6_tipo_clientes = crop_image_6[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_6_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_6_tipo_clientes, None, 10, 10, 7, 21)
            kernel_6 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_tipo_clientes = cv.morphologyEx(crop_image_6_tipo_clientes, cv.MORPH_CLOSE, kernel_6)
            crop_image_6_tipo_clientes = cv.cvtColor(crop_image_6_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_tipo_clientes = pytesseract.image_to_string(
                crop_image_6_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_tipo_clientes)
                sheet.write('A112', result_6_tipo_clientes)
            # Servicos_6
            crop_image_6_servicos_1 = crop_image_6[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_servicos_1 = pytesseract.image_to_string(crop_image_6_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_servicos_1)
                sheet.write('A113', result_6_servicos_1)
            # Servicos_2_6
            crop_image_6_servicos_2 = crop_image_6[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_servicos_2 = pytesseract.image_to_string(crop_image_6_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_servicos_2)
                sheet.write('A114', result_6_servicos_2)
            # Caixas_1_6
            crop_image_6_caixas_1 = crop_image_6[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_6_caixas_1 = cv.cvtColor(crop_image_6_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_6_caixas_1 = cv.threshold(crop_image_6_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_caixas_1 = cv.morphologyEx(crop_image_6_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_caixas_1 = pytesseract.image_to_string(crop_image_6_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_caixas_1)
                sheet.write('A115', result_6_caixas_1)
            # Caixas_2_6
            crop_image_6_caixas_2 = crop_image_6[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_6_caixas_2 = cv.cvtColor(crop_image_6_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_6_caixas_2 = cv.threshold(crop_image_6_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_6_caixas_2 = cv.morphologyEx(crop_image_6_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_6_caixas_2 = pytesseract.image_to_string(crop_image_6_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_6_caixas_2)
                sheet.write('A116', result_6_caixas_2)
        if 7 <= numero_quadros:
            crop_image_7 = img1[novo_y_1 * 6:novo_y_1 * 7]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_7
            crop_image_7_dimensoes = crop_image_7[q + 60:a - 20, z:p]
            crop_image_7_dimensoes = cv.cvtColor(crop_image_7_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_dimensoes = pytesseract.image_to_string(crop_image_7_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_dimensoes)
                sheet.write('A127', result_7_dimensoes)
            # Unidades_7
            crop_image_7_unidades = crop_image_7[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_7_unidades = cv.fastNlMeansDenoisingColored(crop_image_7_unidades, None, 10, 10, 7, 21)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_unidades = cv.morphologyEx(crop_image_7_unidades, cv.MORPH_CLOSE, kernel_7)
            crop_image_7_unidades = cv.cvtColor(crop_image_7_unidades, cv.COLOR_BGR2GRAY)
            crop_image_7_unidades = cv.threshold(crop_image_7_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_unidades = pytesseract.image_to_string(
                crop_image_7_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_7_unidades == "" or result_7_unidades[0] == str(4) \
                    or result_7_unidades[0:2] == str(28) or result_7_unidades[0:2] == str(29):
                crop_image_7_unidades = crop_image_7[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_7_unidades = cv.fastNlMeansDenoisingColored(crop_image_7_unidades, None, 10, 10, 7, 21)
                kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_7_unidades = cv.morphologyEx(crop_image_7_unidades, cv.MORPH_CLOSE, kernel_7)
                crop_image_7_unidades = cv.cvtColor(crop_image_7_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_7_unidades = pytesseract.image_to_string(
                    crop_image_7_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_unidades)
                sheet.write('A128', result_7_unidades)
            # cliche_7
            crop_image_7_cliche = crop_image_7[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_7_cliche = cv.cvtColor(crop_image_7_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_cliche = pytesseract.image_to_string(
                crop_image_7_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_cliche)
                sheet.write('A129', result_7_cliche)
            # Tinta_7
            crop_image_7_tinta = crop_image_7[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_7_tinta = cv.fastNlMeansDenoisingColored(crop_image_7_tinta, None, 10, 10, 7, 21)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_tinta = cv.morphologyEx(crop_image_7_tinta, cv.MORPH_CLOSE, kernel_7)
            crop_image_7_tinta = cv.cvtColor(crop_image_7_tinta, cv.COLOR_BGR2GRAY)
            crop_image_7_tinta = cv.threshold(crop_image_7_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_tinta = pytesseract.image_to_string(
                crop_image_7_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_tinta)
                sheet.write('A130', result_7_tinta)
            # n_cores_7
            crop_image_7_n_cores = crop_image_7[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_7_n_cores = cv.fastNlMeansDenoisingColored(crop_image_7_n_cores, None, 10, 10, 7, 21)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_n_cores = cv.morphologyEx(crop_image_7_n_cores, cv.MORPH_CLOSE, kernel_7)
            crop_image_7_n_cores = cv.cvtColor(crop_image_7_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_7_n_cores = cv.threshold(crop_image_7_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_n_cores = pytesseract.image_to_string(
                crop_image_7_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_n_cores)
                sheet.write('A131', result_7_n_cores)
            # n_caixas_7
            crop_image_7_n_caixas = crop_image_7[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_n_caixas = pytesseract.image_to_string(crop_image_7_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_n_caixas)
                sheet.write('A132', result_7_n_caixas)
            # tipo_clientes_7
            crop_image_7_tipo_clientes = crop_image_7[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_7_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_7_tipo_clientes, None, 10, 10, 7, 21)
            kernel_7 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_tipo_clientes = cv.morphologyEx(crop_image_7_tipo_clientes, cv.MORPH_CLOSE, kernel_7)
            crop_image_7_tipo_clientes = cv.cvtColor(crop_image_7_tipo_clientes, cv.COLOR_BGR2GRAY)

            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_tipo_clientes = pytesseract.image_to_string(
                crop_image_7_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_tipo_clientes)
                sheet.write('A133', result_7_tipo_clientes)
            # Servicos_7
            crop_image_7_servicos_1 = crop_image_7[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_servicos_1 = pytesseract.image_to_string(crop_image_7_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_servicos_1)
                sheet.write('A134', result_7_servicos_1)
            # Servicos_2_7
            crop_image_7_servicos_2 = crop_image_7[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_servicos_2 = pytesseract.image_to_string(crop_image_7_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_servicos_2)
                sheet.write('A135', result_7_servicos_2)
            # Caixas_1_7
            crop_image_7_caixas_1 = crop_image_7[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_7_caixas_1 = cv.cvtColor(crop_image_7_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_7_caixas_1 = cv.threshold(crop_image_7_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_caixas_1 = cv.morphologyEx(crop_image_7_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_caixas_1 = pytesseract.image_to_string(crop_image_7_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_caixas_1)
                sheet.write('A136', result_7_caixas_1)
            # Caixas_2_7
            crop_image_7_caixas_2 = crop_image_7[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_7_caixas_2 = cv.cvtColor(crop_image_7_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_7_caixas_2 = cv.threshold(crop_image_7_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_7_caixas_2 = cv.morphologyEx(crop_image_7_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_7_caixas_2 = pytesseract.image_to_string(crop_image_7_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_7_caixas_2)
                sheet.write('A137', result_7_caixas_2)
        if 8 <= numero_quadros:
            crop_image_8 = img1[novo_y_1 * 7:novo_y_1 * 8]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_8
            crop_image_8_dimensoes = crop_image_8[q + 60:a - 20, z:p]
            crop_image_8_dimensoes = cv.cvtColor(crop_image_8_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_dimensoes = pytesseract.image_to_string(crop_image_8_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_dimensoes)
                sheet.write('A148', result_8_dimensoes)
            # Unidades_8
            crop_image_8_unidades = crop_image_8[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_8_unidades = cv.fastNlMeansDenoisingColored(crop_image_8_unidades, None, 10, 10, 7, 21)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_unidades = cv.morphologyEx(crop_image_8_unidades, cv.MORPH_CLOSE, kernel_8)
            crop_image_8_unidades = cv.cvtColor(crop_image_8_unidades, cv.COLOR_BGR2GRAY)
            crop_image_8_unidades = cv.threshold(crop_image_8_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_unidades = pytesseract.image_to_string(
                crop_image_8_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_8_unidades == "" or result_8_unidades[0] == str(4) \
                    or result_8_unidades[0:2] == str(28) or result_8_unidades[0:2] == str(29):
                crop_image_8_unidades = crop_image_8[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_8_unidades = cv.fastNlMeansDenoisingColored(crop_image_8_unidades, None, 10, 10, 7, 21)
                kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_8_unidades = cv.morphologyEx(crop_image_8_unidades, cv.MORPH_CLOSE, kernel_8)
                crop_image_8_unidades = cv.cvtColor(crop_image_8_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_8_unidades = pytesseract.image_to_string(
                    crop_image_8_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_unidades)
                sheet.write('A149', result_8_unidades)
            # cliche_8
            crop_image_8_cliche = crop_image_8[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_8_cliche = cv.cvtColor(crop_image_8_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_cliche = pytesseract.image_to_string(
                crop_image_8_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_cliche)
                sheet.write('A150', result_8_cliche)
            # Tinta_8
            crop_image_8_tinta = crop_image_8[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_8_tinta = cv.fastNlMeansDenoisingColored(crop_image_8_tinta, None, 10, 10, 7, 21)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_tinta = cv.morphologyEx(crop_image_8_tinta, cv.MORPH_CLOSE, kernel_8)
            crop_image_8_tinta = cv.cvtColor(crop_image_8_tinta, cv.COLOR_BGR2GRAY)
            crop_image_8_tinta = cv.threshold(crop_image_8_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_tinta = pytesseract.image_to_string(
                crop_image_8_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_tinta)
                sheet.write('A151', result_8_tinta)
            # n_cores_8
            crop_image_8_n_cores = crop_image_8[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_8_n_cores = cv.fastNlMeansDenoisingColored(crop_image_8_n_cores, None, 10, 10, 7, 21)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_n_cores = cv.morphologyEx(crop_image_8_n_cores, cv.MORPH_CLOSE, kernel_8)
            crop_image_8_n_cores = cv.cvtColor(crop_image_8_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_8_n_cores = cv.threshold(crop_image_8_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_n_cores = pytesseract.image_to_string(
                crop_image_8_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_n_cores)
                sheet.write('A152', result_8_n_cores)
            # n_caixas_8
            crop_image_8_n_caixas = crop_image_8[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_n_caixas = pytesseract.image_to_string(crop_image_8_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_n_caixas)
                sheet.write('A153', result_8_n_caixas)
            # tipo_clientes_8
            crop_image_8_tipo_clientes = crop_image_8[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_8_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_8_tipo_clientes, None, 10, 10, 7, 21)
            kernel_8 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_tipo_clientes = cv.morphologyEx(crop_image_8_tipo_clientes, cv.MORPH_CLOSE, kernel_8)
            crop_image_8_tipo_clientes = cv.cvtColor(crop_image_8_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_tipo_clientes = pytesseract.image_to_string(
                crop_image_8_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_tipo_clientes)
                sheet.write('A154', result_8_tipo_clientes)
            # Servicos_8
            crop_image_8_servicos_1 = crop_image_8[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_servicos_1 = pytesseract.image_to_string(crop_image_8_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_servicos_1)
                sheet.write('A155', result_8_servicos_1)
            # Servicos_2_8
            crop_image_8_servicos_2 = crop_image_8[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_servicos_2 = pytesseract.image_to_string(crop_image_8_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_servicos_2)
                sheet.write('A156', result_8_servicos_2)
            # Caixas_1_8
            crop_image_8_caixas_1 = crop_image_8[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_8_caixas_1 = cv.cvtColor(crop_image_8_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_8_caixas_1 = cv.threshold(crop_image_8_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_caixas_1 = cv.morphologyEx(crop_image_8_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_caixas_1 = pytesseract.image_to_string(crop_image_8_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_caixas_1)
                sheet.write('A157', result_8_caixas_1)
            # Caixas_2_8
            crop_image_8_caixas_2 = crop_image_8[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_8_caixas_2 = cv.cvtColor(crop_image_8_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_8_caixas_2 = cv.threshold(crop_image_8_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_8_caixas_2 = cv.morphologyEx(crop_image_8_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_8_caixas_2 = pytesseract.image_to_string(crop_image_8_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_8_caixas_2)
                sheet.write('A158', result_8_caixas_2)
        if 9 <= numero_quadros:
            crop_image_9 = img1[novo_y_1 * 8:novo_y_1 * 9]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_9
            crop_image_9_dimensoes = crop_image_9[q + 60:a - 20, z:p]

            crop_image_9_dimensoes = cv.cvtColor(crop_image_9_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_dimensoes = pytesseract.image_to_string(
                crop_image_9_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_dimensoes)
                sheet.write('A169', result_9_dimensoes)
            # Unidades_9
            crop_image_9_unidades = crop_image_9[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_9_unidades = cv.fastNlMeansDenoisingColored(crop_image_9_unidades, None, 10, 10, 7, 21)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_unidades = cv.morphologyEx(crop_image_9_unidades, cv.MORPH_CLOSE, kernel_9)
            crop_image_9_unidades = cv.cvtColor(crop_image_9_unidades, cv.COLOR_BGR2GRAY)
            crop_image_9_unidades = cv.threshold(crop_image_9_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_unidades = pytesseract.image_to_string(
                crop_image_9_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_9_unidades == "" or result_9_unidades[0] == str(4) \
                    or result_9_unidades[0:2] == str(28) or result_9_unidades[0:2] == str(29):
                crop_image_9_unidades = crop_image_9[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_9_unidades = cv.fastNlMeansDenoisingColored(crop_image_9_unidades, None, 10, 10, 7, 21)
                kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_9_unidades = cv.morphologyEx(crop_image_9_unidades, cv.MORPH_CLOSE, kernel_9)
                crop_image_9_unidades = cv.cvtColor(crop_image_9_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_9_unidades = pytesseract.image_to_string(
                    crop_image_9_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_unidades)
                sheet.write('A170', result_9_unidades)
            # cliche_9
            crop_image_9_cliche = crop_image_9[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_9_cliche = cv.cvtColor(crop_image_9_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_cliche = pytesseract.image_to_string(
                crop_image_9_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_cliche)
                sheet.write('A171', result_9_cliche)
            # Tinta_9
            crop_image_9_tinta = crop_image_9[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_9_tinta = cv.fastNlMeansDenoisingColored(crop_image_9_tinta, None, 10, 10, 7, 21)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_tinta = cv.morphologyEx(crop_image_9_tinta, cv.MORPH_CLOSE, kernel_9)
            crop_image_9_tinta = cv.cvtColor(crop_image_9_tinta, cv.COLOR_BGR2GRAY)
            crop_image_9_tinta = cv.threshold(crop_image_9_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_tinta = pytesseract.image_to_string(
                crop_image_9_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_tinta)
                sheet.write('A172', result_9_tinta)
            # n_cores_9
            crop_image_9_n_cores = crop_image_9[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_9_n_cores = cv.fastNlMeansDenoisingColored(crop_image_9_n_cores, None, 10, 10, 7, 21)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_n_cores = cv.morphologyEx(crop_image_9_n_cores, cv.MORPH_CLOSE, kernel_9)
            crop_image_9_n_cores = cv.cvtColor(crop_image_9_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_9_n_cores = cv.threshold(crop_image_9_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_n_cores = pytesseract.image_to_string(
                crop_image_9_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_n_cores)
                sheet.write('A173', result_9_n_cores)
            # n_caixas_9
            crop_image_9_n_caixas = crop_image_9[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_n_caixas = pytesseract.image_to_string(crop_image_9_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_n_caixas)
                sheet.write('A174', result_9_n_caixas)
            # tipo_clientes_9
            crop_image_9_tipo_clientes = crop_image_9[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_9_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_9_tipo_clientes, None, 10, 10, 7, 21)
            kernel_9 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_tipo_clientes = cv.morphologyEx(crop_image_9_tipo_clientes, cv.MORPH_CLOSE, kernel_9)
            crop_image_9_tipo_clientes = cv.cvtColor(crop_image_9_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_tipo_clientes = pytesseract.image_to_string(
                crop_image_9_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_tipo_clientes)
                sheet.write('A175', result_9_tipo_clientes)
            # Servicos_9
            crop_image_9_servicos_1 = crop_image_9[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_servicos_1 = pytesseract.image_to_string(crop_image_9_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_servicos_1)
                sheet.write('A176', result_9_servicos_1)
            # Servicos_2_9
            crop_image_9_servicos_2 = crop_image_9[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_servicos_2 = pytesseract.image_to_string(crop_image_9_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_servicos_2)
                sheet.write('A177', result_9_servicos_2)
            # Caixas_1_9
            crop_image_9_caixas_1 = crop_image_9[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_9_caixas_1 = cv.cvtColor(crop_image_9_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_9_caixas_1 = cv.threshold(crop_image_9_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_caixas_1 = cv.morphologyEx(crop_image_9_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_caixas_1 = pytesseract.image_to_string(crop_image_9_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_caixas_1)
                sheet.write('A178', result_9_caixas_1)
            # Caixas_2_9
            crop_image_9_caixas_2 = crop_image_9[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_9_caixas_2 = cv.cvtColor(crop_image_9_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_9_caixas_2 = cv.threshold(crop_image_9_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_9_caixas_2 = cv.morphologyEx(crop_image_9_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_9_caixas_2 = pytesseract.image_to_string(crop_image_9_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_9_caixas_2)
                sheet.write('A179', result_9_caixas_2)
        if 10 <= numero_quadros:
            crop_image_10 = img1[novo_y_1 * 9:novo_y_1 * 10]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_10
            crop_image_10_dimensoes = crop_image_10[q + 60:a - 20, z:p]
            crop_image_10_dimensoes = cv.cvtColor(crop_image_10_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_dimensoes = pytesseract.image_to_string(crop_image_10_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_dimensoes)
                sheet.write('A190', result_10_dimensoes)
            # Unidades_10
            crop_image_10_unidades = crop_image_10[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_10_unidades = cv.fastNlMeansDenoisingColored(crop_image_10_unidades, None, 10, 10, 7, 21)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_unidades = cv.morphologyEx(crop_image_10_unidades, cv.MORPH_CLOSE, kernel_10)
            crop_image_10_unidades = cv.cvtColor(crop_image_10_unidades, cv.COLOR_BGR2GRAY)
            crop_image_10_unidades = cv.threshold(crop_image_10_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_unidades = pytesseract.image_to_string(
                crop_image_10_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_10_unidades == "" or result_10_unidades[0] == str(4) \
                    or result_10_unidades[0:2] == str(28) or result_10_unidades[0:2] == str(29):
                crop_image_10_unidades = crop_image_10[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_10_unidades = cv.fastNlMeansDenoisingColored(crop_image_10_unidades, None, 10, 10, 7, 21)
                kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_10_unidades = cv.morphologyEx(crop_image_10_unidades, cv.MORPH_CLOSE, kernel_10)
                crop_image_10_unidades = cv.cvtColor(crop_image_10_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_10_unidades = pytesseract.image_to_string(
                    crop_image_10_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_10_unidades)
                sheet.write('A191', result_10_unidades)
            # cliche_10
            crop_image_10_cliche = crop_image_10[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_10_cliche = cv.cvtColor(crop_image_10_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_cliche = pytesseract.image_to_string(
                crop_image_10_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_cliche)
                sheet.write('A192', result_10_cliche)
            # Tinta_10
            crop_image_10_tinta = crop_image_10[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_10_tinta = cv.fastNlMeansDenoisingColored(crop_image_10_tinta, None, 10, 10, 7, 21)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_tinta = cv.morphologyEx(crop_image_10_tinta, cv.MORPH_CLOSE, kernel_10)
            crop_image_10_tinta = cv.cvtColor(crop_image_10_tinta, cv.COLOR_BGR2GRAY)
            crop_image_10_tinta = cv.threshold(crop_image_10_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_tinta = pytesseract.image_to_string(
                crop_image_10_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_tinta)
                sheet.write('A193', result_10_tinta)
            # n_cores_10
            crop_image_10_n_cores = crop_image_10[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_10_n_cores = cv.fastNlMeansDenoisingColored(crop_image_10_n_cores, None, 10, 10, 7, 21)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_n_cores = cv.morphologyEx(crop_image_10_n_cores, cv.MORPH_CLOSE, kernel_10)
            crop_image_10_n_cores = cv.cvtColor(crop_image_10_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_10_n_cores = cv.threshold(crop_image_10_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_n_cores = pytesseract.image_to_string(
                crop_image_10_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_n_cores)
                sheet.write('A194', result_10_n_cores)
            # n_caixas_10
            crop_image_10_n_caixas = crop_image_10[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_n_caixas = pytesseract.image_to_string(crop_image_10_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_n_caixas)
                sheet.write('A195', result_10_n_caixas)
            # tipo_clientes_10
            crop_image_10_tipo_clientes = crop_image_10[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_10_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_10_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_10 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_tipo_clientes = cv.morphologyEx(crop_image_10_tipo_clientes, cv.MORPH_CLOSE, kernel_10)
            crop_image_10_tipo_clientes = cv.cvtColor(crop_image_10_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_tipo_clientes = pytesseract.image_to_string(
                crop_image_10_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_tipo_clientes)
                sheet.write('A196', result_10_tipo_clientes)
            # Servicos_10
            crop_image_10_servicos_1 = crop_image_10[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_servicos_1 = pytesseract.image_to_string(crop_image_10_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_servicos_1)
                sheet.write('A197', result_10_servicos_1)
            # Servicos_2_10
            crop_image_10_servicos_2 = crop_image_10[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_servicos_2 = pytesseract.image_to_string(crop_image_10_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_servicos_2)
                sheet.write('A198', result_10_servicos_2)
            # Caixas_1_10
            crop_image_10_caixas_1 = crop_image_10[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_10_caixas_1 = cv.cvtColor(crop_image_10_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_10_caixas_1 = cv.threshold(crop_image_10_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_caixas_1 = cv.morphologyEx(crop_image_10_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_caixas_1 = pytesseract.image_to_string(crop_image_10_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_caixas_1)
                sheet.write('A199', result_10_caixas_1)
            # Caixas_2_10
            crop_image_10_caixas_2 = crop_image_10[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_10_caixas_2 = cv.cvtColor(crop_image_10_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_10_caixas_2 = cv.threshold(crop_image_10_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_10_caixas_2 = cv.morphologyEx(crop_image_10_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_10_caixas_2 = pytesseract.image_to_string(crop_image_10_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_10_caixas_2)
                sheet.write('A200', result_10_caixas_2)
        if 11 <= numero_quadros:
            crop_image_11 = img1[novo_y_1 * 10:novo_y_1 * 11]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_11
            crop_image_11_dimensoes = crop_image_11[q + 60:a - 20, z:p]
            crop_image_11_dimensoes = cv.cvtColor(crop_image_11_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_dimensoes = pytesseract.image_to_string(crop_image_11_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_dimensoes)
                sheet.write('A211', result_11_dimensoes)
            # Unidades_11
            crop_image_11_unidades = crop_image_11[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_11_unidades = cv.fastNlMeansDenoisingColored(crop_image_11_unidades, None, 10, 10, 7, 21)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_unidades = cv.morphologyEx(crop_image_11_unidades, cv.MORPH_CLOSE, kernel_11)
            crop_image_11_unidades = cv.cvtColor(crop_image_11_unidades, cv.COLOR_BGR2GRAY)
            crop_image_11_unidades = cv.threshold(crop_image_11_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_unidades = pytesseract.image_to_string(
                crop_image_11_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_11_unidades == "" or result_11_unidades[0] == str(4) \
                    or result_11_unidades[0:2] == str(28) or result_11_unidades[0:2] == str(29):
                crop_image_11_unidades = crop_image_11[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_11_unidades = cv.fastNlMeansDenoisingColored(crop_image_11_unidades, None, 10, 10, 7, 21)
                kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_11_unidades = cv.morphologyEx(crop_image_11_unidades, cv.MORPH_CLOSE, kernel_11)
                crop_image_11_unidades = cv.cvtColor(crop_image_11_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_11_unidades = pytesseract.image_to_string(
                    crop_image_11_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_11_unidades)
                sheet.write('A212', result_11_unidades)
            # cliche_11
            crop_image_11_cliche = crop_image_11[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_11_cliche = cv.cvtColor(crop_image_11_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_cliche = pytesseract.image_to_string(
                crop_image_11_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_cliche)
                sheet.write('A213', result_11_cliche)
            # Tinta_11
            crop_image_11_tinta = crop_image_11[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_11_tinta = cv.fastNlMeansDenoisingColored(crop_image_11_tinta, None, 10, 10, 7, 21)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_tinta = cv.morphologyEx(crop_image_11_tinta, cv.MORPH_CLOSE, kernel_11)
            crop_image_11_tinta = cv.cvtColor(crop_image_11_tinta, cv.COLOR_BGR2GRAY)
            crop_image_11_tinta = cv.threshold(crop_image_11_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_tinta = pytesseract.image_to_string(
                crop_image_11_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_tinta)
                sheet.write('A214', result_11_tinta)
            # n_cores_11
            crop_image_11_n_cores = crop_image_11[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_11_n_cores = cv.fastNlMeansDenoisingColored(crop_image_11_n_cores, None, 10, 10, 7, 21)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_n_cores = cv.morphologyEx(crop_image_11_n_cores, cv.MORPH_CLOSE, kernel_11)
            crop_image_11_n_cores = cv.cvtColor(crop_image_11_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_11_n_cores = cv.threshold(crop_image_11_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_n_cores = pytesseract.image_to_string(
                crop_image_11_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_n_cores)
                sheet.write('A215', result_11_n_cores)
            # n_caixas_11
            crop_image_11_n_caixas = crop_image_11[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_n_caixas = pytesseract.image_to_string(crop_image_11_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_n_caixas)
                sheet.write('A216', result_11_n_caixas)
            # tipo_clientes_11
            crop_image_11_tipo_clientes = crop_image_11[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_11_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_11_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_11 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_tipo_clientes = cv.morphologyEx(crop_image_11_tipo_clientes, cv.MORPH_CLOSE, kernel_11)
            crop_image_11_tipo_clientes = cv.cvtColor(crop_image_11_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_tipo_clientes = pytesseract.image_to_string(
                crop_image_11_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_tipo_clientes)
                sheet.write('A217', result_11_tipo_clientes)
            # Servicos_11
            crop_image_11_servicos_1 = crop_image_11[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_servicos_1 = pytesseract.image_to_string(crop_image_11_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_servicos_1)
                sheet.write('A218', result_11_servicos_1)
            # Servicos_2_11
            crop_image_11_servicos_2 = crop_image_11[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_servicos_2 = pytesseract.image_to_string(crop_image_11_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_servicos_2)
                sheet.write('A219', result_11_servicos_2)
            # Caixas_1_11
            crop_image_11_caixas_1 = crop_image_11[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_11_caixas_1 = cv.cvtColor(crop_image_11_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_11_caixas_1 = cv.threshold(crop_image_11_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_caixas_1 = cv.morphologyEx(crop_image_11_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_caixas_1 = pytesseract.image_to_string(crop_image_11_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_caixas_1)
                sheet.write('A220', result_11_caixas_1)
            # Caixas_2_11
            crop_image_11_caixas_2 = crop_image_11[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_11_caixas_2 = cv.cvtColor(crop_image_11_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_11_caixas_2 = cv.threshold(crop_image_11_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_11_caixas_2 = cv.morphologyEx(crop_image_11_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_11_caixas_2 = pytesseract.image_to_string(crop_image_11_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_11_caixas_2)
                sheet.write('A221', result_11_caixas_2)
        if 12 <= numero_quadros:
            crop_image_12 = img1[novo_y_1 * 11:novo_y_1 * 12]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_12
            crop_image_12_dimensoes = crop_image_12[q + 60:a - 20, z:p]
            crop_image_12_dimensoes = cv.cvtColor(crop_image_12_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_dimensoes = pytesseract.image_to_string(crop_image_12_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_dimensoes)
                sheet.write('A232', result_12_dimensoes)
            # Unidades_12
            crop_image_12_unidades = crop_image_12[(q + (412 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_12_unidades = cv.fastNlMeansDenoisingColored(crop_image_12_unidades, None, 10, 10, 7, 21)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_unidades = cv.morphologyEx(crop_image_12_unidades, cv.MORPH_CLOSE, kernel_12)
            crop_image_12_unidades = cv.cvtColor(crop_image_12_unidades, cv.COLOR_BGR2GRAY)
            crop_image_12_unidades = cv.threshold(crop_image_12_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_unidades = pytesseract.image_to_string(
                crop_image_12_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_12_unidades == "" or result_12_unidades[0] == str(4) \
                    or result_12_unidades[0:2] == str(28) or result_12_unidades[0:2] == str(29):
                crop_image_12_unidades = crop_image_12[(q + (412 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_12_unidades = cv.fastNlMeansDenoisingColored(crop_image_12_unidades, None, 10, 10, 7, 21)
                kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_12_unidades = cv.morphologyEx(crop_image_12_unidades, cv.MORPH_CLOSE, kernel_12)
                crop_image_12_unidades = cv.cvtColor(crop_image_12_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_12_unidades = pytesseract.image_to_string(
                    crop_image_12_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_12_unidades)
                sheet.write('A233', result_12_unidades)
            # cliche_12
            crop_image_12_cliche = crop_image_12[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_12_cliche = cv.cvtColor(crop_image_12_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_cliche = pytesseract.image_to_string(
                crop_image_12_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_cliche)
                sheet.write('A234', result_12_cliche)
            # Tinta_12
            crop_image_12_tinta = crop_image_12[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_12_tinta = cv.fastNlMeansDenoisingColored(crop_image_12_tinta, None, 10, 10, 7, 21)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_tinta = cv.morphologyEx(crop_image_12_tinta, cv.MORPH_CLOSE, kernel_12)
            crop_image_12_tinta = cv.cvtColor(crop_image_12_tinta, cv.COLOR_BGR2GRAY)
            crop_image_12_tinta = cv.threshold(crop_image_12_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_tinta = pytesseract.image_to_string(
                crop_image_12_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_tinta)
                sheet.write('A235', result_12_tinta)
            # n_cores_12
            crop_image_12_n_cores = crop_image_12[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_12_n_cores = cv.fastNlMeansDenoisingColored(crop_image_12_n_cores, None, 10, 10, 7, 21)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_n_cores = cv.morphologyEx(crop_image_12_n_cores, cv.MORPH_CLOSE, kernel_12)
            crop_image_12_n_cores = cv.cvtColor(crop_image_12_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_12_n_cores = cv.threshold(crop_image_12_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_n_cores = pytesseract.image_to_string(
                crop_image_12_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_n_cores)
                sheet.write('A236', result_12_n_cores)
            # n_caixas_12
            crop_image_12_n_caixas = crop_image_12[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_n_caixas = pytesseract.image_to_string(crop_image_12_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_n_caixas)
                sheet.write('A237', result_12_n_caixas)
            # tipo_clientes_12
            crop_image_12_tipo_clientes = crop_image_12[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_12_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_12_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_12 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_tipo_clientes = cv.morphologyEx(crop_image_12_tipo_clientes, cv.MORPH_CLOSE, kernel_12)
            crop_image_12_tipo_clientes = cv.cvtColor(crop_image_12_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_tipo_clientes = pytesseract.image_to_string(
                crop_image_12_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_tipo_clientes)
                sheet.write('A238', result_12_tipo_clientes)
            # Servicos_12
            crop_image_12_servicos_1 = crop_image_12[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_servicos_1 = pytesseract.image_to_string(crop_image_12_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_servicos_1)
                sheet.write('A239', result_12_servicos_1)
            # Servicos_2_12
            crop_image_12_servicos_2 = crop_image_12[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_servicos_2 = pytesseract.image_to_string(crop_image_12_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_servicos_2)
                sheet.write('A240', result_12_servicos_2)
            # Caixas_1_12
            crop_image_12_caixas_1 = crop_image_12[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_12_caixas_1 = cv.cvtColor(crop_image_12_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_12_caixas_1 = cv.threshold(crop_image_12_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_caixas_1 = cv.morphologyEx(crop_image_12_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_caixas_1 = pytesseract.image_to_string(crop_image_12_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_caixas_1)
                sheet.write('A241', result_12_caixas_1)
            # Caixas_2_12
            crop_image_12_caixas_2 = crop_image_12[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_12_caixas_2 = cv.cvtColor(crop_image_12_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_12_caixas_2 = cv.threshold(crop_image_12_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_12_caixas_2 = cv.morphologyEx(crop_image_12_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_12_caixas_2 = pytesseract.image_to_string(crop_image_12_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_12_caixas_2)
                sheet.write('A242', result_12_caixas_2)
        if 13 <= numero_quadros:
            crop_image_13 = img1[novo_y_1 * 12:novo_y_1 * 13]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_13
            crop_image_13_dimensoes = crop_image_13[q + 60:a - 20, z:p]
            crop_image_13_dimensoes = cv.cvtColor(crop_image_13_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_dimensoes = pytesseract.image_to_string(crop_image_13_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_dimensoes)
                sheet.write('A253', result_13_dimensoes)
            # Unidades_13
            crop_image_13_unidades = crop_image_13[(q + (413 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_13_unidades = cv.fastNlMeansDenoisingColored(crop_image_13_unidades, None, 10, 10, 7, 21)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_unidades = cv.morphologyEx(crop_image_13_unidades, cv.MORPH_CLOSE, kernel_13)
            crop_image_13_unidades = cv.cvtColor(crop_image_13_unidades, cv.COLOR_BGR2GRAY)
            crop_image_13_unidades = cv.threshold(crop_image_13_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_unidades = pytesseract.image_to_string(
                crop_image_13_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_13_unidades == "" or result_13_unidades[0] == str(4) \
                    or result_13_unidades[0:2] == str(28) or result_13_unidades[0:2] == str(29):
                crop_image_13_unidades = crop_image_13[(q + (413 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_13_unidades = cv.fastNlMeansDenoisingColored(crop_image_13_unidades, None, 10, 10, 7, 21)
                kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_13_unidades = cv.morphologyEx(crop_image_13_unidades, cv.MORPH_CLOSE, kernel_13)
                crop_image_13_unidades = cv.cvtColor(crop_image_13_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_13_unidades = pytesseract.image_to_string(
                    crop_image_13_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass

            with open('abc.txt', mode='w') as file:
                file.write(result_13_unidades)
                sheet.write('A254', result_13_unidades)
            # cliche_13
            crop_image_13_cliche = crop_image_13[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_13_cliche = cv.cvtColor(crop_image_13_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_cliche = pytesseract.image_to_string(
                crop_image_13_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_cliche)
                sheet.write('A255', result_13_cliche)
            # Tinta_13
            crop_image_13_tinta = crop_image_13[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_13_tinta = cv.fastNlMeansDenoisingColored(crop_image_13_tinta, None, 10, 10, 7, 21)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_tinta = cv.morphologyEx(crop_image_13_tinta, cv.MORPH_CLOSE, kernel_13)
            crop_image_13_tinta = cv.cvtColor(crop_image_13_tinta, cv.COLOR_BGR2GRAY)
            crop_image_13_tinta = cv.threshold(crop_image_13_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_tinta = pytesseract.image_to_string(
                crop_image_13_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_tinta)
                sheet.write('A256', result_13_tinta)
            # n_cores_13
            crop_image_13_n_cores = crop_image_13[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_13_n_cores = cv.fastNlMeansDenoisingColored(crop_image_13_n_cores, None, 10, 10, 7, 21)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_n_cores = cv.morphologyEx(crop_image_13_n_cores, cv.MORPH_CLOSE, kernel_13)
            crop_image_13_n_cores = cv.cvtColor(crop_image_13_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_13_n_cores = cv.threshold(crop_image_13_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_n_cores = pytesseract.image_to_string(
                crop_image_13_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_n_cores)
                sheet.write('A257', result_13_n_cores)
            # n_caixas_13
            crop_image_13_n_caixas = crop_image_13[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_n_caixas = pytesseract.image_to_string(crop_image_13_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_n_caixas)
                sheet.write('A258', result_13_n_caixas)
            # tipo_clientes_13
            crop_image_13_tipo_clientes = crop_image_13[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_13_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_13_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_13 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_tipo_clientes = cv.morphologyEx(crop_image_13_tipo_clientes, cv.MORPH_CLOSE, kernel_13)
            crop_image_13_tipo_clientes = cv.cvtColor(crop_image_13_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_tipo_clientes = pytesseract.image_to_string(
                crop_image_13_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_tipo_clientes)
                sheet.write('A259', result_13_tipo_clientes)
            # Servicos_13
            crop_image_13_servicos_1 = crop_image_13[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_servicos_1 = pytesseract.image_to_string(crop_image_13_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_servicos_1)
                sheet.write('A260', result_13_servicos_1)
            # Servicos_2_13
            crop_image_13_servicos_2 = crop_image_13[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_servicos_2 = pytesseract.image_to_string(crop_image_13_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_servicos_2)
                sheet.write('A261', result_13_servicos_2)
            # Caixas_1_13
            crop_image_13_caixas_1 = crop_image_13[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_13_caixas_1 = cv.cvtColor(crop_image_13_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_13_caixas_1 = cv.threshold(crop_image_13_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_caixas_1 = cv.morphologyEx(crop_image_13_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_caixas_1 = pytesseract.image_to_string(crop_image_13_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_caixas_1)
                sheet.write('A262', result_13_caixas_1)
            # Caixas_2_13
            crop_image_13_caixas_2 = crop_image_13[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_13_caixas_2 = cv.cvtColor(crop_image_13_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_13_caixas_2 = cv.threshold(crop_image_13_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_13_caixas_2 = cv.morphologyEx(crop_image_13_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_13_caixas_2 = pytesseract.image_to_string(crop_image_13_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_13_caixas_2)
                sheet.write('A263', result_13_caixas_2)
        if 14 <= numero_quadros:
            crop_image_14 = img1[novo_y_1 * 13:novo_y_1 * 14]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_14
            crop_image_14_dimensoes = crop_image_14[q + 60:a - 20, z:p]
            crop_image_14_dimensoes = cv.cvtColor(crop_image_14_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_dimensoes = pytesseract.image_to_string(crop_image_14_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_dimensoes)
                sheet.write('A274', result_14_dimensoes)
            # Unidades_14
            crop_image_14_unidades = crop_image_14[(q + (414 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_14_unidades = cv.fastNlMeansDenoisingColored(crop_image_14_unidades, None, 10, 10, 7, 21)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_unidades = cv.morphologyEx(crop_image_14_unidades, cv.MORPH_CLOSE, kernel_14)
            crop_image_14_unidades = cv.cvtColor(crop_image_14_unidades, cv.COLOR_BGR2GRAY)
            crop_image_14_unidades = cv.threshold(crop_image_14_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_unidades = pytesseract.image_to_string(
                crop_image_14_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_14_unidades == "" or result_14_unidades[0] == str(4) \
                    or result_14_unidades[0:2] == str(28) or result_14_unidades[0:2] == str(29):
                crop_image_14_unidades = crop_image_14[(q + (414 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_14_unidades = cv.fastNlMeansDenoisingColored(crop_image_14_unidades, None, 10, 10, 7, 21)
                kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_14_unidades = cv.morphologyEx(crop_image_14_unidades, cv.MORPH_CLOSE, kernel_14)
                crop_image_14_unidades = cv.cvtColor(crop_image_14_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_14_unidades = pytesseract.image_to_string(
                    crop_image_14_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_14_unidades)
                sheet.write('A275', result_14_unidades)
            # cliche_14
            crop_image_14_cliche = crop_image_14[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_14_cliche = cv.cvtColor(crop_image_14_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_cliche = pytesseract.image_to_string(
                crop_image_14_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_cliche)
                sheet.write('A276', result_14_cliche)
            # Tinta_14
            crop_image_14_tinta = crop_image_14[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_14_tinta = cv.fastNlMeansDenoisingColored(crop_image_14_tinta, None, 10, 10, 7, 21)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_tinta = cv.morphologyEx(crop_image_14_tinta, cv.MORPH_CLOSE, kernel_14)
            crop_image_14_tinta = cv.cvtColor(crop_image_14_tinta, cv.COLOR_BGR2GRAY)
            crop_image_14_tinta = cv.threshold(crop_image_14_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_tinta = pytesseract.image_to_string(
                crop_image_14_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_tinta)
                sheet.write('A277', result_14_tinta)
            # n_cores_14
            crop_image_14_n_cores = crop_image_14[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_14_n_cores = cv.fastNlMeansDenoisingColored(crop_image_14_n_cores, None, 10, 10, 7, 21)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_n_cores = cv.morphologyEx(crop_image_14_n_cores, cv.MORPH_CLOSE, kernel_14)
            crop_image_14_n_cores = cv.cvtColor(crop_image_14_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_14_n_cores = cv.threshold(crop_image_14_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_n_cores = pytesseract.image_to_string(
                crop_image_14_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_n_cores)
                sheet.write('A278', result_14_n_cores)
            # n_caixas_14
            crop_image_14_n_caixas = crop_image_14[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_n_caixas = pytesseract.image_to_string(crop_image_14_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_n_caixas)
                sheet.write('A279', result_14_n_caixas)
            # tipo_clientes_14
            crop_image_14_tipo_clientes = crop_image_14[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_14_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_14_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_14 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_tipo_clientes = cv.morphologyEx(crop_image_14_tipo_clientes, cv.MORPH_CLOSE, kernel_14)
            crop_image_14_tipo_clientes = cv.cvtColor(crop_image_14_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_tipo_clientes = pytesseract.image_to_string(
                crop_image_14_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_tipo_clientes)
                sheet.write('A280', result_14_tipo_clientes)
            # Servicos_14
            crop_image_14_servicos_1 = crop_image_14[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_servicos_1 = pytesseract.image_to_string(crop_image_14_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_servicos_1)
                sheet.write('A281', result_14_servicos_1)
            # Servicos_2_14
            crop_image_14_servicos_2 = crop_image_14[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_servicos_2 = pytesseract.image_to_string(crop_image_14_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_servicos_2)
                sheet.write('A282', result_14_servicos_2)
            # Caixas_1_14
            crop_image_14_caixas_1 = crop_image_14[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_14_caixas_1 = cv.cvtColor(crop_image_14_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_14_caixas_1 = cv.threshold(crop_image_14_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_caixas_1 = cv.morphologyEx(crop_image_14_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_caixas_1 = pytesseract.image_to_string(crop_image_14_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_caixas_1)
                sheet.write('A283', result_14_caixas_1)
            # Caixas_2_14
            crop_image_14_caixas_2 = crop_image_14[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_14_caixas_2 = cv.cvtColor(crop_image_14_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_14_caixas_2 = cv.threshold(crop_image_14_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_14_caixas_2 = cv.morphologyEx(crop_image_14_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_14_caixas_2 = pytesseract.image_to_string(crop_image_14_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_14_caixas_2)
                sheet.write('A284', result_14_caixas_2)
        if 15 <= numero_quadros:
            crop_image_15 = img1[novo_y_1 * 14:novo_y_1 * 15]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_15
            crop_image_15_dimensoes = crop_image_15[q + 60:a - 20, z:p]
            crop_image_15_dimensoes = cv.cvtColor(crop_image_15_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_dimensoes = pytesseract.image_to_string(crop_image_15_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_dimensoes)
                sheet.write('A295', result_15_dimensoes)
            # Unidades_15
            crop_image_15_unidades = crop_image_15[(q + (415 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_15_unidades = cv.fastNlMeansDenoisingColored(crop_image_15_unidades, None, 10, 10, 7, 21)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_unidades = cv.morphologyEx(crop_image_15_unidades, cv.MORPH_CLOSE, kernel_15)
            crop_image_15_unidades = cv.cvtColor(crop_image_15_unidades, cv.COLOR_BGR2GRAY)
            crop_image_15_unidades = cv.threshold(crop_image_15_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_unidades = pytesseract.image_to_string(
                crop_image_15_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_15_unidades == "" or result_15_unidades[0] == str(4)\
                    or result_15_unidades[0:2] == str(28) or result_15_unidades[0:2] == str(29):
                crop_image_15_unidades = crop_image_15[(q + (415 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_15_unidades = cv.fastNlMeansDenoisingColored(crop_image_15_unidades, None, 10, 10, 7, 21)
                kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_15_unidades = cv.morphologyEx(crop_image_15_unidades, cv.MORPH_CLOSE, kernel_15)
                crop_image_15_unidades = cv.cvtColor(crop_image_15_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_15_unidades = pytesseract.image_to_string(
                    crop_image_15_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_15_unidades)
                sheet.write('A296', result_15_unidades)
            # cliche_15
            crop_image_15_cliche = crop_image_15[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_15_cliche = cv.cvtColor(crop_image_15_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_cliche = pytesseract.image_to_string(
                crop_image_15_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_cliche)
                sheet.write('A297', result_15_cliche)
            # Tinta_15
            crop_image_15_tinta = crop_image_15[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_15_tinta = cv.fastNlMeansDenoisingColored(crop_image_15_tinta, None, 10, 10, 7, 21)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_tinta = cv.morphologyEx(crop_image_15_tinta, cv.MORPH_CLOSE, kernel_15)
            crop_image_15_tinta = cv.cvtColor(crop_image_15_tinta, cv.COLOR_BGR2GRAY)
            crop_image_15_tinta = cv.threshold(crop_image_15_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_tinta = pytesseract.image_to_string(
                crop_image_15_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_tinta)
                sheet.write('A298', result_15_tinta)
            # n_cores_15
            crop_image_15_n_cores = crop_image_15[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_15_n_cores = cv.fastNlMeansDenoisingColored(crop_image_15_n_cores, None, 10, 10, 7, 21)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_n_cores = cv.morphologyEx(crop_image_15_n_cores, cv.MORPH_CLOSE, kernel_15)
            crop_image_15_n_cores = cv.cvtColor(crop_image_15_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_15_n_cores = cv.threshold(crop_image_15_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_n_cores = pytesseract.image_to_string(
                crop_image_15_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_n_cores)
                sheet.write('A299', result_15_n_cores)
            # n_caixas_15
            crop_image_15_n_caixas = crop_image_15[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_n_caixas = pytesseract.image_to_string(crop_image_15_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_n_caixas)
                sheet.write('A300', result_15_n_caixas)
            # tipo_clientes_15
            crop_image_15_tipo_clientes = crop_image_15[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_15_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_15_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_15 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_tipo_clientes = cv.morphologyEx(crop_image_15_tipo_clientes, cv.MORPH_CLOSE, kernel_15)
            crop_image_15_tipo_clientes = cv.cvtColor(crop_image_15_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_tipo_clientes = pytesseract.image_to_string(
                crop_image_15_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_tipo_clientes)
                sheet.write('A301', result_15_tipo_clientes)
            # Servicos_15
            crop_image_15_servicos_1 = crop_image_15[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_servicos_1 = pytesseract.image_to_string(crop_image_15_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_servicos_1)
                sheet.write('A302', result_15_servicos_1)
            # Servicos_2_15
            crop_image_15_servicos_2 = crop_image_15[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_servicos_2 = pytesseract.image_to_string(crop_image_15_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_servicos_2)
                sheet.write('A303', result_15_servicos_2)
            # Caixas_1_15
            crop_image_15_caixas_1 = crop_image_15[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_15_caixas_1 = cv.cvtColor(crop_image_15_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_15_caixas_1 = cv.threshold(crop_image_15_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_caixas_1 = cv.morphologyEx(crop_image_15_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_caixas_1 = pytesseract.image_to_string(crop_image_15_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_caixas_1)
                sheet.write('A304', result_15_caixas_1)
            # Caixas_2_15
            crop_image_15_caixas_2 = crop_image_15[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_15_caixas_2 = cv.cvtColor(crop_image_15_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_15_caixas_2 = cv.threshold(crop_image_15_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_15_caixas_2 = cv.morphologyEx(crop_image_15_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_15_caixas_2 = pytesseract.image_to_string(crop_image_15_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_15_caixas_2)
                sheet.write('A305', result_15_caixas_2)
        if 16 <= numero_quadros:
            crop_image_16 = img1[novo_y_1 * 15:novo_y_1 * 16]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_16
            crop_image_16_dimensoes = crop_image_16[q + 60:a - 20, z:p]
            crop_image_16_dimensoes = cv.fastNlMeansDenoisingColored(crop_image_16_dimensoes, None, 10, 10, 7, 21)
            crop_image_16_dimensoes = cv.cvtColor(crop_image_16_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_dimensoes = pytesseract.image_to_string(crop_image_16_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_dimensoes)
                sheet.write('A316', result_16_dimensoes)
            # Unidades_16
            crop_image_16_unidades = crop_image_16[(q + (416 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_16_unidades = cv.fastNlMeansDenoisingColored(crop_image_16_unidades, None, 10, 10, 7, 21)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_unidades = cv.morphologyEx(crop_image_16_unidades, cv.MORPH_CLOSE, kernel_16)
            crop_image_16_unidades = cv.cvtColor(crop_image_16_unidades, cv.COLOR_BGR2GRAY)
            crop_image_16_unidades = cv.threshold(crop_image_16_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_unidades = pytesseract.image_to_string(
                crop_image_16_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_16_unidades == "" or result_16_unidades[0] == str(4) \
                    or result_16_unidades[0:2] == str(28) or result_16_unidades[0:2] == str(29):
                crop_image_16_unidades = crop_image_16[(q + (416 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_16_unidades = cv.fastNlMeansDenoisingColored(crop_image_16_unidades, None, 10, 10, 7, 21)
                kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_16_unidades = cv.morphologyEx(crop_image_16_unidades, cv.MORPH_CLOSE, kernel_16)
                crop_image_16_unidades = cv.cvtColor(crop_image_16_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_16_unidades = pytesseract.image_to_string(
                    crop_image_16_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_16_unidades)
                sheet.write('A317', result_16_unidades)
            # cliche_16
            crop_image_16_cliche = crop_image_16[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_16_cliche = cv.cvtColor(crop_image_16_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_cliche = pytesseract.image_to_string(
                crop_image_16_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_cliche)
                sheet.write('A318', result_16_cliche)
            # Tinta_16
            crop_image_16_tinta = crop_image_16[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_16_tinta = cv.fastNlMeansDenoisingColored(crop_image_16_tinta, None, 10, 10, 7, 21)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_tinta = cv.morphologyEx(crop_image_16_tinta, cv.MORPH_CLOSE, kernel_16)
            crop_image_16_tinta = cv.cvtColor(crop_image_16_tinta, cv.COLOR_BGR2GRAY)
            crop_image_16_tinta = cv.threshold(crop_image_16_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_tinta = pytesseract.image_to_string(
                crop_image_16_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_tinta)
                sheet.write('A319', result_16_tinta)
            # n_cores_16
            crop_image_16_n_cores = crop_image_16[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_16_n_cores = cv.fastNlMeansDenoisingColored(crop_image_16_n_cores, None, 10, 10, 7, 21)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_n_cores = cv.morphologyEx(crop_image_16_n_cores, cv.MORPH_CLOSE, kernel_16)
            crop_image_16_n_cores = cv.cvtColor(crop_image_16_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_16_n_cores = cv.threshold(crop_image_16_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_n_cores = pytesseract.image_to_string(
                crop_image_16_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_n_cores)
                sheet.write('A320', result_16_n_cores)
            # n_caixas_16
            crop_image_16_n_caixas = crop_image_16[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_n_caixas = pytesseract.image_to_string(crop_image_16_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_n_caixas)
                sheet.write('A321', result_16_n_caixas)
            # tipo_clientes_16
            crop_image_16_tipo_clientes = crop_image_16[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_16_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_16_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_16 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_tipo_clientes = cv.morphologyEx(crop_image_16_tipo_clientes, cv.MORPH_CLOSE, kernel_16)
            crop_image_16_tipo_clientes = cv.cvtColor(crop_image_16_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_tipo_clientes = pytesseract.image_to_string(
                crop_image_16_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_tipo_clientes)
                sheet.write('A322', result_16_tipo_clientes)
            # Servicos_16
            crop_image_16_servicos_1 = crop_image_16[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_servicos_1 = pytesseract.image_to_string(crop_image_16_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_servicos_1)
                sheet.write('A323', result_16_servicos_1)
            # Servicos_2_16
            crop_image_16_servicos_2 = crop_image_16[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_servicos_2 = pytesseract.image_to_string(crop_image_16_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_servicos_2)
                sheet.write('A324', result_16_servicos_2)
            # Caixas_1_16
            crop_image_16_caixas_1 = crop_image_16[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_16_caixas_1 = cv.cvtColor(crop_image_16_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_16_caixas_1 = cv.threshold(crop_image_16_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_caixas_1 = cv.morphologyEx(crop_image_16_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_caixas_1 = pytesseract.image_to_string(crop_image_16_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_caixas_1)
                sheet.write('A325', result_16_caixas_1)
            # Caixas_2_16
            crop_image_16_caixas_2 = crop_image_16[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_16_caixas_2 = cv.cvtColor(crop_image_16_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_16_caixas_2 = cv.threshold(crop_image_16_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_16_caixas_2 = cv.morphologyEx(crop_image_16_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_16_caixas_2 = pytesseract.image_to_string(crop_image_16_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_16_caixas_2)
                sheet.write('A326', result_16_caixas_2)
        if 17 <= numero_quadros:
            crop_image_17 = img1[novo_y_1 * 16:novo_y_1 * 17]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_17
            crop_image_17_dimensoes = crop_image_17[q + 60:a - 20, z:p]
            crop_image_17_dimensoes = cv.cvtColor(crop_image_17_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_dimensoes = pytesseract.image_to_string(crop_image_17_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_dimensoes)
                sheet.write('A337', result_17_dimensoes)
            # Unidades_17
            crop_image_17_unidades = crop_image_17[(q + (417 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_17_unidades = cv.fastNlMeansDenoisingColored(crop_image_17_unidades, None, 10, 10, 7, 21)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_unidades = cv.morphologyEx(crop_image_17_unidades, cv.MORPH_CLOSE, kernel_17)
            crop_image_17_unidades = cv.cvtColor(crop_image_17_unidades, cv.COLOR_BGR2GRAY)
            crop_image_17_unidades = cv.threshold(crop_image_17_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_unidades = pytesseract.image_to_string(
                crop_image_17_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_17_unidades == "" or result_17_unidades[0] == str(4) \
                    or result_17_unidades[0:2] == str(28) or result_17_unidades[0:2] == str(29):
                crop_image_17_unidades = crop_image_17[(q + (417 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_17_unidades = cv.fastNlMeansDenoisingColored(crop_image_17_unidades, None, 10, 10, 7, 21)
                kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_17_unidades = cv.morphologyEx(crop_image_17_unidades, cv.MORPH_CLOSE, kernel_17)
                crop_image_17_unidades = cv.cvtColor(crop_image_17_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_17_unidades = pytesseract.image_to_string(
                    crop_image_17_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_17_unidades)
                sheet.write('A338', result_17_unidades)
            # cliche_17
            crop_image_17_cliche = crop_image_17[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_17_cliche = cv.cvtColor(crop_image_17_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_cliche = pytesseract.image_to_string(
                crop_image_17_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_cliche)
                sheet.write('A339', result_17_cliche)
            # Tinta_17
            crop_image_17_tinta = crop_image_17[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_17_tinta = cv.fastNlMeansDenoisingColored(crop_image_17_tinta, None, 10, 10, 7, 21)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_tinta = cv.morphologyEx(crop_image_17_tinta, cv.MORPH_CLOSE, kernel_17)
            crop_image_17_tinta = cv.cvtColor(crop_image_17_tinta, cv.COLOR_BGR2GRAY)
            crop_image_17_tinta = cv.threshold(crop_image_17_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_tinta = pytesseract.image_to_string(
                crop_image_17_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_tinta)
                sheet.write('A340', result_17_tinta)
            # n_cores_17
            crop_image_17_n_cores = crop_image_17[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_17_n_cores = cv.fastNlMeansDenoisingColored(crop_image_17_n_cores, None, 10, 10, 7, 21)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_n_cores = cv.morphologyEx(crop_image_17_n_cores, cv.MORPH_CLOSE, kernel_17)
            crop_image_17_n_cores = cv.cvtColor(crop_image_17_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_17_n_cores = cv.threshold(crop_image_17_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_n_cores = pytesseract.image_to_string(
                crop_image_17_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_n_cores)
                sheet.write('A341', result_17_n_cores)
            # n_caixas_17
            crop_image_17_n_caixas = crop_image_17[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_n_caixas = pytesseract.image_to_string(crop_image_17_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_n_caixas)
                sheet.write('A342', result_17_n_caixas)
            # 17
            crop_image_17_tipo_clientes = crop_image_17[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_17_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_17_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_17 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_tipo_clientes = cv.morphologyEx(crop_image_17_tipo_clientes, cv.MORPH_CLOSE, kernel_17)
            crop_image_17_tipo_clientes = cv.cvtColor(crop_image_17_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_tipo_clientes = pytesseract.image_to_string(
                crop_image_17_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_tipo_clientes)
                sheet.write('A343', result_17_tipo_clientes)
            # Servicos_17
            crop_image_17_servicos_1 = crop_image_17[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_servicos_1 = pytesseract.image_to_string(crop_image_17_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_servicos_1)
                sheet.write('A344', result_17_servicos_1)
            # Servicos_2_17
            crop_image_17_servicos_2 = crop_image_17[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_servicos_2 = pytesseract.image_to_string(crop_image_17_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_servicos_2)
                sheet.write('A345', result_17_servicos_2)
            # Caixas_1_17
            crop_image_17_caixas_1 = crop_image_17[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_17_caixas_1 = cv.cvtColor(crop_image_17_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_17_caixas_1 = cv.threshold(crop_image_17_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_caixas_1 = cv.morphologyEx(crop_image_17_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_caixas_1 = pytesseract.image_to_string(crop_image_17_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_caixas_1)
                sheet.write('A346', result_17_caixas_1)
            # Caixas_2_17
            crop_image_17_caixas_2 = crop_image_17[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_17_caixas_2 = cv.cvtColor(crop_image_17_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_17_caixas_2 = cv.threshold(crop_image_17_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_17_caixas_2 = cv.morphologyEx(crop_image_17_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_17_caixas_2 = pytesseract.image_to_string(crop_image_17_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_17_caixas_2)
                sheet.write('A347', result_17_caixas_2)
        if 18 <= numero_quadros:
            crop_image_18 = img1[novo_y_1 * 17:novo_y_1 * 18]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_18
            crop_image_18_dimensoes = crop_image_18[q + 60:a - 20, z:p]
            crop_image_18_dimensoes = cv.cvtColor(crop_image_18_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_dimensoes = pytesseract.image_to_string(crop_image_18_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_dimensoes)
                sheet.write('A358', result_18_dimensoes)
            # Unidades_18
            crop_image_18_unidades = crop_image_18[(q + (418 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_18_unidades = cv.fastNlMeansDenoisingColored(crop_image_18_unidades, None, 10, 10, 7, 21)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_unidades = cv.morphologyEx(crop_image_18_unidades, cv.MORPH_CLOSE, kernel_18)
            crop_image_18_unidades = cv.cvtColor(crop_image_18_unidades, cv.COLOR_BGR2GRAY)
            crop_image_18_unidades = cv.threshold(crop_image_18_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_unidades = pytesseract.image_to_string(
                crop_image_18_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_18_unidades == "" or result_18_unidades[0] == str(4) \
                    or result_18_unidades[0:2] == str(28) or result_18_unidades[0:2] == str(29):
                crop_image_18_unidades = crop_image_18[(q + (418 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_18_unidades = cv.fastNlMeansDenoisingColored(crop_image_18_unidades, None, 10, 10, 7, 21)
                kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_18_unidades = cv.morphologyEx(crop_image_18_unidades, cv.MORPH_CLOSE, kernel_18)
                crop_image_18_unidades = cv.cvtColor(crop_image_18_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_18_unidades = pytesseract.image_to_string(
                    crop_image_18_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_18_unidades)
                sheet.write('A359', result_18_unidades)
            # cliche_18
            crop_image_18_cliche = crop_image_18[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_18_cliche = cv.cvtColor(crop_image_18_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_cliche = pytesseract.image_to_string(
                crop_image_18_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_cliche)
                sheet.write('A360', result_18_cliche)
            # Tinta_18
            crop_image_18_tinta = crop_image_18[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_18_tinta = cv.fastNlMeansDenoisingColored(crop_image_18_tinta, None, 10, 10, 7, 21)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_tinta = cv.morphologyEx(crop_image_18_tinta, cv.MORPH_CLOSE, kernel_18)
            crop_image_18_tinta = cv.cvtColor(crop_image_18_tinta, cv.COLOR_BGR2GRAY)
            crop_image_18_tinta = cv.threshold(crop_image_18_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_tinta = pytesseract.image_to_string(
                crop_image_18_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_tinta)
                sheet.write('A361', result_18_tinta)
            # n_cores_18
            crop_image_18_n_cores = crop_image_18[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_18_n_cores = cv.fastNlMeansDenoisingColored(crop_image_18_n_cores, None, 10, 10, 7, 21)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_n_cores = cv.morphologyEx(crop_image_18_n_cores, cv.MORPH_CLOSE, kernel_18)
            crop_image_18_n_cores = cv.cvtColor(crop_image_18_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_18_n_cores = cv.threshold(crop_image_18_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_n_cores = pytesseract.image_to_string(
                crop_image_18_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_n_cores)
                sheet.write('A362', result_18_n_cores)
            # n_caixas_18
            crop_image_18_n_caixas = crop_image_18[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_n_caixas = pytesseract.image_to_string(crop_image_18_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_n_caixas)
                sheet.write('A363', result_18_n_caixas)
            # tipo_clientes_18
            crop_image_18_tipo_clientes = crop_image_18[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_18_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_18_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_18 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_tipo_clientes = cv.morphologyEx(crop_image_18_tipo_clientes, cv.MORPH_CLOSE, kernel_18)
            crop_image_18_tipo_clientes = cv.cvtColor(crop_image_18_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_tipo_clientes = pytesseract.image_to_string(
                crop_image_18_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_tipo_clientes)
                sheet.write('A364', result_18_tipo_clientes)
            # Servicos_18
            crop_image_18_servicos_1 = crop_image_18[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_servicos_1 = pytesseract.image_to_string(crop_image_18_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_servicos_1)
                sheet.write('A365', result_18_servicos_1)
            # Servicos_2_18
            crop_image_18_servicos_2 = crop_image_18[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_servicos_2 = pytesseract.image_to_string(crop_image_18_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_servicos_2)
                sheet.write('A366', result_18_servicos_2)
            # Caixas_1_18
            crop_image_18_caixas_1 = crop_image_18[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_18_caixas_1 = cv.cvtColor(crop_image_18_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_18_caixas_1 = cv.threshold(crop_image_18_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_caixas_1 = cv.morphologyEx(crop_image_18_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_caixas_1 = pytesseract.image_to_string(crop_image_18_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_caixas_1)
                sheet.write('A367', result_18_caixas_1)
            # Caixas_2_18
            crop_image_18_caixas_2 = crop_image_18[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_18_caixas_2 = cv.cvtColor(crop_image_18_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_18_caixas_2 = cv.threshold(crop_image_18_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_18_caixas_2 = cv.morphologyEx(crop_image_18_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_18_caixas_2 = pytesseract.image_to_string(crop_image_18_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_18_caixas_2)
                sheet.write('A368', result_18_caixas_2)
        if 19 <= numero_quadros:
            crop_image_19 = img1[novo_y_1 * 18:novo_y_1 * 19]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_19
            crop_image_19_dimensoes = crop_image_19[q + 60:a - 20, z:p]
            crop_image_19_dimensoes = cv.cvtColor(crop_image_19_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_dimensoes = pytesseract.image_to_string(crop_image_19_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_dimensoes)
                sheet.write('A379', result_19_dimensoes)
            # Unidades_19
            crop_image_19_unidades = crop_image_19[(q + (419 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_19_unidades = cv.fastNlMeansDenoisingColored(crop_image_19_unidades, None, 10, 10, 7, 21)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_unidades = cv.morphologyEx(crop_image_19_unidades, cv.MORPH_CLOSE, kernel_19)
            crop_image_19_unidades = cv.cvtColor(crop_image_19_unidades, cv.COLOR_BGR2GRAY)
            crop_image_19_unidades = cv.threshold(crop_image_19_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_unidades = pytesseract.image_to_string(
                crop_image_19_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_19_unidades == "" or result_19_unidades[0] == str(4) \
                    or result_19_unidades[0:2] == str(28) or result_19_unidades[0:2] == str(29):
                crop_image_19_unidades = crop_image_19[(q + (419 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_19_unidades = cv.fastNlMeansDenoisingColored(crop_image_19_unidades, None, 10, 10, 7, 21)
                kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_19_unidades = cv.morphologyEx(crop_image_19_unidades, cv.MORPH_CLOSE, kernel_19)
                crop_image_19_unidades = cv.cvtColor(crop_image_19_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_19_unidades = pytesseract.image_to_string(
                    crop_image_19_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_19_unidades)
                sheet.write('A380', result_19_unidades)
            # cliche_19
            crop_image_19_cliche = crop_image_19[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_19_cliche = cv.cvtColor(crop_image_19_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_cliche = pytesseract.image_to_string(
                crop_image_19_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_cliche)
                sheet.write('A381', result_19_cliche)
            # Tinta_19
            crop_image_19_tinta = crop_image_19[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_19_tinta = cv.fastNlMeansDenoisingColored(crop_image_19_tinta, None, 10, 10, 7, 21)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_tinta = cv.morphologyEx(crop_image_19_tinta, cv.MORPH_CLOSE, kernel_19)
            crop_image_19_tinta = cv.cvtColor(crop_image_19_tinta, cv.COLOR_BGR2GRAY)
            crop_image_19_tinta = cv.threshold(crop_image_19_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_tinta = pytesseract.image_to_string(
                crop_image_19_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_tinta)
                sheet.write('A382', result_19_tinta)
            # n_cores_19
            crop_image_19_n_cores = crop_image_19[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_19_n_cores = cv.fastNlMeansDenoisingColored(crop_image_19_n_cores, None, 10, 10, 7, 21)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_n_cores = cv.morphologyEx(crop_image_19_n_cores, cv.MORPH_CLOSE, kernel_19)
            crop_image_19_n_cores = cv.cvtColor(crop_image_19_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_19_n_cores = cv.threshold(crop_image_19_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_n_cores = pytesseract.image_to_string(
                crop_image_19_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_n_cores)
                sheet.write('A383', result_19_n_cores)
            # n_caixas_19
            crop_image_19_n_caixas = crop_image_19[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_n_caixas = pytesseract.image_to_string(crop_image_19_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_n_caixas)
                sheet.write('A384', result_19_n_caixas)
            # tipo_clientes_19
            crop_image_19_tipo_clientes = crop_image_19[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_19_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_19_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_19 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_tipo_clientes = cv.morphologyEx(crop_image_19_tipo_clientes, cv.MORPH_CLOSE, kernel_19)
            crop_image_19_tipo_clientes = cv.cvtColor(crop_image_19_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_tipo_clientes = pytesseract.image_to_string(
                crop_image_19_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_tipo_clientes)
                sheet.write('A385', result_19_tipo_clientes)
            # Servicos_19
            crop_image_19_servicos_1 = crop_image_19[(q + 270):(a + 3690), (z + 5250):(p + 5100)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_servicos_1 = pytesseract.image_to_string(crop_image_19_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_servicos_1)
                sheet.write('A386', result_19_servicos_1)
            # Servicos_2_19
            crop_image_19_servicos_2 = crop_image_19[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_servicos_2 = pytesseract.image_to_string(crop_image_19_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_servicos_2)
                sheet.write('A387', result_19_servicos_2)
            # Caixas_1_19
            crop_image_19_caixas_1 = crop_image_19[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_19_caixas_1 = cv.cvtColor(crop_image_19_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_19_caixas_1 = cv.threshold(crop_image_19_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_caixas_1 = cv.morphologyEx(crop_image_19_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_caixas_1 = pytesseract.image_to_string(crop_image_19_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_caixas_1)
                sheet.write('A388', result_19_caixas_1)
            # Caixas_2_19
            crop_image_19_caixas_2 = crop_image_19[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_19_caixas_2 = cv.cvtColor(crop_image_19_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_19_caixas_2 = cv.threshold(crop_image_19_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_19_caixas_2 = cv.morphologyEx(crop_image_19_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_19_caixas_2 = pytesseract.image_to_string(crop_image_19_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_19_caixas_2)
                sheet.write('A389', result_19_caixas_2)
        if 20 <= numero_quadros:
            crop_image_20 = img1[novo_y_1 * 19:novo_y_1 * 20]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_20
            crop_image_20_dimensoes = crop_image_20[q + 60:a - 20, z:p]

            crop_image_20_dimensoes = cv.cvtColor(crop_image_20_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_dimensoes = pytesseract.image_to_string(crop_image_20_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_dimensoes)
                sheet.write('A400', result_20_dimensoes)
            # Unidades_20
            crop_image_20_unidades = crop_image_20[(q + (420 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_20_unidades = cv.fastNlMeansDenoisingColored(crop_image_20_unidades, None, 10, 10, 7, 21)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_unidades = cv.morphologyEx(crop_image_20_unidades, cv.MORPH_CLOSE, kernel_20)
            crop_image_20_unidades = cv.cvtColor(crop_image_20_unidades, cv.COLOR_BGR2GRAY)
            crop_image_20_unidades = cv.threshold(crop_image_20_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_unidades = pytesseract.image_to_string(
                crop_image_20_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_20_unidades == "" or result_20_unidades[0] == str(4) \
                    or result_20_unidades[0:2] == str(28) or result_20_unidades[0:2] == str(29):
                crop_image_20_unidades = crop_image_20[(q + (420 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_20_unidades = cv.fastNlMeansDenoisingColored(crop_image_20_unidades, None, 10, 10, 7, 21)
                kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_20_unidades = cv.morphologyEx(crop_image_20_unidades, cv.MORPH_CLOSE, kernel_20)
                crop_image_20_unidades = cv.cvtColor(crop_image_20_unidades, cv.COLOR_BGR2GRAY)
                crop_image_20_unidades = cv.threshold(crop_image_20_unidades, 220, 255, cv.THRESH_BINARY)[1]
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_20_unidades = pytesseract.image_to_string(
                    crop_image_20_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_20_unidades)
                sheet.write('A401', result_20_unidades)
            # cliche_20
            crop_image_20_cliche = crop_image_20[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_20_cliche = cv.cvtColor(crop_image_20_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_cliche = pytesseract.image_to_string(
                crop_image_20_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_cliche)
                sheet.write('A402', result_20_cliche)
            # Tinta_20
            crop_image_20_tinta = crop_image_20[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_20_tinta = cv.fastNlMeansDenoisingColored(crop_image_20_tinta, None, 10, 10, 7, 21)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_tinta = cv.morphologyEx(crop_image_20_tinta, cv.MORPH_CLOSE, kernel_20)
            crop_image_20_tinta = cv.cvtColor(crop_image_20_tinta, cv.COLOR_BGR2GRAY)
            crop_image_20_tinta = cv.threshold(crop_image_20_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_tinta = pytesseract.image_to_string(
                crop_image_20_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_tinta)
                sheet.write('A403', result_20_tinta)
            # n_cores_20
            crop_image_20_n_cores = crop_image_20[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_20_n_cores = cv.fastNlMeansDenoisingColored(crop_image_20_n_cores, None, 10, 10, 7, 21)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_n_cores = cv.morphologyEx(crop_image_20_n_cores, cv.MORPH_CLOSE, kernel_20)
            crop_image_20_n_cores = cv.cvtColor(crop_image_20_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_20_n_cores = cv.threshold(crop_image_20_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_n_cores = pytesseract.image_to_string(
                crop_image_20_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_n_cores)
                sheet.write('A404', result_20_n_cores)
            # n_caixas_20
            crop_image_20_n_caixas = crop_image_20[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_n_caixas = pytesseract.image_to_string(crop_image_20_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_n_caixas)
                sheet.write('A405', result_20_n_caixas)
            # tipo_clientes_20
            crop_image_20_tipo_clientes = crop_image_20[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_20_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_20_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_20 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_tipo_clientes = cv.morphologyEx(crop_image_20_tipo_clientes, cv.MORPH_CLOSE, kernel_20)
            crop_image_20_tipo_clientes = cv.cvtColor(crop_image_20_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_tipo_clientes = pytesseract.image_to_string(
                crop_image_20_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_tipo_clientes)
                sheet.write('A406', result_20_tipo_clientes)
            # Servicos_20
            crop_image_20_servicos_1 = crop_image_20[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_servicos_1 = pytesseract.image_to_string(crop_image_20_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_servicos_1)
                sheet.write('A407', result_20_servicos_1)
            # Servicos_2_20
            crop_image_20_servicos_2 = crop_image_20[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_servicos_2 = pytesseract.image_to_string(crop_image_20_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_servicos_2)
                sheet.write('A408', result_20_servicos_2)
            # Caixas_1_20
            crop_image_20_caixas_1 = crop_image_20[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_20_caixas_1 = cv.cvtColor(crop_image_20_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_20_caixas_1 = cv.threshold(crop_image_20_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_caixas_1 = cv.morphologyEx(crop_image_20_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_caixas_1 = pytesseract.image_to_string(crop_image_20_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_caixas_1)
                sheet.write('A409', result_20_caixas_1)
            # Caixas_2_20
            crop_image_20_caixas_2 = crop_image_20[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_20_caixas_2 = cv.cvtColor(crop_image_20_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_20_caixas_2 = cv.threshold(crop_image_20_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_20_caixas_2 = cv.morphologyEx(crop_image_20_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_20_caixas_2 = pytesseract.image_to_string(crop_image_20_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_20_caixas_2)
                sheet.write('A410', result_20_caixas_2)
        if 21 <= numero_quadros:
            crop_image_21 = img1[novo_y_1 * 20:novo_y_1 * 21]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_21
            crop_image_21_dimensoes = crop_image_21[q + 60:a - 20, z:p]
            crop_image_21_dimensoes = cv.cvtColor(crop_image_21_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_dimensoes = pytesseract.image_to_string(crop_image_21_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_dimensoes)
                sheet.write('A421', result_21_dimensoes)
            # Unidades_21
            crop_image_21_unidades = crop_image_21[(q + (421 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_21_unidades = cv.fastNlMeansDenoisingColored(crop_image_21_unidades, None, 10, 10, 7, 21)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_unidades = cv.morphologyEx(crop_image_21_unidades, cv.MORPH_CLOSE, kernel_21)
            crop_image_21_unidades = cv.cvtColor(crop_image_21_unidades, cv.COLOR_BGR2GRAY)
            crop_image_21_unidades = cv.threshold(crop_image_21_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_unidades = pytesseract.image_to_string(
                crop_image_21_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_21_unidades == "" or result_21_unidades[0] == str(4) \
                    or result_21_unidades[0:2] == str(28) or result_21_unidades[0:2] == str(29):
                crop_image_21_unidades = crop_image_21[(q + (421 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_21_unidades = cv.fastNlMeansDenoisingColored(crop_image_21_unidades, None, 10, 10, 7, 21)
                kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_21_unidades = cv.morphologyEx(crop_image_21_unidades, cv.MORPH_CLOSE, kernel_21)
                crop_image_21_unidades = cv.cvtColor(crop_image_21_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_21_unidades = pytesseract.image_to_string(
                    crop_image_21_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_21_unidades)
                sheet.write('A422', result_21_unidades)
            # cliche_21
            crop_image_21_cliche = crop_image_21[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_21_cliche = cv.cvtColor(crop_image_21_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_cliche = pytesseract.image_to_string(
                crop_image_21_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_cliche)
                sheet.write('A423', result_21_cliche)
            # Tinta_21
            crop_image_21_tinta = crop_image_21[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_21_tinta = cv.fastNlMeansDenoisingColored(crop_image_21_tinta, None, 10, 10, 7, 21)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_tinta = cv.morphologyEx(crop_image_21_tinta, cv.MORPH_CLOSE, kernel_21)
            crop_image_21_tinta = cv.cvtColor(crop_image_21_tinta, cv.COLOR_BGR2GRAY)
            crop_image_21_tinta = cv.threshold(crop_image_21_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_tinta = pytesseract.image_to_string(
                crop_image_21_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_tinta)
                sheet.write('A424', result_21_tinta)
            # n_cores_21
            crop_image_21_n_cores = crop_image_21[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_21_n_cores = cv.fastNlMeansDenoisingColored(crop_image_21_n_cores, None, 10, 10, 7, 21)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_n_cores = cv.morphologyEx(crop_image_21_n_cores, cv.MORPH_CLOSE, kernel_21)
            crop_image_21_n_cores = cv.cvtColor(crop_image_21_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_21_n_cores = cv.threshold(crop_image_21_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_n_cores = pytesseract.image_to_string(
                crop_image_21_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_n_cores)
                sheet.write('A425', result_21_n_cores)
            # n_caixas_21
            crop_image_21_n_caixas = crop_image_21[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_n_caixas = pytesseract.image_to_string(crop_image_21_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_n_caixas)
                sheet.write('A426', result_21_n_caixas)
            # tipo_clientes_21
            crop_image_21_tipo_clientes = crop_image_21[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_21_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_21_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_21 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_tipo_clientes = cv.morphologyEx(crop_image_21_tipo_clientes, cv.MORPH_CLOSE, kernel_21)
            crop_image_21_tipo_clientes = cv.cvtColor(crop_image_21_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_tipo_clientes = pytesseract.image_to_string(
                crop_image_21_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_tipo_clientes)
                sheet.write('A427', result_21_tipo_clientes)
            # Servicos_21
            crop_image_21_servicos_1 = crop_image_21[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_servicos_1 = pytesseract.image_to_string(crop_image_21_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_servicos_1)
                sheet.write('A428', result_21_servicos_1)
            # Servicos_2_21
            crop_image_21_servicos_2 = crop_image_21[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_servicos_2 = pytesseract.image_to_string(crop_image_21_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_servicos_2)
                sheet.write('A429', result_21_servicos_2)
            # Caixas_1_21
            crop_image_21_caixas_1 = crop_image_21[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_21_caixas_1 = cv.cvtColor(crop_image_21_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_21_caixas_1 = cv.threshold(crop_image_21_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_caixas_1 = cv.morphologyEx(crop_image_21_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_caixas_1 = pytesseract.image_to_string(crop_image_21_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_caixas_1)
                sheet.write('A430', result_21_caixas_1)
            # Caixas_2_21
            crop_image_21_caixas_2 = crop_image_21[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_21_caixas_2 = cv.cvtColor(crop_image_21_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_21_caixas_2 = cv.threshold(crop_image_21_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_21_caixas_2 = cv.morphologyEx(crop_image_21_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_21_caixas_2 = pytesseract.image_to_string(crop_image_21_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_21_caixas_2)
                sheet.write('A431', result_21_caixas_2)
        if 22 <= numero_quadros:
            crop_image_22 = img1[novo_y_1 * 21:novo_y_1 * 22]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_22
            crop_image_22_dimensoes = crop_image_22[q + 60:a - 20, z:p]
            crop_image_22_dimensoes = cv.cvtColor(crop_image_22_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_dimensoes = pytesseract.image_to_string(crop_image_22_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_dimensoes)
                sheet.write('A442', result_22_dimensoes)
            # Unidades_22
            crop_image_22_unidades = crop_image_22[(q + (422 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_22_unidades = cv.fastNlMeansDenoisingColored(crop_image_22_unidades, None, 10, 10, 7, 21)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_unidades = cv.morphologyEx(crop_image_22_unidades, cv.MORPH_CLOSE, kernel_22)
            crop_image_22_unidades = cv.cvtColor(crop_image_22_unidades, cv.COLOR_BGR2GRAY)
            crop_image_22_unidades = cv.threshold(crop_image_22_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_unidades = pytesseract.image_to_string(
                crop_image_22_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_22_unidades == "" or result_22_unidades[0] == str(4) \
                    or result_22_unidades[0:2] == str(28) or result_22_unidades[0:2] == str(29):
                crop_image_22_unidades = crop_image_22[(q + (422 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_22_unidades = cv.fastNlMeansDenoisingColored(crop_image_22_unidades, None, 10, 10, 7, 21)
                kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_22_unidades = cv.morphologyEx(crop_image_22_unidades, cv.MORPH_CLOSE, kernel_22)
                crop_image_22_unidades = cv.cvtColor(crop_image_22_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_22_unidades = pytesseract.image_to_string(
                    crop_image_22_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_22_unidades)
                sheet.write('A443', result_22_unidades)
            # cliche_22
            crop_image_22_cliche = crop_image_22[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_22_cliche = cv.cvtColor(crop_image_22_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_cliche = pytesseract.image_to_string(
                crop_image_22_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_cliche)
                sheet.write('A444', result_22_cliche)
            # Tinta_22
            crop_image_22_tinta = crop_image_22[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_22_tinta = cv.fastNlMeansDenoisingColored(crop_image_22_tinta, None, 10, 10, 7, 21)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_tinta = cv.morphologyEx(crop_image_22_tinta, cv.MORPH_CLOSE, kernel_22)
            crop_image_22_tinta = cv.cvtColor(crop_image_22_tinta, cv.COLOR_BGR2GRAY)
            crop_image_22_tinta = cv.threshold(crop_image_22_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_tinta = pytesseract.image_to_string(
                crop_image_22_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_tinta)
                sheet.write('A445', result_22_tinta)
            # n_cores_22
            crop_image_22_n_cores = crop_image_22[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_22_n_cores = cv.fastNlMeansDenoisingColored(crop_image_22_n_cores, None, 10, 10, 7, 21)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_n_cores = cv.morphologyEx(crop_image_22_n_cores, cv.MORPH_CLOSE, kernel_22)
            crop_image_22_n_cores = cv.cvtColor(crop_image_22_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_22_n_cores = cv.threshold(crop_image_22_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_n_cores = pytesseract.image_to_string(
                crop_image_22_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_n_cores)
                sheet.write('A446', result_22_n_cores)
            # n_caixas_22
            crop_image_22_n_caixas = crop_image_22[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_n_caixas = pytesseract.image_to_string(crop_image_22_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_n_caixas)
                sheet.write('A447', result_22_n_caixas)
            # tipo_clientes_22
            crop_image_22_tipo_clientes = crop_image_22[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_22_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_22_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_22 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_tipo_clientes = cv.morphologyEx(crop_image_22_tipo_clientes, cv.MORPH_CLOSE, kernel_22)
            crop_image_22_tipo_clientes = cv.cvtColor(crop_image_22_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_tipo_clientes = pytesseract.image_to_string(
                crop_image_22_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_tipo_clientes)
                sheet.write('A448', result_22_tipo_clientes)
            # Servicos_22
            crop_image_22_servicos_1 = crop_image_22[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_servicos_1 = pytesseract.image_to_string(crop_image_22_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_servicos_1)
                sheet.write('A449', result_22_servicos_1)
            # Servicos_2_22
            crop_image_22_servicos_2 = crop_image_22[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_servicos_2 = pytesseract.image_to_string(crop_image_22_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_servicos_2)
                sheet.write('A450', result_22_servicos_2)
            # Caixas_1_22
            crop_image_22_caixas_1 = crop_image_22[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_22_caixas_1 = cv.cvtColor(crop_image_22_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_22_caixas_1 = cv.threshold(crop_image_22_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_caixas_1 = cv.morphologyEx(crop_image_22_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_caixas_1 = pytesseract.image_to_string(crop_image_22_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_caixas_1)
                sheet.write('A451', result_22_caixas_1)
            # Caixas_2_22
            crop_image_22_caixas_2 = crop_image_22[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_22_caixas_2 = cv.cvtColor(crop_image_22_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_22_caixas_2 = cv.threshold(crop_image_22_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_22_caixas_2 = cv.morphologyEx(crop_image_22_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_22_caixas_2 = pytesseract.image_to_string(crop_image_22_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_22_caixas_2)
                sheet.write('A452', result_22_caixas_2)

        if 23 <= numero_quadros:
            crop_image_23 = img1[novo_y_1 * 22:novo_y_1 * 23]
            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_23
            crop_image_23_dimensoes = crop_image_23[q + 60:a - 20, z:p]
            crop_image_23_dimensoes = cv.cvtColor(crop_image_23_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_dimensoes = pytesseract.image_to_string(crop_image_23_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_dimensoes)
                sheet.write('A463', result_23_dimensoes)
            # Unidades_23
            crop_image_23_unidades = crop_image_23[(q + (422 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_23_unidades = cv.fastNlMeansDenoisingColored(crop_image_23_unidades, None, 10, 10, 7, 21)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_unidades = cv.morphologyEx(crop_image_23_unidades, cv.MORPH_CLOSE, kernel_23)
            crop_image_23_unidades = cv.cvtColor(crop_image_23_unidades, cv.COLOR_BGR2GRAY)
            crop_image_23_unidades = cv.threshold(crop_image_23_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_unidades = pytesseract.image_to_string(
                crop_image_23_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_23_unidades == "" or result_23_unidades[0] == str(4) \
                    or result_23_unidades[0:2] == str(28) or result_23_unidades[0:2] == str(29):
                crop_image_23_unidades = crop_image_23[(q + (422 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_23_unidades = cv.fastNlMeansDenoisingColored(crop_image_23_unidades, None, 10, 10, 7, 21)
                kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_23_unidades = cv.morphologyEx(crop_image_23_unidades, cv.MORPH_CLOSE, kernel_23)
                crop_image_23_unidades = cv.cvtColor(crop_image_23_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_23_unidades = pytesseract.image_to_string(
                    crop_image_23_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_unidades)
                sheet.write('A464', result_23_unidades)
            # cliche_23
            crop_image_23_cliche = crop_image_23[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_23_cliche = cv.cvtColor(crop_image_23_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_cliche = pytesseract.image_to_string(
                crop_image_23_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_cliche)
                sheet.write('A465', result_23_cliche)
            # Tinta_23
            crop_image_23_tinta = crop_image_23[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_23_tinta = cv.fastNlMeansDenoisingColored(crop_image_23_tinta, None, 10, 10, 7, 21)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_tinta = cv.morphologyEx(crop_image_23_tinta, cv.MORPH_CLOSE, kernel_23)
            crop_image_23_tinta = cv.cvtColor(crop_image_23_tinta, cv.COLOR_BGR2GRAY)
            crop_image_23_tinta = cv.threshold(crop_image_23_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_tinta = pytesseract.image_to_string(
                crop_image_23_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_tinta)
                sheet.write('A466', result_23_tinta)
            # n_cores_23
            crop_image_23_n_cores = crop_image_23[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_23_n_cores = cv.fastNlMeansDenoisingColored(crop_image_23_n_cores, None, 10, 10, 7, 21)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_n_cores = cv.morphologyEx(crop_image_23_n_cores, cv.MORPH_CLOSE, kernel_23)
            crop_image_23_n_cores = cv.cvtColor(crop_image_23_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_23_n_cores = cv.threshold(crop_image_23_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_n_cores = pytesseract.image_to_string(
                crop_image_23_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_n_cores)
                sheet.write('A467', result_23_n_cores)
            # n_caixas_23
            crop_image_23_n_caixas = crop_image_23[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_n_caixas = pytesseract.image_to_string(crop_image_23_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_n_caixas)
                sheet.write('A468', result_23_n_caixas)
            # tipo_clientes_23
            crop_image_23_tipo_clientes = crop_image_23[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_23_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_23_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_23 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_tipo_clientes = cv.morphologyEx(crop_image_23_tipo_clientes, cv.MORPH_CLOSE, kernel_23)
            crop_image_23_tipo_clientes = cv.cvtColor(crop_image_23_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_tipo_clientes = pytesseract.image_to_string(
                crop_image_23_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_tipo_clientes)
                sheet.write('A469', result_23_tipo_clientes)
            # Servicos_23
            crop_image_23_servicos_1 = crop_image_23[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_servicos_1 = pytesseract.image_to_string(crop_image_23_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_servicos_1)
                sheet.write('A470', result_23_servicos_1)
            # Servicos_2_23
            crop_image_23_servicos_2 = crop_image_23[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_servicos_2 = pytesseract.image_to_string(crop_image_23_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_servicos_2)
                sheet.write('A471', result_23_servicos_2)
            # Caixas_1_23
            crop_image_23_caixas_1 = crop_image_23[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_23_caixas_1 = cv.cvtColor(crop_image_23_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_23_caixas_1 = cv.threshold(crop_image_23_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_caixas_1 = cv.morphologyEx(crop_image_23_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_caixas_1 = pytesseract.image_to_string(crop_image_23_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_caixas_1)
                sheet.write('A472', result_23_caixas_1)
            # Caixas_2_23
            crop_image_23_caixas_2 = crop_image_23[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_23_caixas_2 = cv.cvtColor(crop_image_23_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_23_caixas_2 = cv.threshold(crop_image_23_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_23_caixas_2 = cv.morphologyEx(crop_image_23_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_23_caixas_2 = pytesseract.image_to_string(crop_image_23_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_23_caixas_2)
                sheet.write('A473', result_23_caixas_2)
        if 24 <= numero_quadros:
            crop_image_24 = img1[novo_y_1 * 23:novo_y_1 * 24]

            q = 590
            a = (q + 220)
            z = (q - 590)
            p = (q + 250)
            # Dimensoes_24
            crop_image_24_dimensoes = crop_image_24[q + 60:a - 20, z:p]
            crop_image_24_dimensoes = cv.cvtColor(crop_image_24_dimensoes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_dimensoes = pytesseract.image_to_string(crop_image_24_dimensoes, config='--psm 6 digits')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_dimensoes)
                sheet.write('A484', result_24_dimensoes)
            # Unidades_24
            crop_image_24_unidades = crop_image_24[(q + (422 - numero_quadros+3)):(a + 340), (z + 850):(p + 402)]
            crop_image_24_unidades = cv.fastNlMeansDenoisingColored(crop_image_24_unidades, None, 10, 10, 7, 21)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_unidades = cv.morphologyEx(crop_image_24_unidades, cv.MORPH_CLOSE, kernel_24)
            crop_image_24_unidades = cv.cvtColor(crop_image_24_unidades, cv.COLOR_BGR2GRAY)
            crop_image_24_unidades = cv.threshold(crop_image_24_unidades, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_unidades = pytesseract.image_to_string(
                crop_image_24_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            if result_24_unidades == "" or result_24_unidades[0] == str(4) \
                    or result_24_unidades[0:2] == str(28) or result_24_unidades[0:2] == str(29):
                crop_image_24_unidades = crop_image_24[(q + (422 - numero_quadros + 3)):(a + 340), (z + 850):(p + 402)]
                crop_image_24_unidades = cv.fastNlMeansDenoisingColored(crop_image_24_unidades, None, 10, 10, 7, 21)
                kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
                crop_image_24_unidades = cv.morphologyEx(crop_image_24_unidades, cv.MORPH_CLOSE, kernel_24)
                crop_image_24_unidades = cv.cvtColor(crop_image_24_unidades, cv.COLOR_BGR2GRAY)
                pytesseract.pytesseract.tesseract_cmd = Path(j)
                result_24_unidades = pytesseract.image_to_string(
                    crop_image_24_unidades, config='--psm 8 digits -c tessedit_char_whitelist=1234567890')
            else:
                pass
            with open('abc.txt', mode='w') as file:
                file.write(result_24_unidades)
                sheet.write('A485', result_24_unidades)
            # cliche_24
            crop_image_24_cliche = crop_image_24[(q + 660):(a + 1100), z:(p - 240)]
            crop_image_24_cliche = cv.cvtColor(crop_image_24_cliche, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_cliche = pytesseract.image_to_string(
                crop_image_24_cliche, config='--psm 6 -c tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_cliche)
                sheet.write('A486', result_24_cliche)
            # Tinta_24
            crop_image_24_tinta = crop_image_24[(q - 200):(a + 400), (z + 3530):(p + 3030)]
            crop_image_24_tinta = cv.fastNlMeansDenoisingColored(crop_image_24_tinta, None, 10, 10, 7, 21)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_tinta = cv.morphologyEx(crop_image_24_tinta, cv.MORPH_CLOSE, kernel_24)
            crop_image_24_tinta = cv.cvtColor(crop_image_24_tinta, cv.COLOR_BGR2GRAY)
            crop_image_24_tinta = cv.threshold(crop_image_24_tinta, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_tinta = pytesseract.image_to_string(
                crop_image_24_tinta, config='--psm 6 -c preserve_interword_spaces=1 tessedit_char_whitelist=1234567890')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_tinta)
                sheet.write('A487', result_24_tinta)
            # n_cores_24
            crop_image_24_n_cores = crop_image_24[(q - 2600):(a - 250), (z + 5400):(p + 4999)]
            crop_image_24_n_cores = cv.fastNlMeansDenoisingColored(crop_image_24_n_cores, None, 10, 10, 7, 21)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_n_cores = cv.morphologyEx(crop_image_24_n_cores, cv.MORPH_CLOSE, kernel_24)
            crop_image_24_n_cores = cv.cvtColor(crop_image_24_n_cores, cv.COLOR_BGR2GRAY)
            crop_image_24_n_cores = cv.threshold(crop_image_24_n_cores, 220, 255, cv.THRESH_BINARY)[1]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_n_cores = pytesseract.image_to_string(
                crop_image_24_n_cores, config='--psm 6 digits -c tessedit_char_whitelist=1234Sem impresão')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_n_cores)
                sheet.write('A488', result_24_n_cores)
            # n_caixas_24
            crop_image_24_n_caixas = crop_image_24[(q + 270):(a + 200), (z + 80):(p - 570)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_n_caixas = pytesseract.image_to_string(crop_image_24_n_caixas, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_n_caixas)
                sheet.write('A489', result_24_n_caixas)
            # tipo_clientes_24
            crop_image_24_tipo_clientes = crop_image_24[(q - 190):(a - 250), (z + 5980):(p + 5730)]
            crop_image_24_tipo_clientes = cv.fastNlMeansDenoisingColored(crop_image_24_tipo_clientes,
                                                                         None, 10, 10, 7, 21)
            kernel_24 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_tipo_clientes = cv.morphologyEx(crop_image_24_tipo_clientes, cv.MORPH_CLOSE, kernel_24)
            crop_image_24_tipo_clientes = cv.cvtColor(crop_image_24_tipo_clientes, cv.COLOR_BGR2GRAY)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_tipo_clientes = pytesseract.image_to_string(
                crop_image_24_tipo_clientes, config='--psm 6 -c tessedit_char_whitelist=RClitvd')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_tipo_clientes)
                sheet.write('A490', result_24_tipo_clientes)
            # Servicos_24
            crop_image_24_servicos_1 = crop_image_24[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_servicos_1 = pytesseract.image_to_string(crop_image_24_servicos_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_servicos_1)
                sheet.write('A491', result_24_servicos_1)
            # Servicos_2_24
            crop_image_24_servicos_2 = crop_image_24[(q + 270):(a + 3690), (z + 5950):(p + 5700)]
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_servicos_2 = pytesseract.image_to_string(crop_image_24_servicos_2, config='--oem 3')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_servicos_2)
                sheet.write('A492', result_24_servicos_2)
            # Caixas_1_24
            crop_image_24_caixas_1 = crop_image_24[(q - 965):(a + 3000), (z + 550):(p - 20)]
            crop_image_24_caixas_1 = cv.cvtColor(crop_image_24_caixas_1, cv.COLOR_BGR2GRAY)
            crop_image_24_caixas_1 = cv.threshold(crop_image_24_caixas_1, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_caixas_1 = cv.morphologyEx(crop_image_24_caixas_1, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_caixas_1 = pytesseract.image_to_string(crop_image_24_caixas_1, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_caixas_1)
                sheet.write('A493', result_24_caixas_1)
            # Caixas_2_24
            crop_image_24_caixas_2 = crop_image_24[(q - 965):(a + 3000), (z + 280):(p - 285)]
            crop_image_24_caixas_2 = cv.cvtColor(crop_image_24_caixas_2, cv.COLOR_BGR2GRAY)
            crop_image_24_caixas_2 = cv.threshold(crop_image_24_caixas_2, 220, 255, cv.THRESH_BINARY)[1]
            kernel_1 = cv.getStructuringElement(cv.MORPH_RECT, (3, 3))
            crop_image_24_caixas_2 = cv.morphologyEx(crop_image_24_caixas_2, cv.MORPH_CLOSE, kernel_1)
            pytesseract.pytesseract.tesseract_cmd = Path(j)
            result_24_caixas_2 = pytesseract.image_to_string(crop_image_24_caixas_2, config='--psm 6')
            with open('abc.txt', mode='w') as file:
                file.write(result_24_caixas_2)
                sheet.write('A494', result_24_caixas_2)
        else:
            pass
        workbook.close()
        x = str(Path('C:', '/', 'Users'))
        y = str(Path(gt.getuser(), '/', gt.getuser()))
        z = "\Desktop\AUTO_ORC\Caracteristricas_ORC.xlsx"
        a = x + y + z
        absolutepath = Path(a).resolve()
        os.system(f'start excel.exe "{absolutepath}"')


def extrair_quadros():
    # Converter PDF em JPEG
    path = entry_sv.get()
    path = path.replace("{", "")
    path = path.replace("}", "")
    path = Path(path)
    pages = convert_from_path(path, 961)
    for page in pages:
        page.save('imagem39.jpg', 'JPEG')
    # Ler imagem convertida
    imagem = cv.imread('imagem39.jpg')
    original = imagem.copy()
    # converter imagem para tons de cinza
    imagcinza = cv.cvtColor(imagem, cv.COLOR_BGR2GRAY)
    # Definir cor dos limites
    thresh = cv.threshold(imagcinza, 110, 255, cv.THRESH_BINARY_INV + cv.THRESH_OTSU)[1]
    # Dividir imagem em rectangulos, pelos contornos
    roi_number = 0
    contornos = cv.findContours(thresh, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    contornos = contornos[0] if len(contornos) == 2 else contornos[1]
    for c in contornos:
        x, y, w, h = cv.boundingRect(c)
        cv.rectangle(imagem, (x, y), (x + w, y + h), (36, 255, 12), 2)
        roi = original[y:y + h, x:x + w]
        cv.imwrite('roi_{}.png'.format(roi_number), roi)
        roi_number += 1
    # Extrair numero de imagens(retangulos) extraidas
    numero_objetos_imagem = len(contornos)
    # Extrair imagem que queremos analisar, é sempre o numero de objetos menos 3, para "42" novo modelo
    contorno = numero_objetos_imagem - 3
# Extrair nome da imagem = roi concatenado com nemro de objetos-3 concatenado com o formato do objeto extraido (.png)
    converted_num = str(contorno)
    j = "roi_"
    c = ".png"
    nome_roi = j + converted_num + c
    # Ler objeto extraido
    image = PIL.Image.open(nome_roi)
    x, y = image.size
    # Nova medida de X, para que todas as imagens tenham a mesma dimensao.
    novo_x = 7063
    imput = novo_x / x
    novo_y = y * imput
    novo_y_int = int(novo_y)
    # Redimensionar imagem
    new_image = image.resize((novo_x, novo_y_int))
    new_image.save('imagemfinal.jpg')
    global numero_quadros
    # Calculo do numero de quadros
    numero_quadros = int(novo_y / 2300)
    # Altura de cada quadro
    global num_novos_y
    num_novos_y = novo_y / numero_quadros
    pasta = r'C:\Users\joaoccfaria\PycharmProjects\14\07\AppAutoORC'
    lista = os.listdir(pasta)
    for images in lista:
        if images.endswith(".png"):
            os.remove(os.path.join(pasta, images))
    # Criar livro Excel, para onde serão exportados os dados
    global workbook
    workbook = xlsxwriter.Workbook('Caracteristricas_ORC.xlsx')
    global sheet
    sheet = workbook.add_worksheet()


def abrir_janela():
    # Tela principal
    menu_2 = tk.Toplevel()
    # Nome da App
    menu_2.title('Preenchimento automático do Cálculo Orçamento')
    # Cor de fundo
    menu_2.configure(background='#f0f8ff')
    # Dimensoes da tela
    menu_2.geometry("1290x1050")
    # Titulo da tela
    texto_titulo = Label(menu_2, text='Dados Cálculo Orçamento', background='#FF3030')
    texto_titulo.place(x=350, y=0, width=580, height=40)
    texto_titulo.configure(font=("Courier", 30, "italic", "bold"))


    def dimensoesclicado():

        print()

    def unidadesclicado():

        print()

    def n_coresclicado():

        print()

    def clientesclicado():

        print()

    def n_caixasclicado():

        print()

    def corclicado():

        print()

    def clicheclicado():

        print()

    def caixas_1_clicado():

        print()

    def total_clicado():

        print()

    def servicos_2_clicado():

        print()

    def servicos_1_clicado():

        print()

    def tintaclicado():

        print()

    # Botao imprimir dados
    botao_imprimir_dados = Button(menu_2, text='IMPRIMIR DADOS', command=imprimir_medidas)
    botao_imprimir_dados.place(x=540, y=160, width=200, height=30)
    # padrao dimensoes
    texto_padrao_dimensoes = Label(menu_2, text='# DIMENÕES #')
    texto_padrao_dimensoes.place(x=65, y=210, width=200, height=40)
    # Caixa de verificação das dimensoes
    quadro_verificacao_dimensoes = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_dimensoes.place(x=268, y=216, width=75, height=30)
    caixa_verificacao_dimensoes = Checkbutton(
        quadro_verificacao_dimensoes, text='COPIAR', variable=v_dimensoes,
        cursor="plus", anchor="w", onvalue=1, offvalue=0, command=dimensoesclicado)
    caixa_verificacao_dimensoes.pack(side=LEFT)
    # imprimir na tela dimensoes
    global texto_imprimir_dimensoes
    texto_imprimir_dimensoes = Label(menu_2, text='')
    texto_imprimir_dimensoes.place(x=115, y=251, width=100, height=40)
    # imprimir na tela unidades
    global texto_imprimir_unidades
    texto_imprimir_unidades = Label(menu_2, text='')
    texto_imprimir_unidades.place(x=415, y=251, width=100, height=40)
    # padrao unidades
    texto_padrao_unidades = Label(menu_2, text='# VALOR EM UNIDADES #')
    texto_padrao_unidades.place(x=365, y=210, width=200, height=40)
    # Caixa de verificação das unidades
    quadro_verificacao_unidades = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_unidades.place(x=563, y=216, width=75, height=30)
    caixa_verificacao_unidades = Checkbutton(
        quadro_verificacao_unidades, text='COPIAR', variable=v_unidades,
        cursor="plus", onvalue=1, offvalue=0, command=unidadesclicado)
    caixa_verificacao_unidades.pack()
    # imprimir na tela n_cores
    global texto_imprimir_n_cores
    texto_imprimir_n_cores = Label(menu_2, text='')
    texto_imprimir_n_cores.place(x=715, y=251, width=100, height=40)
    # padrao n_cores
    texto_padrao_n_cores = Label(menu_2, text=' # Nº de CORES #')
    texto_padrao_n_cores.place(x=665, y=210, width=200, height=40)
    # Caixa de verificação das n_cores
    quadro_verificacao_n_cores = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_n_cores.place(x=868, y=216, width=75, height=30)
    caixa_verificacao_n_cores = Checkbutton(
        quadro_verificacao_n_cores, text='COPIAR', variable=v_n_cores,
        cursor="plus", onvalue=1, offvalue=0, command=n_coresclicado)
    caixa_verificacao_n_cores.pack()
    # imprimir na tela clientes
    global texto_imprimir_clientes
    texto_imprimir_clientes = Label(menu_2, text='')
    texto_imprimir_clientes.place(x=1015, y=251, width=100, height=40)
    # padrao clientes
    texto_padrao_clientes = Label(menu_2, text='# TIPO DE CLIENTE #')
    texto_padrao_clientes.place(x=965, y=210, width=200, height=40)
    # Caixa de verificação das clientes
    quadro_verificacao_clientes = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_clientes.place(x=1168, y=216, width=75, height=30)
    caixa_verificacao_clientes = Checkbutton(
        quadro_verificacao_clientes, text='COPIAR', variable=v_clientes,
        cursor="plus", onvalue=1, offvalue=0, command=clientesclicado)
    caixa_verificacao_clientes.pack()
    # imprimir na tela n_caixas
    global texto_imprimir_n_caixas
    texto_imprimir_n_caixas = Label(menu_2, text='')
    texto_imprimir_n_caixas.place(x=115, y=341, width=100, height=140)
    # padrao n_caixas
    texto_padrao_n_caixas = Label(menu_2, text='# Nº de CAIXAS #')
    texto_padrao_n_caixas.place(x=65, y=300, width=200, height=40)
    # Caixa de verificação das n_caixas
    quadro_verificacao_n_caixas = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_n_caixas.place(x=268, y=306, width=75, height=30)
    caixa_verificacao_n_caixas = Checkbutton(
        quadro_verificacao_n_caixas, text='COPIAR', variable=v_n_caixas,
        cursor="plus", onvalue=1, offvalue=0, command=n_caixasclicado)
    caixa_verificacao_n_caixas.pack()
    # imprimir na tela cor
    global texto_imprimir_cor
    texto_imprimir_cor = Label(menu_2, text='')
    texto_imprimir_cor.place(x=415, y=341, width=100, height=140)
    # padrao cor
    texto_padrao_cor = Label(menu_2, text='# CORES #')
    texto_padrao_cor.place(x=365, y=300, width=200, height=40)
    # Caixa de verificação das cor
    quadro_verificacao_cor = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_cor.place(x=568, y=306, width=75, height=30)
    caixa_verificacao_cor = Checkbutton(
        quadro_verificacao_cor, text='COPIAR', variable=v_cor,
        cursor="plus", onvalue=1, offvalue=0, command=corclicado)
    caixa_verificacao_cor.pack()
    # imprimir na tela cliche
    global texto_imprimir_cliche
    texto_imprimir_cliche = Label(menu_2, text='')
    texto_imprimir_cliche.place(x=715, y=341, width=100, height=140)
    # padrao cliche
    texto_padrao_cliche = Label(menu_2, text='# DIMENÕES dos CLICHÊS #')
    texto_padrao_cliche.place(x=665, y=300, width=200, height=40)
    # Caixa de verificação das cliche
    quadro_verificacao_cliche = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_cliche.place(x=868, y=306, width=75, height=30)
    caixa_verificacao_cliche = Checkbutton(
        quadro_verificacao_cliche, text='COPIAR', variable=v_cliche,
        cursor="plus", onvalue=1, offvalue=0, command=clicheclicado)
    caixa_verificacao_cliche.pack()
    # imprimir na tela 1_caixas
    global texto_imprimir_1_caixas
    texto_imprimir_1_caixas = Label(menu_2, text='')
    texto_imprimir_1_caixas.place(x=1015, y=341, width=100, height=140)
    # padrao 1_caixas
    texto_padrao_1_caixas = Label(menu_2, text='# CAIXAS #')
    texto_padrao_1_caixas.place(x=965, y=300, width=200, height=40)
    # Caixa de verificação das 1_caixas
    quadro_verificacao_1_caixas = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_1_caixas.place(x=1168, y=306, width=75, height=30)
    caixa_verificacao_1_caixas = Checkbutton(
        quadro_verificacao_1_caixas, text='COPIAR', variable=v_1_caixas,
        cursor="plus", onvalue=1, offvalue=0, command=caixas_1_clicado)
    caixa_verificacao_1_caixas.pack()
    # imprimir na tela 2_caixas
    global texto_imprimir_total
    texto_imprimir_total = Label(menu_2, text='')
    texto_imprimir_total.place(x=30, y=546, width=250, height=380)
    # padrao 2_caixas
    texto_padrao_total = Label(menu_2, text='# TOTAL(€) #')
    texto_padrao_total.place(x=20, y=505, width=280, height=40)
    # Caixa de verificação das 2_caixas
    quadro_verificacao_total = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_total.place(x=243, y=511, width=75, height=30)
    caixa_verificacao_total = Checkbutton(
        quadro_verificacao_total, text='COPIAR', variable=v_total,
        cursor="plus", onvalue=1, offvalue=0, command=total_clicado)
    caixa_verificacao_total.pack()
    # imprimir na tela servicos_2
    global texto_imprimir_servicos_2
    texto_imprimir_servicos_2 = Label(menu_2, text='')
    texto_imprimir_servicos_2.place(x=330, y=546, width=250, height=380)
    # padrao servicos_2
    texto_padrao_servicos_2 = Label(menu_2, text='# SERVIÇOS #')
    texto_padrao_servicos_2.place(x=320, y=505, width=280, height=40)
    # Caixa de verificação das servicos_2
    quadro_verificacao_servicos_2 = Frame(menu_2,  borderwidth=1, relief='solid')
    quadro_verificacao_servicos_2.place(x=543, y=511, width=75, height=30)
    caixa_verificacao_servicos_2 = Checkbutton(
        quadro_verificacao_servicos_2, text='COPIAR', variable=v_servicos_2,
        cursor="plus", onvalue=1, offvalue=0, command=servicos_2_clicado)
    caixa_verificacao_servicos_2.pack()
    # imprimir na tela servicos_1
    global texto_imprimir_servicos_1
    texto_imprimir_servicos_1 = Label(menu_2, text='')
    texto_imprimir_servicos_1.place(x=630, y=546, width=250, height=380)
    # padrao servicos_1
    texto_padrao_servicos_1 = Label(menu_2, text='# SERVIÇOS #')
    texto_padrao_servicos_1.place(x=620, y=505, width=280, height=40)
    # Caixa de verificação das servicos_1
    quadro_verificacao_servicos_1 = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_servicos_1.place(x=843, y=511, width=75, height=30)
    caixa_verificacao_servicos_1 = Checkbutton(
        quadro_verificacao_servicos_1, text='COPIAR', variable=v_servicos_1,
        cursor="plus", onvalue=1, offvalue=0, command=servicos_1_clicado)
    caixa_verificacao_servicos_1.pack()
    # imprimir na tela tinta
    global texto_imprimir_tinta
    texto_imprimir_tinta = Label(menu_2, text='')
    texto_imprimir_tinta.place(x=930, y=546, width=250, height=380)
    # padrao tinta
    texto_padrao_tinta = Label(menu_2, text='# DIMENSÕES das TINTAS #')
    texto_padrao_tinta.place(x=920, y=505, width=280, height=40)
    # Caixa de verificação das tinta
    quadro_verificacao_tinta = Frame(menu_2, borderwidth=1, relief='solid')
    quadro_verificacao_tinta.place(x=1153, y=511, width=75, height=30)
    caixa_verificacao_tinta = Checkbutton(
        quadro_verificacao_tinta, text='COPIAR', variable=v_tinta,
        cursor="plus", onvalue=1, offvalue=0, command=tintaclicado)
    caixa_verificacao_tinta.pack()
    # Botao Executar
    botao_exportar_excel = Button(menu_2, text='ABRIR EXCEL', command=botao_executar)
    botao_exportar_excel.place(x=540, y=960, width=200, height=30)
    # Botao Voltar
    botao_voltar = Button(menu_2, text='Voltar', command=menu_2.destroy)
    botao_voltar.place(x=5, y=5, width=60, height=40)


menu_1 = Tk()
# Nome da App
menu_1.title('Nome do documento')
# Cor de fundo
menu_1.configure(background='#f0f8ff')
# Dimensoes da tela
menu_1.geometry("680x800")
# Titulo da tela
texto_titulo = Label(menu_1, text='Documento(.pdf)', background='#FF3030')
texto_titulo.place(x=200, y=5, width=240, height=50)
texto_titulo.configure(font=("Courier", 15, "italic", "bold"))
# Arrastar e largar documento
entry_sv = StringVar()
entry_sv.set('Largar PDF aqui...')
entry = Entry(menu_1, textvar=entry_sv, width=80, justify=CENTER, fg="red", font=("Courier", 26, "italic", "bold"))
entry.place(x=120, y=90, width=400, height=180)
entry.drop_target_register(DND_FILES)
entry.dnd_bind('<<Drop>>', drop)

# Titulo Alterar todos
texto_titulo = Label(menu_1, text='Alterar Todos', background='#FF3030')
texto_titulo.place(x=5, y=400, width=670, height=30)
texto_titulo.configure(font=("Courier", 15, "italic", "bold"))

# TIPOS DE ARTIGO#####################
quadro_lb_alterar_todos = Frame(menu_1, borderwidth=1, relief='solid')
quadro_lb_alterar_todos.place(x=240, y=287, width=160, height=60)
# Lista de tipos de artigo
tipos_artigo = ['PLA', '42', '90']
lb_tipos_artigo = Label(quadro_lb_alterar_todos, text='Tipo de Artigo')
lb_tipos_artigo.pack()
# Validação de dados
cb_tipos_artigo = ttk.Combobox(quadro_lb_alterar_todos, values=tipos_artigo, width=35, justify='center')
# Artigo prédefinido
cb_tipos_artigo.set('42')
# Inserir validação de daods na tela
cb_tipos_artigo.pack()

# Alterar todos
# Preço de Embalagens
quadro_lb_embalagens = Frame(menu_1, borderwidth=1, relief='solid')
quadro_lb_embalagens.place(x=40, y=525, width=300, height=140)
# titulo Quantidades
Label(quadro_lb_embalagens, text='Quantidades', anchor=W).place(x=80, y=2, width=100, height=20)
# titulo Preço unitário
Label(quadro_lb_embalagens, text='Preço/1', anchor=W).place(x=205, y=2, width=100, height=20)
# titulo da entrada Caixas
Label(quadro_lb_embalagens, text='Caixas', anchor=W).place(x=10, y=25, width=100, height=20)
# Entrada de texto quantidades caixas
preco_caixas_qtd = Entry(quadro_lb_embalagens, justify='center')
preco_caixas_qtd.insert(0, "Manter")
preco_caixas_qtd.pack()
preco_caixas_qtd.place(x=70, y=25, width=90, height=20)
# Entrada de texto preço unitário caixas
vf = ['Sim', 'Manter', 'Não']
# Validação de dados
preco_caixas_p1 = ttk.Combobox(quadro_lb_embalagens, values=vf, width=35, justify='center')
preco_caixas_p1.insert(0, "Não")
preco_caixas_p1.pack()
preco_caixas_p1.place(x=190, y=25, width=90, height=20)

# titulo da entrada preço de compra folhas
Label(quadro_lb_embalagens, text='Folhas', anchor=W).place(x=10, y=50, width=100, height=20)
# Entrada de texto quantidades folhas
preco_folhas_qtd = Entry(quadro_lb_embalagens, justify='center')
preco_folhas_qtd.insert(0, "Manter")
preco_folhas_qtd.pack()
preco_folhas_qtd.place(x=70, y=50, width=90, height=20)
# Entrada de texto preço unitário folhas
preco_folhas_p1 = Entry(quadro_lb_embalagens, justify='center')
preco_folhas_p1.insert(0, "0,05")
preco_folhas_p1.pack()
preco_folhas_p1.place(x=190, y=50, width=90, height=20)

# titulo da entrada preço de compra paletes
Label(quadro_lb_embalagens, text='Paletes', anchor=W).place(x=10, y=75, width=100, height=20)
# Entrada de texto quantidades paletes
preco_paletes_qtd = Entry(quadro_lb_embalagens, justify='center')
preco_paletes_qtd.insert(0, "0")
preco_paletes_qtd.pack()
preco_paletes_qtd.place(x=70, y=75, width=90, height=20)
# Entrada de texto preço unitário paletes
preco_paletes_p1 = Entry(quadro_lb_embalagens, justify='center')
preco_paletes_p1.insert(0, "4,18")
preco_paletes_p1.pack()
preco_paletes_p1.place(x=190, y=75, width=90, height=20)

# titulo da entrada preço de compra portes
Label(quadro_lb_embalagens, text='Portes', anchor=W).place(x=10, y=100, width=100, height=20)
# Entrada de texto quantidades portes
preco_portes_qtd = Entry(quadro_lb_embalagens, justify='center')
preco_portes_qtd.insert(0, "0")
preco_portes_qtd.pack()
preco_portes_qtd.place(x=70, y=100, width=90, height=20)
# Entrada de texto preço unitário portes
preco_portes_p1 = Entry(quadro_lb_embalagens, justify='center')
preco_portes_p1.insert(0, "5")
preco_portes_p1.pack()
preco_portes_p1.place(x=190, y=100, width=90, height=20)

# Alterar todos
# Preço de compra
quadro_lb_preco_compra = Frame(menu_1, borderwidth=1, relief='solid')
quadro_lb_preco_compra.place(x=40, y=460, width=300, height=60)
# titulo da entrada preço de compra
Label(quadro_lb_preco_compra, text='Preço de Compra', anchor=W).place(x=20, y=0, width=100, height=20)
# Entrada de texto
preco_compra = Entry(quadro_lb_preco_compra, justify='center')
preco_compra.pack()
preco_compra.place(x=20, y=25, width=100, height=20)

preco_compra.insert(0, "2,3")

# titulo da entrada Espessura
Label(quadro_lb_preco_compra, text='Espessura', anchor=W).place(x=190, y=0, width=130, height=20)
# Entrada de texto
espessura = Entry(quadro_lb_preco_compra, justify='center')
espessura.pack()
espessura.place(x=140, y=25, width=140, height=20)
espessura.insert(0, "Manter")

# Cores da Impressão
quadro_lb_cores_impressao = Frame(menu_1, borderwidth=1, relief='solid')
quadro_lb_cores_impressao.place(x=400, y=460, width=180, height=186)
# Titulo quadro validação de dados Cores da Impressão
lb_cores_impressao = Label(quadro_lb_cores_impressao, text='Cores da Impressão', height=2)
lb_cores_impressao.pack()
# Lista de Cores da Impressão
cores_impressao = ['Manter', 'Sem Impressão', 'Preto', 'Cinza', 'Vermelho', 'Azul', 'Dourado', 'Branco']
# lb_cores_impressao = Label(quadro_lb_cores_impressao, text='Cor 1')
# lb_cores_impressao.pack()
# Validação de dados
cb_cores_impressao_1 = ttk.Combobox(quadro_lb_cores_impressao, values=cores_impressao, width=35, justify='center')
# Inserir validação de daods na tela
cb_cores_impressao_1.pack(ipadx=2)
# Artigo prédefinido
cb_cores_impressao_1.set('Manter')
# Validação de dados_2
cb_cores_impressao_2 = ttk.Combobox(quadro_lb_cores_impressao, values=cores_impressao, width=35, justify='center')
# Inserir validação de daods na tela
cb_cores_impressao_2.pack(ipadx=3)
# Artigo prédefinido
cb_cores_impressao_2.set('Manter')
# Validação de dados_3
cb_cores_impressao_3 = ttk.Combobox(quadro_lb_cores_impressao, values=cores_impressao, width=35, justify='center')
# Inserir validação de daods na tela
cb_cores_impressao_3.pack(ipadx=4)
# Artigo prédefinido
cb_cores_impressao_3.set('Manter')
# Validação de dados_4
cb_cores_impressao_4 = ttk.Combobox(quadro_lb_cores_impressao, values=cores_impressao, width=35, justify='center')
# Inserir validação de daods na tela
cb_cores_impressao_4.pack(ipadx=5)
# Artigo prédefinido
cb_cores_impressao_4.set('Manter')
# Validação de dados_5
cb_cores_impressao_5 = ttk.Combobox(quadro_lb_cores_impressao, values=cores_impressao, width=35, justify='center')
# Inserir validação de daods na tela
cb_cores_impressao_5.pack(ipadx=6)
# Artigo prédefinido
cb_cores_impressao_5.set('Manter')
# Validação de dados_6
cb_cores_impressao_6 = ttk.Combobox(quadro_lb_cores_impressao, values=cores_impressao, width=35, justify='center')
# Inserir validação de daods na tela
cb_cores_impressao_6.pack(ipadx=7)
# Artigo prédefinido
cb_cores_impressao_6.set('Manter')
# Validação de dados_7
cb_cores_impressao_7 = ttk.Combobox(quadro_lb_cores_impressao, values=cores_impressao, width=35, justify='center')
# Inserir validação de daods na tela
cb_cores_impressao_7.pack(ipadx=8)
# Artigo prédefinido
cb_cores_impressao_7.set('Manter')
# Botao Abrir Janela
botao_abrir_janela = Button(menu_1, text='Carregar documento', command=lambda: [abrir_janela(), extrair_quadros()])
botao_abrir_janela.place(x=250, y=700, width=150, height=50)
# Variaveis
v_dimensoes = IntVar(value=1)
v_unidades = IntVar(value=1)
v_n_cores = IntVar(value=1)
v_clientes = IntVar(value=1)
v_n_caixas = IntVar(value=1)
v_cor = IntVar(value=1)
v_cliche = IntVar(value=1)
v_1_caixas = IntVar(value=1)
v_total = IntVar(value=1)
v_servicos_2 = IntVar(value=1)
v_servicos_1 = IntVar(value=1)
v_tinta = IntVar(value=1)
menu_1.mainloop()
